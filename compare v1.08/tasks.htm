
<html>
<!-- Design & Programming by Sergey Belyaev, @2006-2011 E-mail: bsn@mail.ru -->
<head>
  <title>acmp.ru - compare</title>
  <meta http-equiv="Content-Type" content="text/html; charset=windows-1251;charset=windows-1251">
  <meta name="description" content="">
  <meta name="keywords" content="">
  <link rel="stylesheet" type="text/css" href="acmp_files/acmp_sty.css">
</head>
<body>


<h5>
<a href="http://acmp.ru/index.asp?main=user&id=97740" target="_blank">Madibekov Nurbakhyt</a>
<br>[TO]<br>
<a href="http://acmp.ru/index.asp?main=user&id=93028" target="_blank">Aisultan Kali</a>
<br></h5>
<h1><a href="http://acmp.ru/index.asp?main=task&id_task=111" target="_blank">Задача №111</a><br>Математическое моделирование<br>Игра «Пуговицы»</h1><center><i>(Время: 0,25 сек. Память: 16 Мб Сложность: 48%)</i></center>
<p class=text>
Правила игры очень просты. Перед двумя играющими находится кучка из K пуговиц. Играющие по очереди берут пуговицы из кучки, причем за один ход каждый из них может взять от 1 до L пуговиц. Выигрывает тот из спортсменов, которому удастся взять последнюю пуговицу.
</p>
<p class=text>
Тот из игроков, которому по жребию выпадает делать первый ход, получает возможность собственноручно назначить число K. Тот из игроков, который будет ходить вторым, выбирает, в свою очередь, число L.
</p>
<p class=text>
Вам необходимо определить наилучшую стратегию для участника, который ходит вторым.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записано одно натуральное число K (1 &#8804; K &#8804; 10<sup>8</sup>) – общее количество пуговиц.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT необходимо вывести целое число L (2 &#8804; L < K) — максимальное количество пуговиц, которое можно взять за один ход, обеспечивающее победу второму игроку. Если таких чисел несколько, то следует вывести наименьшее из них. Если таких чисел нет, то следует вывести число 0. 
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3</td><td valign=top>2</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>26</td><td valign=top>12</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>31</td><td valign=top>30</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=134" target="_blank">Задача №134</a><br>Теория графов<br>Автобусы</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 50%)</i></center>
<p class=text>
Между некоторыми деревнями края Власюки ходят автобусы. Поскольку пассажиропотоки здесь не очень большие, то автобусы ходят всего несколько раз в день.
</p>
<p class=text>
Марии Ивановне требуется добраться из деревни d в деревню v как можно быстрее (считается, что в момент времени 0 она находится в деревне d).
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записано число N - общее число деревень (1 <= N <= 100), номера деревень d и v, затем количество автобусных рейсов R (0 <= R <= 10000). Затем идут описания автобусных рейсов. Каждый рейс задается номером деревни отправления, временем отправления, деревней назначения и временем прибытия (все времена - целые от 0 до 10000). Если в момент t пассажир приезжает в деревню, то уехать из нее он может в любой момент времени, начиная с t.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT вывести минимальное время, когда Мария Ивановна может оказаться в деревне v. Если она не сможет с помощью указанных автобусных рейсов добраться из d в v, вывести -1.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3<br>
1 3<br>
4<br>
1 0 2 5<br>
1 1 2 3<br>
2 3 3 5<br>
1 1 3 10
</td><td valign=top>5</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=146" target="_blank">Задача №146</a><br>Длинная арифметика<br>Длинный корень</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 67%)</i></center>
<p class=text>
По заданному натуральному числу А требуется найти наибольшее число В такое, что B<sup>2</sup> <= A.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записано натуральное число A (A <= 10<sup>3000</sup>).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите максимальное натуральное число B, квадрат которого не превосходит A. Число B следует выводить без лидирующих нулей.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>17</td><td valign=top>4</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=158" target="_blank">Задача №158</a><br>Комбинаторика<br>Великий комбинатор</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 60%)</i></center>
<p class=text>
В результате очередной хитроумной комбинации у Остапа Бендера и его компаньонов - K детей лейтенанта Шмидта оказалось X рублей пятирублевыми банкнотами. И вот дело, как водится, дошло до дележа...
</p>
<p class=text>
Шура Балаганов предложил "по справедливости", т.е. всем поровну. Паниковский порешил себе отдать половину, а остальным "по заслугам". Каждый из K детей лейтенанта предложил что-нибудь интересное. Однако, у Великого Комбинатора имелось свое мнение на этот счет...
</p>
<p class=text>
Ваша же задача состоит в нахождении количества способов разделить имеющиеся деньги между всеми участниками этих славных событий: K детьми лейтенанта Шмидта и Остапом Бендером.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записаны целые числа X (0 <= X <= 500) и 
K (0 <= K <= 100). Естественно, что число X делится на 5. Да и при дележе рвать пятирублевые банкноты не разрешается. 
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно целое число - количество способов дележа.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>15 2</td><td valign=top>10</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=160" target="_blank">Задача №160</a><br>Комбинаторика<br>Степень перестановки</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 46%)</i></center>
<p class=text>
Требуется вычислить степень заданной перестановки.  
</p>
<p class=text>
<i>Перестановкой</i> из N элементов называется упорядоченный набор из N различных чисел от 1 до N. Количество различных перестановок порядка N равно P<sub>N</sub> = N!
</p>
<p class=text>
Пусть у нас есть упорядоченное множество из N элементов. Перестановка задает преобразование этого множества. А именно, она говорит, что на i место нужно поставить ai элемент множества, где a<sub>i</sub> - i-тый элемент перестановки. 
</p>
<p class=text>
<i>Обратной перестановкой</i> к перестановке &#960; называется такая перестановка &#960;<sup>-1</sup>, что &#960;&#960;<sup>-1</sup> = &#960;<sup>-1</sup>&#960; = &#949;, где &#949; – тождественная перестановка.
</p>
<p class=text>
<i>Степенью перестановки</i> называется минимальное натуральное число k такое, что &#960;<sup>k</sup> = &#949;
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT записано число 0 < N <= 100 - порядок перестановки. Во второй строке записана сама перестановка. 
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите степень данной перестановки. Гарантируется, что ответ не превышает 10<sup>9</sup>.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3<br>
2 3 1
</td><td valign=top>3</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=161" target="_blank">Задача №161</a><br>Комбинаторика<br>Восстановление перестановки</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 44%)</i></center>
<p class=text>
<i>Перестановкой</i> из N элементов называется упорядоченный набор из N различных чисел от 1 до N. 
</p>
<p class=text>
Пусть у нас есть упорядоченное множество из N элементов. Перестановка задает преобразование этого множества. А именно, она говорит, что на i место нужно поставить ai элемент множества, где a<sub>i</sub> - i-тый элемент перестановки.
</p>
<p class=text>
Пусть дана перестановка &#960;. Обозначим &#966;[i] - количество таких j, что &#960;[j] > &#960;[i], а j < i. &#966; называется <i>таблицей инверсий</i> перестановки &#960;.
</p>
<p class=text>
Требуется по данной таблице инверсий восстановить перестановку.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT записано число 0 < N <= 2000 - порядок перестановки. Во второй строке записана таблица инверсий.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите искомую перестановку.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3<br>0 0 2</td><td valign=top>2 3 1</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=176" target="_blank">Задача №176</a><br>Динамическое программирование<br>Скобочки</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 69%)</i></center>
<p class=text>
Строка, состоящая из символов «(» и «)», называется скобочной последовательностью. Скобочная последовательность называется правильной, если она может быть получена из некоторого корректного арифметического выражения удалением всех символов, кроме скобок. Например, правильная скобочная последовательность «(())()» может быть получена из выражения «(2-(3+4)*6)*(1+1)». 
</p>
<p class=text>
Глубиной правильной скобочной последовательности называется максимальная разность между количеством открывающихся и закрывающихся скобок в префиксе последовательности (префиксом строки S называется строка, которую можно получить из S удалением некоторого количества последних символов, например, префиксами строки «ABCAB» являются строки «», «A», «AB», «ABC», «ABCA» и «ABCAB»). Например, глубина последовательности «()()(())» равна двум, т.к. префикс «()()((» имеет 4 открывающиеся и 2 закрывающиеся скобки.
</p>
<p class=text>
Требуется написать программу, определяющую по заданным значениям N и K количество правильных скобочных последовательностей с N открывающимися скобками, которые имеют глубину, равную K.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит в одной строке целые числа N и K (1 &#8804; K &#8804; N &#8804; 50), разделенные пробелом.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать одно число — количество правильных скобочных последовательностей с n открывающимися скобками, которые имеют глубину k.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3 2</td><td valign=top>3</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>37 23</td><td valign=top>203685956218528</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=180" target="_blank">Задача №180</a><br>Целочисленная арифметика<br>Счастливая страница</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 46%)</i></center>
<p class=text>
В новом выпуске Большой Галактической Энциклопедии N страниц. Петя считает страницу счастливой, если произведение цифр, входящих в ее номер, равно K. Например, если N=100, то для K=42 есть счастливая страница (например, с номером 76), а для K=128 счастливой страницы нет.
</p>
<p class=text>
Требуется написать программу, которая поможет Пете определить, есть ли счастливые страницы в новом выпуске энциклопедии.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной текстовый файл INPUT.TXT содержит числа N (1 <= N <= 10<sup>9</sup>) и K (1 <= K <= 10<sup>9</sup>), записанные через пробел.
</p>


<h2>Выходные данные</h2>

<p class=text>
Выходной текстовый файл OUTPUT.TXT должен содержать «YES», если счастливые страницы есть, и «NO» иначе.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>100 42</td><td valign=top>YES</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>100 128</td><td valign=top>NO</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=181" target="_blank">Задача №181</a><br>Динамическое программирование<br>Космический мусорщик</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 52%)</i></center>
<p class=text>
В околоземном космическом пространстве накопилось много мусора, поэтому ученые сконструировали специальный аппарат ловушку для космического мусора. Аппарат должен двигаться по достаточно сложной траектории, сжигая по пути мусор. Ловушка может передвигаться в пространстве по 6 направлениям: на север (N), на юг (S), на запад (W), на восток (E), вверх (U) и вниз (D). Движением ловушки управляет процессор. Программа движения задается шестью правилами движения, которые соответствуют каждому из указанных направлений. Каждое такое правило представляет собой строку символов из множества {N, S, W, E, U, D}.
</p>
<p class=text>
Команда ловушки состоит из символа направления и целого положительного числа M. Если параметр больше 1, то ловушка перемещается на один метр в направлении, которое указано в команде, а затем последовательно выполняет команды, заданные правилом для данного направления, с параметром меньше на 1. Если же параметр равен 1, то просто перемещается на один метр в указанном направлении.
</p>
<table width=100%><tr><td valign=top>
<p class=text>
Пусть, например, заданы правила, отраженные в таблице справа. Тогда при выполнении команды S(3) мусорщик сначала переместится на 1 метр в направлении S, а потом выполнит последовательно команды N(2), U(2), S(2), D(2), D(2), U(2), S(2), E(2).
</p>
<p class=text>
Если далее проанализировать действия мусорщика, получим, что в целом он совершит ровно 34 перемещения.
</p>  
</td><td width=250>
  <table class=main cellpadding=2 cellspacing=1>
  <tr><th>Направление</th><th>Правило</th></tr>
  <tr class=white2><td valign=top>N </td><td valign=top>N </td></tr>
  <tr class=white2><td valign=top>S </td><td valign=top>NUSDDUSE </td></tr>
  <tr class=white2><td valign=top>W </td><td valign=top>UEWWD </td></tr>
  <tr class=white2><td valign=top>E </td><td valign=top> </td></tr>
  <tr class=white2><td valign=top>U </td><td valign=top>U </td></tr>
  <tr class=white2><td valign=top>D </td><td valign=top>WED </td></tr>
  </table>
</td></tr></table>


<h2>Входные данные</h2>

<p class=text>
Первые шесть строк входного файла INPUT.TXT задают правила для команд с направлением N, S, W, E, U и D соответственно. Каждая строка содержит не более 100 символов (и может быть пустой). Следующая строка содержит команду ловушки: сначала символ из множества {N, S, W, E, U, D}, затем пробел и параметр команды – целое положительное число, не превышающее 100.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выведите в выходной файл OUTPUT.TXT единственное число - количество перемещений, которое совершит ловушка. Гарантируется, что ответ не превышает 10<sup>9</sup>.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>N<br>
NUSDDUSE<br>
UEWWD<br>
<br>
U<br>
WED<br>
S 3
</td><td valign=top>34 </td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=188" target="_blank">Задача №188</a><br>Комбинаторика<br>День рождения</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 75%)</i></center>
<p class=text>
Иван Иванович пригласил на свой день рождения много гостей. Он написал на карточках фамилии всех гостей и разложил эти карточки на столе, полагая, что каждый гость сядет там, где обнаружит карточку со своей фамилией (фамилии у всех гостей различны). Однако гости не обратили внимания на карточки и сели за стол в произвольном порядке. При этом Иван Иванович с удивлением обнаружил, что ни один гость не сел на предназначенное ему место.
</p>
<p class=text>
Требуется написать программу, которая найдет сколькими способами можно рассадить гостей так, чтобы ни один из них не сидел там, где лежала карточка с его фамилией.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT задано целое число N – количество гостей (1 &#8804; N &#8804; 100).
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать одно целое число – количество способов рассадить гостей.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1</td><td valign=top>0</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>2</td><td valign=top>1</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>5</td><td valign=top>44</td></tr>
<tr class=white2><td align=center>4</td><td valign=top>20</td><td valign=top>895014631192902121</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=194" target="_blank">Задача №194</a><br>Динамическое программирование<br>Фотограф-зануда</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 55%)</i></center>
<p class=text>
Однажды глава семейства заказал фотографию своей большой семьи, состоящей из N человек, возраст которых 1 год, 2 года, …, N-1 лет и N лет. На фотографии должны присутствовать все родственники, и для этого они должны расположиться в один ряд. Сначала было решено расположить родственников по старшинству, начиная с самого младшего. Но фотограф сказал, что, возможно, на фото это будет выглядеть неестественно. Тогда было решено использовать следующее размещение: 
</p>
<ol>
  <li>слева сидит ребенок возрастом в 1 год</li>
  <li>разность возрастов двух соседних родственников не превышает 2 года</li>
</ol>
<p class=text>
Действительно, на фотографии, таким образом, все будут все равно выглядеть, будто расположенные по старшинству (ведь среди людей возрастом, к примеру, 25 и 27 лет не так легко определить старшего). Способов такой посадки существует, понятно, несколько. Фотограф снял все такие способы. Сколько же фотографий получилось в итоге?
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT содержится число N (1 <= N <= 55) – количество членов большой семьи.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать искомое число фотографий.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4</td><td valign=top>4</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>7</td><td valign=top>14</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=198" target="_blank">Задача №198</a><br>Двумерные массивы<br>Система линейных уравнений</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 57%)</i></center>
<p class=text>
Требуется решить невырожденную систему, состоящую из N линейных уравнений с N неизвестными:
</p>

<img src="acmp_files/image00P.gif" alt="Система линейных уравнений">

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT задано натуральное число N – ранг системы, далее следуют N строк, каждая из которых состоит из N+1 целых чисел: коэффициенты i-й строки уравнения – N чисел a<sub>ij</sub> и b<sub>i</sub>. (N<=100, |a<sub>ij</sub>|<10, |b<sub>i</sub>|<10<sup>4</sup>).
</p>

<h2>Выходные данные</h2>

<p class=text>
В единственную строку выходного файла OUTPUT.TXT нужно вывести через пробел корни приведенной во входном файле системы линейных уравнений. Корни следует выводить в порядке возрастания их номеров (x<sub>1</sub>, x<sub>2</sub>, ... x<sub>n</sub>). Гарантируется, что все корни целые и не превосходят значения 10 по абсолютной величине.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>2<br>
5  9  62<br>
9 -3  54<br>
</td><td valign=top>7 3</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>3<br>
7 -9  1   2<br>
0  6  5 -15<br>
3 -3  2  -9
</td><td valign=top>8 5 -9</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=227" target="_blank">Задача №227</a><br>Целочисленная арифметика<br>Сломанный калькулятор</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 62%)</i></center>
<p class=text>
У калькулятора есть две ячейки памяти: содержимое первой из них всегда отображается на табло, вторая является буфером. В начальный момент времени на табло калькулятора отображается целое число X, а в буфере записано число 0. У калькулятора работают только две клавиши: «+» и «=». При нажатии на «+» число, которое в данный момент отображено на табло, копируется в буфер. При нажатии на «=» число из буфера прибавляется к числу, отображенному на табло, и результат отображается на табло, число в буфере при этом не меняется.
</p>
<p class=text>
Требуется за наименьшее число нажатий клавиш на калькуляторе добиться того, чтобы на табло было отображено число Y.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит два целых числа X и Y. Каждое из этих чисел по модулю не превышает 10<sup>9</sup>.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно число — количество нажатий клавиш, которое потребуется для получения числа Y. Если из числа X получить число Y с помощью указанных операций невозможно, в выходной файл выведите одно число –1.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th><th>Пояснение</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1 1</td><td valign=top>0</td><td valign=top>&nbsp;</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>-2 -6</td><td valign=top>3</td><td valign=top>+==</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>1 8</td><td valign=top>6</td><td valign=top>+===+=</td></tr>
<tr class=white2><td align=center>4</td><td valign=top>2 5</td><td valign=top>-1</td><td valign=top>&nbsp;</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=238" target="_blank">Задача №238</a><br>Теория графов<br>Побег с космической станции</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 52%)</i></center>
<p class=text>
Представьте, что вы состоите на службе во внешней разведке Межгалактического Альянса Республиканских Сил (МАРС). Одному из агентов разведки крупно не повезло, и он был захвачен на засекреченной космической базе. К счастью, внешней разведке МАРС удалось заполучить план этой базы. И вот теперь вам поручено разработать план побега. 
</p>
<p class=text>
База представляет собой прямоугольник размером NхM, со всех сторон окружённый стенами, и состоящий из квадратных отсеков единичной площади. База снабжена K выходами, до одного из которых агенту необходимо добраться. В некоторых отсеках базы находятся стены. Ваш агент может перемещаться из отсека в любой из четырех соседних с ним, если в том отсеке, куда он хочет переместиться, нет стены. 
</p>
<p class=text>
Кроме того, база снабжена системой гипертуннелей, способных перемещать агента из одного отсека базы (вход в гипертуннель) в другой (выход из гипертуннеля). Когда агент находится в отсеке, где есть вход в гипертуннель, он может (но не обязан) им воспользоваться.
</p>
<p class=text>
Начальное положение вашего агента известно. Вам необходимо найти кратчайший путь побега (то есть путь, проходящий через минимальное количество отсеков).
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT записаны числа N и M (2<=N<=100, 2<=M<=100), задающие размеры базы: N — количество строк в плане базы, M — количество столбцов. Во второй строке записаны начальные координаты агента X<sub>A</sub>,Y<sub>A</sub> (1<=X<sub>A</sub><=N, 1<=Y<sub>A</sub><=M). Первая координата задает номер строки, вторая — номер столбца. Строки нумеруются сверху вниз, столбцы слева направо. Далее следуют N строк по M чисел, задающих описание стен внутри базы: 1 соответствует стенке, 0 — её отсутствию. Далее в отдельной строке записано число H (0<=H<=1000) — количество гипертуннелей. В последующих H строках идут описания гипертуннелей. Каждый гипертуннель задается 4 числами: X<sub>1</sub>, Y<sub>1</sub>, X<sub>2</sub>, Y<sub>2</sub> (1<=X<sub>1</sub>,X<sub>2</sub><=N; 1<=Y<sub>1</sub>,Y<sub>2</sub><=M) — координатами входа и выхода гипертуннеля. Никакие два гипертуннеля не имеют общего входа. После этого в отдельной строке следует число K (1<=K<=10) — количество выходов с базы. В последующих K строках идут описания выходов с базы. Каждый выход задается двумя координатами X и Y (1<=X<=N; 1<=Y<=M).
</p>
<p class=text>
Гарантируется, что начальные координаты агента не совпадают ни с одним из выходов и он не стоит в отсеке, занятом стеной. Никакие входы и выходы гипертуннелей, а также выходы с базы не находятся в отсеках, занятых стенами. Никакой вход в гипертуннель не совпадает с выходом с базы.
</p>

<h2>Выходные данные</h2>

<p class=text>
Если побег невозможен, выведите в выходной файл OUTPUT.TXT "Impossible". В противном случае следует вывести количество отсеков в кратчайшем пути побега.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4 5<br>
2 1<br>
0 0 0 0 0<br>
0 1 0 0 0<br>
0 0 0 0 0<br>
0 0 0 0 0<br>
2<br>
1 2 1 4<br>
3 1 1 4<br>
1<br> 
2 4
</td><td valign=top>4</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=248" target="_blank">Задача №248</a><br>Разбор строк<br>EuroEnglish</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 55%)</i></center>
<p class=text>
Европейская комиссия планирует принять решение о том, что официальным языком Евросоюза станет английский. Был также разработан план упрощения английской письменности, который планируется реализовать за четыре года. 
</p>
<p class=text>
Первоочередной задачей будет избавление от буквы c, которая в сочетаниях сi и сe будет изменяться на s, в сочетании ck — опускаться, а в остальных случаях заменяться на k. При этом все замены будут производиться в строгом порядке слева направо. То есть, например, в слове success сначала первая из двух букв c заменится на k, а затем вторая — на s, то есть получится suksess. А слово cck превратится в kk.
</p>
<p class=text>
На второй год из английских слов изымут все удвоенные буквы: ee изменят на i, oo - на u, a в остальных комбинациях будут просто писать одну букву вместо двух одинаковых. Такие замены также будут делать строго в порядке слева направо. Так, слово ooo превратится в uo, а oou — просто в u (в нем сначала oo заменится на u, а затем uu — на u), слово iee превратится в i (в нем сначала ee заменится на i, а затем ii — на i).
</p>
<p class=text>
На третий год на конце слова станут опускать букву е, если она не единственная буква в слове. 
</p>
<p class=text>
Наконец, завершением реформы станет отмена артиклей (в английском языке три артикля: а, an и the). При этом удаляться эти артикли будут только тогда, когда они в исходном тексте были словами a, an, the. То есть, например, текст the table после реформ первых трех лет превратиться в th tabl, а после реформы четвертого года — просто в tabl. А слово aaaaa после реформы первых лет станет словом a, но поскольку изначально оно не было словом a (артиклем), то оно в итоге так и останется словом a.
</p>
<p class=text>
Напишите программу, которая будет переводить классический английский текст на Eвроинглиш.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записана одна строка текста, состоящая не более чем из 200 символов: латинских строчных и заглавных букв, пробелов и знаков препинания (в тексте могут встречаться: точка, запятая, вопросительный и восклицательный знаки, двоеточие, тире, точка с запятой, открывающаяся и закрывающаяся скобки, апострофы, кавычки). Заглавные буквы могут встречаться только в начале слова. Нигде подряд не могут стоять два пробела. В начале и в конце строки не может стоять пробел. Слова отделяются друг от друга пробелами и/или знаками препинания.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT нужно выдать преобразованную строку при ограничениях:
</p>
<ul>
<li>начинаться с заглавной буквы должны те и только те слова, которые начинались с заглавной буквы в исходном тексте;</li>
<li>не должно встречаться двух пробелов подряд;</li>
<li>пробелы между словами и знаками препинания должны остаться там и только там, где они были в исходной строке, в начале и в конце строки пробелов быть не должно.</li>
</ul>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>cacao and coffee</td><td valign=top>kakao and kofi</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>Cinderella! Where Is The Dress???</td><td valign=top>Sinderela! Wher Is Dres???</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>'A' is a letter </td><td valign=top>'' is leter</td></tr>
<tr class=white2><td align=center>4</td><td valign=top>!!!Hello!!!A-the-"word"</td><td valign=top>!!!Helo!!!--"word"</td></tr>
<tr class=white2><td align=center>5</td><td valign=top>Aaaa then the ckckck</td><td valign=top>A then k</td></tr>
<tr class=white2><td align=center>6</td><td valign=top>"A"-the an</td><td valign=top>""-</td></tr>
<tr class=white2><td align=center>7</td><td valign=top>A the an</td><td valign=top>&nbsp;</td></tr>
<tr class=white2><td align=center>8</td><td valign=top>success</td><td valign=top>sukses</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=249" target="_blank">Задача №249</a><br>Разбор строк<br>Скобки</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 61%)</i></center>
<p class=text>
Назовем строку S правильной скобочной последовательностью, если она состоит только из символов '{', '}', '[', ']', '(', ')' и выполнено хотя бы одно из следующих трех условий:
</p>
<ol>
<li>S — пустая строка;</li>
<li>S можно представить в виде S=S<sub>1</sub>+S<sub>2</sub>+S<sub>3</sub>+...+S<sub>N</sub> (N>1), где S<sub>i</sub> — непустые правильные скобочные последовательности, а знак "+" обозначает конкатенацию (приписывание) строк;</li>
<li>S можно представить в виде S='{'+C+'}' или S='['+C+']' или S='('+C+')', где C является правильной скобочной последовательностью.</li>
</ol>
<p class=text>
Дана строка, состоящая только из символов '{', '}', '[', ']', '(', ')'. Требуется определить, какое минимальное количество символов надо вставить в эту строку для того, чтобы она стала правильной скобочной последовательностью.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT записана строка, состоящая только из символов '{', '}', '[',']', '(', ')'. Длина строки не превосходит 100 символов.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите ответ на поставленную задачу.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>{(})</td><td valign=top>2</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>([{}])</td><td valign=top>0</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=259" target="_blank">Задача №259</a><br>Динамическое программирование<br>A-функция от строчки</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 59%)</i></center>
<p class=text>
Дана строка S, состоящая из N символов. Определим функцию A(i) от первых i символов этой строки следующим образом:
</p>
<p class=text>
A(i) = максимально возможному k, что равны следующие строки: 
</p>
<p class=text>
S[1]+S[2]+S[3]+…+S[k]
</p>
<p class=text>
S[i]+S[i–1]+S[i–2]+…+S[i–k+1]
</p>
<p class=text>
где S[i] – i-ый символ строки S, а знак + означает, что символы записываются в строчку непосредственно друг за другом.
</p>
<p class=text>
Напишите программу, которая вычислит значения функции A для заданной строчки для всех возможных значений i от 1 до N.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT записано одно число N. 1<=N<=200000. Во второй строке записана строка длиной N символов, состоящая только из больших и/или маленьких латинских букв.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите N чисел — значения функции A(1), A(2), … A(N).
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5<br>aabaa</td><td valign=top>1 2 0 1 5</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=267" target="_blank">Задача №267</a><br>Простая математика<br>Ксерокопии</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 38%)</i></center>
<p class=text>
Секретарша Ирочка сегодня опоздала на работу и ей срочно нужно успеть к обеду сделать N копий одного документа. В ее распоряжении имеются два ксерокса, один из которых копирует лист за х секунд, а другой – за y секунд. (Разрешается использовать как один ксерокс, так и оба одновременно. Можно копировать не только с оригинала, но и с копии.) Помогите ей выяснить, какое минимальное время для этого потребуется.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записаны три натуральных числа N, x и y, разделенные пробелом (1 &#8804; N &#8804; 2&#8729;10<sup>8</sup>, 1 &#8804; x, y &#8804; 10).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно число – минимальное время в секундах, необходимое для получения N копий.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4 1 1</td><td valign=top>3</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>5 1 2</td><td valign=top>4</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=279" target="_blank">Задача №279</a><br>Разбор строк<br>Скобочки - 2</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 57%)</i></center>
<p class=text>
Напомним, что называется правильной скобочной последовательностью:
</p>
<ul>
<li>пустая строка является правильной скобочной последовательностью;</li>
<li>если строка а — правильная скобочная последовательность, то строки (а), [а] — тоже правильные скобочные последовательности;</li>
<li>если строки а и b — правильные скобочные последовательности, то строка ab — тоже правильная скобочная последовательность.</li>
</ul>
<p class=text>
Задана строка S, состоящая из квадратных и круглых скобок. Разрешается заменять квадратную открывающую скобку ([) на круглую открывающую (() и наоборот, а также квадратную закрывающую скобку (]) на круглую закрывающую ()) и наоборот.
</p>
<p class=text>
За одно действие разрешается изменить ровно один символ строки. Необходимо за минимальное число действий преобразовать S в правильную скобочную последовательность.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит строку S. Ее длина не превосходит 100 000 символов.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите искомое минимальное число действий или -1, если преобразовать S в правильную скобочную последовательность невозможно.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>(())[]</td><td valign=top>0</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>[(])</td><td valign=top>2</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>((]]]</td><td valign=top>-1</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=305" target="_blank">Задача №305</a><br>Динамическое программирование<br>Морской бой</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 60%)</i></center>
<p class=text>
Участник игры в морской бой размещает на игровом поле свои корабли. По правилам этой разновидности игры корабли могут быть только прямоугольниками любых размеров, не могут пересекаться и иметь общих граничных точек. Количество уже размещённых кораблей  равно K. Последний корабль он хочет сделать максимально большим.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT записаны три числа N, M и K – количество клеток по вертикали, количество клеток по горизонтали и число уже выстроенных кораблей соответственно (1&#8804;N,M&#8804;100, 1<=K<=10). Следующие K строк содержат координаты K размещённых кораблей – 4 числа в каждой строке. 1-е и 2-е число – вертикальная и горизонтальная  координаты левой верхней угловой клетки корабля, 3-е и 4-е число – вертикальная и  горизонтальная координаты правой нижней угловой клетки корабля.  Клетки поля нумеруются  сверху вниз (от 1 до N) и слева направо (от 1 до M).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно число – количество клеток в последнем корабле.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>8 7 3<br>
1 1 2 2<br>
3 5 3 7<br> 
4 2 4 3
</td><td valign=top>21</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=337" target="_blank">Задача №337</a><br>Целочисленная арифметика<br>Лампочки</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 94%)</i></center>
<p class=text>
Имеется ряд из N лампочек, которые пронумерованы от 1 до N. Изначально ни одна из лампочек не горит. Далее происходит K последовательных линейных инверсий этого ряда ламп. Под линейной инверсией понимается инверсия каждой P-й лампочки в ряде. Например, если P=3, то произойдет инверсия 3й, 6й, 9й и т.д. лампочек.
</p>
<p class=text>
Требуется определить: сколько горящих лампочек останется после реализации всех заданных линейных инверсий?
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT заданны числа N и K – число лампочек и число линейных инверсий. Вторая строка состоит из K целых чисел Pi, задающих период данных инверсий. (1 <= N <= 10<sup>9</sup>, 1<=K<=100, 1 <= P<sub>i</sub> <= 50)
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT следует вывести ответ на задачу.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>20 3<br>2 3 8</td><td valign=top>8</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>172 10<br>19 2 7 13 40 23 16 1 45 9</td><td valign=top>99</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=351" target="_blank">Задача №351</a><br>Динамическое программирование<br>Прыжки по буквам</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 56%)</i></center>
<p class=text>
Дана цепочка из N символов, состоящая из прописных латинских букв. Необходимо пройти с первого символа цепочки до последнего символа, прыгая не более чем на K символов. Стоимость прыжка, при котором символ не меняется, равна 0, а стоимость прыжка на другой символ равна 1.
</p>
<p class=text>
Требуется написать программу, которая вычислит наименьшую стоимость перехода с первого на последний символ.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит в первой строке два целых числа: длина цепочки N (2 &#8804; N &#8804; 10<sup>5</sup>) и максимальная длина прыжка K (1 &#8804; K < N). Во второй строке содержится цепочка из N  латинских букв.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать одно число – минимальную стоимость перехода.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>10 2<br>ABABBCACBC</td><td valign=top>2</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=371" target="_blank">Задача №371</a><br>Целочисленная арифметика<br>Дружественные числа</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 58%)</i></center>
<p class=text>
Два различных натуральных числа называются дружественными, если первое из них равно сумме делителей второго числа, за исключением самого второго числа, а второе равно сумме делителей первого числа, за исключением самого первого числа. Требуется найти все пары дружественных чисел, оба из которых принадлежат промежутку от M до N.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT в первой строке содержит натуральные числа M и N, разделенные пробелом, не превышающие 10<sup>6</sup>.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите в каждой строке по паре чисел через пробел. Первое число пары должно быть меньше второго. Строки должны быть отсортированы в порядке возрастания первого числа пары. Если пар дружественных чисел в промежутке нет, то следует вывести "Absent".
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>200 300</td><td valign=top>220 284</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>200 250</td><td valign=top>Absent</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>185000 205000</td><td valign=top>185368 203432<br>196724 202444</td></tr>
</table>

<h2>Комментарий к примеру №1</h2>

220=1+2+4+71+142 (все делители числа 284)<br>
284=1+2+4+5+10+11+20+22+44+55+110 (все делители числа 220)

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=378" target="_blank">Задача №378</a><br>Динамическое программирование<br>Суммы</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 62%)</i></center>
<p class=text>
Дано N целых чисел A<sub>1</sub>, A<sub>2</sub>, ..., A<sub>N</sub>. Требуется найти количество различных значений сумм вида k<sub>1</sub>A<sub>1</sub> + k<sub>2</sub>A<sub>2</sub> + ... + k<sub>N</sub>A<sub>N</sub>.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT в первой строке содержит число N, во второй - A<sub>1</sub>, A<sub>2</sub>, ..., A<sub>N</sub> через пробел. Ограничения: все числа целые, 1 <= N <= 500, 0 <= A<sub>i</sub> <=100, 0 <= k<sub>i</sub> <= 1.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите количество различных значений сумм.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3<br>1 1 2</td><td valign=top>5</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>3<br>1 3 2</td><td valign=top>7</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>5<br>49 100 98 49 0</td><td valign=top>10</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=384" target="_blank">Задача №384</a><br>Целочисленная арифметика<br>Числа Фибоначчи - 3</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 52%)</i></center>
<p class=text>
Последовательностью Фибоначчи называется последовательность чисел F<sub>0</sub> = 0, F<sub>1</sub> = 1, … , F<sub>k</sub> = F<sub>k-1</sub> + F<sub>k-2</sub> (k > 1).
</p>
<p class=text>
Требуется найти наибольший общий делитель двух чисел Фибоначчи.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записаны два целых числа i и j (1 &#8804; i, j &#8804; 10<sup>6</sup>).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите остаток от деления НОД чисел F<sub>i</sub> и F<sub>j</sub> на 10<sup>9</sup>.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5 10</td><td valign=top>5</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>2 4</td><td valign=top>1</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=423" target="_blank">Задача №423</a><br>Динамическое программирование<br>Сообщение</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 46%)</i></center>
<p class=text>
В сообщении, состоящем из заглавных русских букв и пробелов, каждую букву заменили её порядковым номером в русском алфавите (А - 1, Б - 2, ..., Я - 33), а пробел - нулем. 
</p>
<p class=text>
Требуется по заданной последовательности цифр найти количество исходных сообщений, из которых она могла получиться.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит последовательность цифр, состоящую не более чем из 100 цифр.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите ответ на задачу.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1025</td><td valign=top>4</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>21705</td><td valign=top>3</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>33222</td><td valign=top>8</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=429" target="_blank">Задача №429</a><br>Теория графов<br>Дерево игры</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 56%)</i></center>
<img src="acmp_files/image01B.gif" alt="Дерево игры" align=right>
<p class=text>
Игра для двух игроков определяется её деревом. Соперники делают ходы по очереди. Первый игрок начинает игру. Игра кончается или вничью, или победой одного из игроков. Листья дерева этой игры могут иметь значения, равные одному из трёх чисел: +1 - победа первого игрока, -1 - победа второго игрока, 0 - ничья. Ваша задача - определить, кто выиграет, если оба противника следуют правильной стратегии.
</p>

<h2>Входные данные</h2>

<p class=text>
Узлы дерева пронумерованы последовательными целыми числами. Корень дерева всегда имеет номер 1. Первая строка входного файла INPUT.TXT содержит натуральное N - число узлов в дереве игры (N <= 1000). Следующая N - 1 строка описывает узлы - одна строка для каждого узла (за исключением первого). Вторая строка содержит описание второго узла дерева, третья - третьего узла и т.д. Если узел является листом, первый символ строки - L, затем идёт пробел, затем номер родительского узла, ещё пробел и результат игры (+1 - победа первого игрока, -1 - победа второго, 0 - ничья). Если узел внутренний, то строка содержит N - первый символ, затем пробел и номер родительского узла. 
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите +1, если выигрывает первый игрок, -1, если второй, и 0 - в случае ничейного исхода.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>7<br>
N 1<br>
N 1<br>
L 2 -1<br>
L 2 +1<br>
L 3 +1<br>
L 3 +1
</td><td valign=top>+1</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>7<br>
N 1<br>
N 1<br>
L 2 -1<br>
L 2 +1<br>
L 3 +1<br>
L 3 0
</td><td valign=top>0</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>18<br>
N 1<br>
N 1<br>
N 2<br>
L 2 +1<br>
N 3<br>
L 3 +1<br>
L 3 +1<br>
L 4 -1<br>
L 4 +1<br>
N 4<br>
N 6<br>
L 6 -1<br>
L 6 -1<br>
L 11 -1<br>
L 11 +1<br>
L 12 +1<br>
L 12 -1
</td><td valign=top>+1</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=460" target="_blank">Задача №460</a><br>Целочисленная арифметика<br>Пятерки</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 57%)</i></center>
<p class=text>
Задано натуральное N. Требуется написать программу, которая определит количество цифр 5 в записи всех натуральных чисел от 1 до N включительно.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT в единственной строке задается число N <= 10<sup>18</sup>.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT записывается найденное число – количество пятерок.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>27</td><td valign=top>3</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>120</td><td valign=top>22</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=470" target="_blank">Задача №470</a><br>Динамическое программирование<br>Земельный комитет</h1><center><i>(Время: 2 сек. Память: 16 Мб Сложность: 41%)</i></center>
<p class=text>
Земельный комитет города принял решение о сдаче в аренду части муниципальной территории, имеющей форму прямоугольника размером H на W километров. Стоимость аренды каждого квадратного участка 1 x 1 км была определена с учётом локальных условий, и занесена в таблицу.
</p>
<p class=text>
С целью организации открытого тендера на аренду, земельный комитет решил выставить на своём веб-сайте карту территории, и предоставить посетителям возможность узнавать суммарную стоимость аренды для произвольной прямоугольной группы соседних участков.
</p>
<p class=text>
Данное предложение вызвало большой интерес у населения и предпринимателей, и нагрузка на сервер очень высока.
</p>
<p class=text>
Требуется написать программу, позволяющую как можно более эффективно рассчитывать стоимость аренды для N запросов. В каждом запросе требуется определить общую стоимость участков внутри прямоугольной группы с противоположными углами, расположенными в элементах таблицы (ai, bi) и (ci, di).
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT находятся числа H, W, N (1 <= H, W <= 100, 1 <= N <= 1000000). В следующих H строках содержится по W чисел (стоимости участков находятся в диапазоне от 0 до 10000). Далее идут N строк с числами ai bi ci di (1 <= ai <= ci <= H, 1 <= bi <= di <= W).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT должен содержать N чисел, по одному числу в строке.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>2 3 1<br>
5 1 2<br>
6 7 3<br>
2 1 2 3
</td><td valign=top>16</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=476" target="_blank">Задача №476</a><br>Динамическое программирование<br>Ферзя в угол!</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 43%)</i></center>
<img src="acmp_files/image01D.gif" align=right alt="Ферзя в угол!">
<p class=text>
Рассмотрим бесконечную вправо и вверх шахматную доску, на которой стоит ферзь. Двое по очереди двигают этого ферзя. Разрешается двигать ферзя только вниз, влево или по диагонали вниз влево. Цель игры – задвинуть ферзя в угол, то есть клетку с координатами (1, 1). На рисунке показаны разрешенные движения ферзя.
</p>
<p class=text>
Требуется написать программу, которая найдет номер игрока, который выиграет при правильной игре.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит координаты ферзя перед первым ходом - два числа M и N, записанные через пробел (1 <= M, N <= 250).
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать найденный номер победителя.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3 2</td><td valign=top>2</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>6 7</td><td valign=top>1</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=481" target="_blank">Задача №481</a><br>Динамическое программирование<br>Количество палиндромов</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 51%)</i></center>
<p class=text>
Непустая строка, содержащая некоторое слово, называется палиндромом, если это слово одинаково читается как слева направо, так и справа налево. Пусть задана строка, в которой записано слово S, состоящее из N прописных букв латинского алфавита. Путем вычеркивания из этого слова некоторого набора символов, можно получить строку, которая будет палиндромом.
</p>
<p class=text>
Требуется написать программу, с помощью которой можно определить, сколько существует способов вычеркивания из заданного слова некоторого (возможно пустого) набора символов, чтобы образованная таким образом строка была палиндромом. Способы, отличающиеся порядком вычеркивания символов, считаются одинаковыми.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой и  единственной строке входного файла INPUT.TXT записано слово S, состоящее из N символов (1 <= N <= 30).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите найденное число способов.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>AAA</td><td valign=top>7</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>BAOBAB</td><td valign=top>22</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=509" target="_blank">Задача №509</a><br>Теория графов<br>Игра Jammed</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 48%)</i></center>
<p class=text>
Всем известна игра «Пятнашки», где надо выстроить изначально неупорядоченную последовательность чисел, перемещая фишки с нанесёнными числами от 1 до 15 в квадрате 4&#215;4. На основе данной игры была разработана другая – поле в ней лишь 4&#215;2 клетки, на поле 7 фишек, но на фишках изображены буквы латинского алфавита и арабские цифры (на каждой фишке – один символ, но на разных фишках могут быть одинаковые символы). Цель игры прежняя – упорядочить в соответствии с образцом стартовую расстановку фишек за минимальное количество ходов.
</p>
<p class=text>
Свободная клетка обозначается специальным символом «#» и используется для перемещения фишек по полю. Перемещать фишки на свободную клетку разрешается из соседних клеток, имеющих общую грань со свободной. Например, на рисунке более правый символ «0» можно переместить вниз на свободную клетку, тогда «0» будет в нижней клетке, а пустой станет верхняя клетка, либо в свободную клетку переместить букву «C» или цифру «2».
</p>
<center><img src="acmp_files/image01I.gif" alt='Игра "Jammed"'></center>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит четыре строки: две первые строки содержат стартовую комбинацию символов, следующие две - образец. Каждая строка содержит 4 символа (латинский алфавит и арабские цифры), пустая клетка обозначается символом «#» (решетка).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите минимальное количество перемещений, необходимых для получения искомой комбинации. Если нужную комбинацию получить нельзя, выведите число -1.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>ACM8<br>
002#<br>
ACM#<br>
2008
</td><td valign=top>17</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>rogp<br>
mar#<br>
prog<br>
ram#
</td><td valign=top>26</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=512" target="_blank">Задача №512</a><br>Динамическое программирование<br>Выпускной</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 75%)</i></center>
<p class=text>
Вот и еще один учебный год подошел к концу, и старшеклассники спешно начали готовиться к экзаменам. Как всегда после всех экзаменов должен был состояться выпускной бал, и в школе уже всем ходом шла подготовка к нему. Одной, но очень обязательной частью этого мероприятия должен был стать вальс, кружиться в котором должно по задумке ровно K пар. Ответственным за танец был назначен школьный учитель трудов Александр Степанович. По его первому указанию по всей школе были развешаны объявления о наборе мальчиков и девочек, которые хотят принять участие в танце. По окончанию набора всех желающих, в списке у «Степаныча» было записано N мальчиков и M девочек. Теперь нужно было сформировать из всего этого ровно K пар, но оказалось, что сделать это не так, то просто. Оказывается, что не каждый мальчик захочет танцевать с любой девочкой и не каждая девочка согласиться вальсировать с любым мальчиком. Перед нашим героем встала нелегкая задача и, немного поразмыслив, он решил думать масштабно – а конкретно, сколько же всего существует вариантов сформировать из N мальчиков и M девочек ровно K пар с учетом их предпочтений? Так как в рубанках и молотках «Степаныч» понимает больше чем в математике, с просьбой помочь ему он обратился к вам.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT содержится 3 целых числа: N – количество мальчиков, M – количество девочек и K – количество пар (1<= N, M, K <= 10). Далее идет описание пожеланий мальчиков и девочек – N строк длины M. Если символ, стоящий в i-ой строке на j-ом месте равен «Y» – это значит что i-й мальчик и j-я девочка могут стоять в паре и «N» если не могут.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите целое число - количество различных способов формирования из N мальчиков и M девочек ровно K пар с учетом их пожеланий.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3 4 3<br>
YYYY<br>
YYYY<br>
YYYY
</td><td valign=top>24</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>1 5 1<br>
YYNNY
</td><td valign=top>3</td></tr>
</table>
<br>

</body></html>