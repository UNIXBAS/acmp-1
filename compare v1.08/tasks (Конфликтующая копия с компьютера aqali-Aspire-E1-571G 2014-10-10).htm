
<html>
<!-- Design & Programming by Sergey Belyaev, @2006-2011 E-mail: bsn@mail.ru -->
<head>
  <title>acmp.ru - compare</title>
  <meta http-equiv="Content-Type" content="text/html; charset=windows-1251;charset=windows-1251">
  <meta name="description" content="">
  <meta name="keywords" content="">
  <link rel="stylesheet" type="text/css" href="acmp_files/acmp_sty.css">
</head>
<body>


<h5>
<a href="http://acmp.ru/index.asp?main=user&id=93028" target="_blank">Aisultan Kali</a>
<br>[TO]<br>
<a href="http://acmp.ru/index.asp?main=user&id=80737" target="_blank">Nazarbek Altibay</a>
<br></h5>
<h1><a href="http://acmp.ru/index.asp?main=task&id_task=12" target="_blank">Задача №12</a><br>Геометрия<br>Дачники</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 45%)</i></center>
<p class=text>
<img src="acmp_files/image003.gif" align=right>Всем известно, что дачники – народ странный, почти такой же, как и программисты. Строят они свои дачи непонятно где, да и выращивают там непонятно что и непонятно зачем. А уж как они туда добираются, это другая история: кто на автобусе, кто на электричке, кто на автомобиле, ну а кто-то вовсе пешком ходит от дома и до самого участка. Так что не стоит удивляться, если вдруг Вы узнаете, что некое садоводческое товарищество располагается на острове, а дачники добираются до него самолетом. Да еще и на этом острове может не быть посадочной полосы, так что высадиться на остров можно, только прыгая с парашютом (мы уж не рассматриваем то, как они возвращаются с дач домой). Рассмотрим этот уникальный случай. Пилот всегда старается осуществить высадку парашютистов таким образом, чтобы дачники приземлялись как можно ближе к своим прямоугольным участкам. Пилоту интересно знать: сколько дачников приземлится на свои участки? 
Помогите ему решить эту задачу!
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT записано натуральное число N (1 &#8804; N &#8804; 1000) – количество дачников, далее идут N строк, в каждой из которых описаны координаты каждого дачника и его участка:<br>
X Y X1 Y1 X2 Y2 X3 Y3 X4 Y4<br>
где<br>
(X,Y) – координаты приземления парашютиста<br>
(X1, Y1, X2, Y2, X3, Y3, X4,Y4) – координаты прямоугольного участка на плоскости, указанные последовательно.<br>
Все координаты – целые числа, не превышающие 50000 по абсолютной величине
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT нужно вывести количество дачников, приземлившихся на свой участок.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td>3<br>
6 6 3 6 6 9 8 7 5 4<br>
13 5 9 2 9 8 12 8 12 2<br>
3 2 2 1 2 3 6 3 6 1
</td><td valign=top>2</td></tr>
</table>


<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=19" target="_blank">Задача №19</a><br>Простая математика<br>Ферзь, ладья и конь</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 34%)</i></center>
<p class=text>
<img src="acmp_files/image005.gif" align=right>
На шахматной доске 8х8 расположены три фигуры: ферзь, ладья и конь. Требуется определить количество пустых полей доски, которые находятся под боем. Для простоты будем полагать, что фигуры могут «бить» через другие фигуры. Например, в рассмотренной справа ситуации будем считать, что ферзь бьет D5 через ладью.
</p>

<h2>Входные данные</h2>

<p class=text>
В единственной строке входного файла INPUT.TXT записаны через пробел координаты расположения трех фигур: ферзя, ладьи и коня соответственно. Каждая координата состоит из одного латинского символа (от A до H) и одной цифры (от 1 до 8).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT нужно вывести количество пустых полей, которые бьют указанные во входных данных фигуры.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td>D1 D3 E5</td><td>29</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=20" target="_blank">Задача №20</a><br>Сортировка и последовательности<br>Пилообразная последовательность</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 38%)</i></center>
<p class=text>
Последовательность a<sub>1</sub>, a<sub>2</sub>, a<sub>3</sub>, … , a<sub>n-1</sub>, a<sub>n</sub> называется пилообразной, если она удовлетворяет одному из следующих условий:<br>
</p>
1)	a<sub>1</sub> < a<sub>2</sub> > a<sub>3</sub> < … > a<sub>n-1</sub> < a<sub>n</sub><br>
2)	a<sub>1</sub> > a<sub>2</sub> < a<sub>3</sub> > … < a<sub>n-1</sub> > a<sub>n</sub><br><br>
<p class=text>
Дана числовая последовательность. Требуется определить длину самой длинной ее пилообразной непрерывной подпоследовательности.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT записано натуральное число N – количество элементов последовательности. Во второй строке файла через пробел записаны N элементов целочисленной последовательности {a<sub>i</sub>}. Ограничения: N<10<sup>6</sup>, |a<sub>i</sub>| < 32000. 

</p>

<h2>Выходные данные</h2>

<p class=text>
В единственную строку выходного файла OUTPUT.TXT нужно вывести одно целое число — длину самой длиной непрерывной пилообразной подпоследовательности.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td>3<br>
1 2 3
</td><td valign=top>2</td></tr>
<tr class=white2><td align=center>2</td><td>12<br>
5 7 6 3 4 2 7 1 8 9 4 5
</td><td valign=top>7</td></tr>
<tr class=white2><td align=center>3</td><td>5<br>
1 -2 3 -4 5
</td><td valign=top>5</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=24" target="_blank">Задача №24</a><br>Рекурсия, перебор<br>Вырубка деревьев</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 46%)</i></center>
<p class=text>
Король Флатландии решил вырубить некоторые деревья, растущие перед его дворцом. Деревья перед дворцом короля посажены в ряд, всего там растет n деревьев, расстояния между соседними деревьями одинаковы.<br>
</p>
<p class=text>
После вырубки перед дворцом должно остаться m деревьев, и расстояния между соседними деревьями должны быть одинаковыми. Помогите королю выяснить, сколько существует способов вырубки деревьев.<br>
</p>
<p class=text>
Требуется написать программу, которая по заданным числам n и m определит, сколько существует способов вырубки некоторых из n деревьев так, чтобы после вырубки осталось m деревьев и соседние деревья находились на равном расстоянии друг от друга.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит два целых числа n и m (0 &#8804; m , n &#8804; 1000).
</p>

<h2>Выходные данные</h2>

<p class=text>
В единственную строку выходного файла OUTPUT.TXT нужно вывести одно целое число — искомое число способов.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td>5 3</td><td>4</td></tr>
</table>

<h2>Пояснение к примеру</h2>

<p class=text>
Если обозначить условно исходное расположение деревьев перед дворцом как «TTTTT», то возможные результаты после вырубки следующие:
<br><br>
«TTT..», «.TTT.», «..TTT», «T.T.T».
</p>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=27" target="_blank">Задача №27</a><br>Двумерные массивы<br>Художник</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 31%)</i></center>
<p class=text>
Известный художник решил написать новый шедевр. После многих дней усердной работы он захотел исследовать свое творение. Художник вспомнил, что картина писалась следующим образом: сначала был взят белый холст, имеющий форму прямоугольника шириной w и высотой h. Затем художник нарисовал на этом холсте n прямоугольников со сторонами, параллельными сторонам холста и вершинами, расположенными в целочисленных координатах.
Помогите художнику определить площадь незакрашенной части холста.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит два натуральных числа w и h (1 &#8804; w, h &#8804; 100). Во второй строке записано целое число n (1 &#8804; n &#8804; 5000) – количество прямоугольников. Следующие n строк содержат информацию о всех прямоугольниках. Каждая строка описывает один прямоугольник в виде четырех чисел x1, y1, x2, y2 , где (x1, y1) и (x2, y2) – координаты левого верхнего и правого нижнего угла прямоугольника соответственно.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выведите в выходной файл OUTPUT.TXT одно целое число – площадь незакрашенной части холста.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td>5 5<br>
2<br>
1 1 3 3<br>
2 2 4 4
</td><td valign=top>18</td></tr>
<tr class=white2><td align=center>2</td><td>6 7<br>
3<br>
0 0 5 5<br>
1 1 4 4<br>
2 2 3 3
</td><td valign=top>17</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=37" target="_blank">Задача №37</a><br>Геометрия<br>Сжимающий оператор</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 34%)</i></center>
<p class=text>
Оператором А, действующим из множества Х в множество Y (или просто оператором из X в Y) называется правило, согласно которому каждому элементу x множества X сопоставляется элемент y=Ax из множества Y. Пусть X и Y – множества точек на плоскости. Оператор A из X в Y называется сжимающим с коэффициентом q, где q – вещественное число из полуинтервала [0, 1), если для любого x из X выполнено ||Ax|| &#8804; q*||x|| (здесь ||x|| - норма точки x – расстояние от x до начала координат). Проще говоря, оператор называется сжимающим с коэффициентом q если он сопоставляет каждой точке точку, которая не менее, чем в q раз ближе к началу координат.
</p>
<p class=text>
Для заданного оператора А требуется проверить является ли он сжимающим с коэффициентом q.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит количество точек n (1 &#8804; n &#8804; 100) и число q (0 &#8804; q < 1), заданное не более чем с 3 знаками после десятичной точки. Следующие n строк содержат по 4 целых числа, по модулю не превосходящих 1000, разделенные пробелами – координаты точки множества X и сопоставленной ей точки из множества Y.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно слово: “Yes” если оператор является сжимающим с коэффициентом q и “No” в противном случае.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td>2 0.5<br>
0 10 5 0<br>
10 0 0 1
</td><td valign=top>Yes</td></tr>
<tr class=white2><td align=center>2</td><td>2 0.1<br>
0 10 5 0<br>
10 0 0 1
</td><td valign=top>No</td></tr>
<tr class=white2><td align=center>3</td><td>2 0.9<br>
0 0 0 0<br>
10 0 0 1
</td><td valign=top>Yes</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=38" target="_blank">Задача №38</a><br>Динамическое программирование<br>Игра - 2</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 60%)</i></center>
<p class=text>
Вы любите играть в игры? Конечно, любите! Но про эту игру, возможно, ничего не знаете и не слышали даже. Что ж, расскажем о новой игре. На доске написана последовательность n целых чисел. Играют двое. На очередном ходе игрок выбирает число с правого или с левого края последовательности, затем это число стирается и последовательность становится на одно число меньше, а ход переходит к противнику. Выигрывает тот, кто наберет в сумме больше. Написать программу, определяющую победителя в конкретной игре, при условии, что игроки будут играть оптимально. 
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT записано целое число n (0 < n < 100). Во второй строке через пробел заданы n натуральных чисел, не превосходящих 1000.
</p>

<h2>Выходные данные</h2>

<p class=text>
В единственную строку выходного файла OUTPUT.TXT нужно вывести 1, если победит первый игрок, 2 – если победит второй игрок и 0 – в случае ничьей.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td>4<br>3 2 5 4</td><td valign=top>1</td></tr>
<tr class=white2><td align=center>2</td><td>6<br>5 5 5 5 5 5</td><td valign=top>0</td></tr>
<tr class=white2><td align=center>3</td><td>9<br>2 1 3 2 9 1 2 3 1<br></td><td valign=top>2</td></tr>
<tr class=white2><td align=center>4</td><td>10<br>2 5 3 12 4 6 13 7 1 3</td><td valign=top>1</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=48" target="_blank">Задача №48</a><br>Целочисленная арифметика<br>Наихудший делитель</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 23%)</i></center>
<p class=text>
Будем говорить, что число a лучше числа b, если сумма цифр a больше суммы цифр числа b, а в случае равенства сумм их цифр, если число a меньше числа b. Например, число 124 лучше числа 123, так как у первого из них сумма цифр равна семи, а у второго — шести. Также, число 3 лучше числа 111, так как у них равны суммы цифр, но первое из них меньше.
</p>
<p class=text>
Дано число n. Найдите такой его делитель d (само число n и единица считаются делителями числа n), что любой другой делитель c числа n лучше, чем d.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит целое число n 
(1 &#8804; n &#8804; 10<sup>5000</sup>).

</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите ответ на задачу.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td>10</td><td>10</td></tr>
<tr class=white2><td align=center>2</td><td>239</td><td>1</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=57" target="_blank">Задача №57</a><br>Математическое моделирование<br>Компьютерная сеть</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 33%)</i></center>
<p class=text>
Компания «Маша и медведи» является самым крупным интернет-провайдером во всем  лесу. Именно поэтому, с просьбой подключить их к интернету обратились N поросят. Домики поросят расположены в различных точках (x<sub>i</sub>, y<sub>i</sub>). Ближайшая точка подключения расположена в точке (x<sub>net</sub>, y<sub>net</sub>). 
</p>

Для того чтобы подключиться к сети всем N поросятам необходимо:<br>
1. провести провод от точки подключения до домика одного из поросят;<br>
2. от подключенного поросенка провести провода ко всем остальным.<br>
При этом провода могут при необходимости пересекаться.

<p class=text>
Поросята платят деньги в зависимости от длины провода. Количество денег у них ограничено и составляет p тугриков. Они хотят определить: хватит ли им денег на подключение? Так же известно, что единица длины провода стоит c тугриков. Помогите им сделать необходимые расчеты!
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT находится числа N, с и p – целые числа со следующими ограничениями: 1 &#8804; N &#8804; 10<sup>3</sup>, 0 &#8804; c &#8804; 10<sup>4</sup>, 0 &#8804; p &#8804; 10<sup>15</sup> . В следующих N строках находятся координаты домов поросят (x<sub>i</sub>; y<sub>i</sub>). В последней строке записаны координаты точки соединения (x<sub>net</sub>, y<sub>net</sub>). Все координаты целые и не превосходят 1000 по модулю.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT следует вывести «YES», если у поросят достаточно денег для подключения и «NO» в противном случае.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td>3 2 6<br>
0 0<br>
1 0<br>
0 1<br>
-1 0
</td><td valign=top>YES</td></tr>
<tr class=white2><td align=center>2</td><td>3 1 5<br>
1 1<br>
2 2<br>
3 3<br>
4 4
</td><td valign=top>NO</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=65" target="_blank">Задача №65</a><br>Сортировка и последовательности<br>Расстояние Хэмминга</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 32%)</i></center>
<p class=text>
В связи с особенностями линии связи, используемой для передачи сообщений из пункта A в пункт B, каждый бит принятого сообщения с вероятностью 0.001 содержит ошибку.
</p>
<p class=text>
Из пункта A в пункт B было послано одно из n сообщений m<sub>1</sub>, m<sub>2</sub>, ..., m<sub>n</sub>. В пункте B было принято сообщение s.
</p>
<p class=text>
Ваша задача заключается в определении наиболее вероятного исходного сообщения. Очевидно, что оно будет одним из тех сообщений, расстояние Хэмминга между которым и строкой s минимально.
</p>
<p class=text>
Расстоянием Хэмминга двух строк a и b одинаковой длины называется количество позиций, в которых эти строки различаются (количество элементов в множестве {i | 1 &#8804; i &#8804; |a|, a<sub>i</sub> &#8800; b<sub>i</sub> }).
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит s — принятое сообщение. Вторая строка содержит целое число n — количество сообщений, которые могли быть отправлены. Следующие n строк содержат m<sub>i</sub> — эти сообщения.
Длины всех сообщений равны (|s| = |m<sub>1</sub>| = |m<sub>2</sub>| = ... = |m<sub>n</sub>|). Сообщения состоят только из символов 0 и 1.
Размер входного файла не превосходит 60 Кб.
</p>

<h2>Выходные данные</h2>

<p class=text>
В первую строку выходного файла OUTPUT.TXT выведите k — количество сообщений, на которых достигается минимум расстояния Хэмминга. Во вторую строку выведите в порядке возрастания k чисел — номера этих сообщений.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td>010101<br>
3<br>
110011<br>
011001<br>
000111
</td><td valign=top>2<br>2 3</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=67" target="_blank">Задача №67</a><br>Целочисленная арифметика<br>Маска подсетей</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 33%)</i></center>
<p class=text>
Рассмотрим компьютерную сеть с настроенной TCP/IP маршрутизацией. Будем рассматривать некоторую ее модификацию. А именно в этой сети находить N подсетей. Каждая подсеть характеризуется своей маской. Маска подсети представляет собой 4 однобайтных числа, разделенных точкой. Причем для масок выполнено следующее свойство: если представить маску в двоичном виде, то сначала она будет содержать k единиц, а потом q нулей, причем k + q = 32. Например, 255.255.255.0 — маска подсети, а 192.168.0.1 — нет.
</p>
<p class=text>
Поясним, как получается двоичное представление IP-адреса. Для этого числа, составляющие IP-адрес, представляются в двоичной системе счисления (при этом каждое из них дополняется ведущими нулями до длины в 8 цифр), после чего удаляются точки. Получившееся 32-битное число и есть двоичное представление IP-адреса. Например, для адреса 192.168.0.1 этот процесс выглядит так: 192.168.0.1 &#8594; 11000000.10101000.00000000.00000001 &#8594; 11000000101010000000000000000001. Таким образом, двоичным представлением IP-адреса 192.168.0.1 является 11000000101010000000000000000001.
</p>
<p class=text>
Будем говорить, что два компьютера с IP<sub>1</sub> и IP<sub>2</sub> лежат в подсети, если IP<sub>1</sub> /\ Mask = 
IP<sub>2</sub> /\ Mask, где Mask — маска этой подсети, а /\ — операция побитового логического «и». IP компьютера представляет собой так же 4 однобайтных числа, разделенных точкой.
</p>
<p class=text>
Вам даны M пар IP адресов компьютеров. Для каждой из них Вам надо определить, в скольких подсетях из заданных они лежат.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT записано число N — количество подсетей. В следующих N строках перечислены маски этих подсетей. В N + 2 строке находится число M (0 &#8804; M &#8804; 10000). В следующих M строках записаны пары IP адресов, разделенных пробелом.
</p>

<h2>Выходные данные</h2>

<p class=text>
Для каждой пары IP адресов в отдельной строке выходного файла OUTPUT.TXT выведите количество подсетей, в которых лежат оба компьютера.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>2<br>
255.255.255.255<br>
255.255.255.0<br>
3<br>
192.168.31.1 192.168.31.2<br>
192.168.31.3 192.168.31.4<br>
192.168.31.1 192.167.31.2
</td><td valign=top>1<br>
1<br>
0
</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=69" target="_blank">Задача №69</a><br>Геометрия<br>N-угольное колесо</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 28%)</i></center>
<p class=text>
На одном известном автозаводе страны N-мерики главный инженер-рационализатор внес предложение вместо круглых колес использовать колеса в форме правильных N-угольников. "При этом", — сказал он, "важным показателем качества такого колеса будет разность между радиусом описанной окружности и радиусом вписанной окружности."  Причем колесо считается качественным, если его показатель качества меньше единицы.
</p>
<p class=text>
Задано число N и длина A стороны N-угольного колеса. Необходимо определить: является ли такое колесо качественным.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит два натуральных числа: N и A (3 &#8804; N &#8804; 1000, 1 &#8804; A &#8804; 1000).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите «YES», если это качественное колесо и «NO» в противном случае.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3 1</td><td valign=top>YES</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>239 566</td><td valign=top>NO</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=74" target="_blank">Задача №74</a><br>Математическое моделирование<br>Прыжки с шестом</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 38%)</i></center>
<p class=text>
В соревнованиях по прыжкам с шестом было замечено одно интересное явление: на очередном этапе соревнований успешные и неуспешные попытки прыжков чередовались: успешный, неуспешный, успешный, неуспешный и т.д. (первый был успешным). Спортсменам разрешалась только одна попытка. Тот, кто преодолевал планку, переходил в следующий тур (этап), а тот, кто делал неудачную попытку – выбывал из соревнований. Таким образом, первым выбывал всегда спортсмен с номером 2, а последним – победитель с номером 1.
</p>
<p class=text>
Требуется написать программу, которая по количеству участников и номеру спортсмена вычислит, каким по счету данный спортсмен выбыл из соревнований.
</p>

<h2>Входные данные</h2>

<p class=text>
В единственной строке входного файла INPUT.TXT содержатся два натуральных числа: общее число спортсменов N и порядковый номер спортсмена в стартовом списке M. Числа разделены пробелом (1 &#8804; M,N &#8804; 10<sup>9</sup>).
</p>

<h2>Выходные данные</h2>

<p class=text>
В единственную строку выходного файла OUTPUT.TXT нужно вывести каким по счету спортсмен M выбыл из соревнований. Если это победитель состязания, то выводится число N.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4 2</td><td valign=top>1</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>4 1</td><td valign=top>4</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>9 5</td><td valign=top>7</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=76" target="_blank">Задача №76</a><br>Сортировка и последовательности<br>Музей</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 50%)</i></center>
<p class=text>
В музее регистрируется в течение суток время прихода и ухода каждого посетителя. Таким образом, за день получены N пар значений, где первое значение в паре показывает время прихода посетителя и второе значение - время его ухода. Требуется найти максимальное число посетителей, которые находились в музее одновременно.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT записано натуральное число N (N < 10<sup>5</sup>) – количество зафиксированных посетителей в музее в течении суток. Далее, идут N строк с информацией о времени визитов посетителей: в каждой  строке располагается отрезок времени посещения в формате «ЧЧ:ММ ЧЧ:ММ»
(00:00 &#8804; ЧЧ:ММ  &#8804;  23:59).
</p>

<h2>Выходные данные</h2>

<p class=text>
В единственную строку выходного файла OUTPUT.TXT нужно вывести одно целое число — максимальное количество посетителей, одновременно находящихся в музее.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>6<br>
09:00 10:07<br>
10:20 11:35<br>
12:00 17:00<br>
11:00 11:30<br>
11:20 12:30<br>
11:30 18:15
</td><td valign=top>4</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=78" target="_blank">Задача №78</a><br>Математическое моделирование<br>Бутылки</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 48%)</i></center>
<p class=text>
Группа программистов собралась в понедельник и на все свои деньги купила «Sprite» в бутылках емкостью по 0.25 л., не забыв взять сдачу.
</p>
<p class=text>
Во вторник они сдали пустую посуду, добавили оставшуюся сдачу и вновь купили столько таких же бутылок «Sprite», сколько могли.
</p>
<p class=text>
Так они действовали до пятницы. В пятницу, сдав посуду и добавив сдачу с четверга, они смогли купить только одну бутылку напитка. При этом денег у них уже не осталось.
</p>
<p class=text>
Требуется написать программу, определяющую минимальную сумму, которой располагали программисты в понедельник.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT состоит из единственной строки, содержащей два целых числа F (стоимость одной бутылки «Sprite») и P (стоимость одной пустой бутылки из под «Sprite»), разделенных пробелом. 
</p>
<p class=text>
Ограничения: 1 &#8804; P < F &#8804; 10<sup>9</sup>, начальная сумма не превосходит 2*10<sup>9</sup>.
</p>

<h2>Выходные данные</h2>

<p class=text>
В единственную строку выходного файла OUTPUT.TXT нужно вывести одно целое число – минимальную сумму, которой располагали программисты в понедельник.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>7 3</td><td valign=top>83</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=80" target="_blank">Задача №80</a><br>Разбор строк<br>Тождество</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 26%)</i></center>
<p class=text>
Вам необходимо проверить домашнюю работу Васи Пупкина, в которой он написал равенство. Например, запись вида «2+3=5» является правильной, а «23*7=421» неверная, но корректная. Корректной записью выражения будем называть последовательность: число, операция («+», «-», «*», «/»), число, знак равенства, число. Т.е. если в записи не хватает цифр или же встречается неизвестный символ. Например, записи «2*=3», «173» и «2+2=a» некорректны.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT состоит из единственной строки, содержащей запись арифметического выражения. Все числа в записи целые и не превышают по абсолютной величине 30000. Длина арифметического выражения не превышает 100 символов.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT нужно вывести «YES», если указанная запись правильна (т.е. равенство представляет собой тождество), «NO» - если корректная, но неверная и «ERROR», если в записи присутствуют ошибки.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>2+3=5</td><td valign=top>YES</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>3*7=20</td><td valign=top>NO</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>two plus three is five</td><td valign=top>ERROR</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=82" target="_blank">Задача №82</a><br>Сортировка и последовательности<br>Пересечение множеств</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 34%)</i></center>
<p class=text>
Даны два неупорядоченных набора целых чисел (может быть, с повторениями). Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT записано через пробел два целых числа N и М (1 &#8804; N, М &#8804; 10<sup>6</sup>) — количество элементов первого и второго наборов, соответственно. В следующих строках записано сначала N чисел первого набора, а затем M чисел второго набора. Числа разделены пробелами или символами конца строки. Каждое из этих чисел попадает в промежуток от 0 до 10<sup>5</sup>.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT нужно записать в возрастающем порядке без повторений все числа, которые входят как в первый, так и во второй набор. Числа разделять одним пробелом. Если таких чисел нет, то выходной файл должен оставаться пустым.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>11 6<br>
2 4 6 8 10 12 10 8 6 4 2<br>
3 6 9 12 15 18
</td><td valign=top>6 12</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=83" target="_blank">Задача №83</a><br>Динамическое программирование<br>Симпатичные узоры</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 66%)</i></center>
<p class=text>
Компания BrokenTiles планирует заняться выкладыванием во дворах у состоятельных клиентов узор из черных и белых плиток, каждая из которых имеет размер 1x1 метр. Известно, что дворы всех состоятельных людей имеют наиболее модную на сегодня  форму прямоугольника MxN метров. 
</p>
<p class=text>
Однако при составлении финансового плана у директора этой организации появилось целых две серьезных проблемы: во первых, каждый новый клиент очевидно захочет, чтобы узор, выложенный у него во дворе, отличался от узоров всех остальных клиентов этой фирмы, а во вторых, этот узор должен быть симпатичным. Как показало исследование, узор является симпатичным, если в нем нигде не встречается квадрата 2x2 метра, полностью покрытого плитками одного цвета. На рисунке 1 показаны примеры различных симпатичных узоров, а на рисунке 2 – несимпатичных. 
</p>
<center><img src="acmp_files/image008.gif"></center>
<p class=text>
Для составления финансового плана директору необходимо узнать, сколько клиентов он сможет обслужить, прежде чем симпатичные узоры данного размера закончатся. Помогите ему!
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT находятся два положительных целых числа, разделенные пробелом – M и N (1 &#8804; M&#8729;N &#8804; 30).
</p>

<h2>Выходные данные</h2>

<p class=text>
Выведите в выходной файл OUTPUT.TXT единственное число – количество различных симпатичных узоров, которые можно выложить во дворе размера MxN. Узоры, получающиеся друг из друга сдвигом, поворотом или отражением считаются различными.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>2 2</td><td valign=top>14</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>3 3</td><td valign=top>322</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=84" target="_blank">Задача №84</a><br>Двумерные массивы<br>Выпуклая оболочка</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 27%)</i></center>
<p class=text>
Рассмотрим бесконечный лист клетчатой бумаги. Закрасим некоторое множество клеток в черный цвет. Теперь мы хотим закрасить минимальное количество клеток, так, чтобы множество черных клеток стало выпуклым.
</p>
<p class=text>
Напомним, что геометрическая фигура &#934; называется выпуклой, если для любых точек A из &#934; и В из &#934; с вещественными координатами отрезок [AB] принадлежит &#934;.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT содержатся два числа N и M 
(1 &#8804; N, M &#8804; 100) — размеры куска бумаги, куда попали все черные клетки. В каждой из следующих N строк содержится М символов «*» или «.». Символ «*» обозначает черную клетку, а «.» белую.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите выпуклое множество, содержащее минимальное количество дополнительно покрашенных черных клеток, в ровно N строках по M символов «*» или «.» в каждой.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>2 4<br>
..*.<br>
.**.
</td><td valign=top>.**.<br>
.**.
</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>4 3<br>
.*.<br>
.*.<br>
.*.<br>
.*.
</td><td valign=top>.*.<br>
.*.<br>
.*.<br>
.*.
</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=87" target="_blank">Задача №87</a><br>Сортировка и последовательности<br>Строки - 2</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 32%)</i></center>
<p class=text>
Задан набор строк S = {s<sub>1</sub>, s<sub>2</sub>, s<sub>3</sub>, ... , s<sub>n</sub>}. Необходимо найти количество строк s<sub>i</sub> из S, представимых в виде конкатенации двух строк s<sub>j</sub> и s<sub>k</sub> из S (s<sub>i</sub> = s<sub>j</sub>s<sub>k</sub>, j и k при этом могут совпадать).
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит набор строк S – по одному элементу на строке. i-ая строка входного файла содержит s<sub>i</sub>. Последняя строка входного файла содержит строку ENDOFINPUT. Она обозначает конец входных данных и не входит в S.
</p>
<p class=text>
Все s<sub>i</sub> состоят только из маленьких букв латинского алфавита и имеют длину не более 100 символов. Во входном файле не более 239 строк.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите ответ без ведущих нулей.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>aa<br>
aaaa<br>
ab<br>
abaa<br>
ENDOFINPUT
</td><td valign=top>2</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>abc<br>
bcd<br>
def<br>
ENDOFINPUT
</td><td valign=top>0</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=89" target="_blank">Задача №89</a><br>Сортировка и последовательности<br>Быстрый поезд</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 25%)</i></center>
<p class=text>
Между двумя крупнейшими городами нашей страны Санкт-Петербургом и Москвой ежедневно совершают рейсы n поездов. Для каждого поезда известно его время отправления из Санкт-Петербурга и время прибытия в Москву.
</p>
<p class=text>
Найдите самый быстрый поезд и его скорость в предположении, что длина железной дороги между Санкт-Петербургом и Москвой равна 650 км.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит целое число n (1 &#8804; n &#8804; 100). Каждая из последующих n строк описывает ровно один поезд.
</p>
<p class=text>
Описание поезда состоит из его названия, времени отправления и времени прибытия. Название поезда – строка длиной не более 50 символов, заключенная в кавычки. Она может содержать буквы латинского алфавита, пробелы, цифры, символы тире («–») и подчеркивания («_»). Время отправления и прибытия заданы в формате ЧЧ:ММ. Строчные и заглавные буквы в названиях поездов различаются.
</p>
<p class=text>
Время в пути для каждого из поездов составляет хотя бы одну минуту и не превышает 24 часов.
</p>
<p class=text>
Гарантируется, что самый быстрый поезд определяется единственным образом.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите название самого быстрого поезда и его скорость. Скорость выводите в километрах в час и округляйте до целых. Следуйте формату вывода, приведенному в примерах.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3<br>
"ER-200" 06:43 10:40<br>
"Red Arrow" 23:55 07:55<br>
"Express" 23:59 08:00
</td><td valign=top>The fastest train is "ER-200".<br>
It's speed is 165 km/h, approximately.
</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>3<br>
"Train1" 00:00 00:00<br>
"Train2" 00:00 00:01<br>
"Train3" 00:01 00:01
</td><td valign=top>The fastest train is "Train2".<br>
It's speed is 39000 km/h, approximately.
</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>2<br>
"Slow Train 1" 10:00 09:59<br>
"Slow Train 2" 10:00 10:00
</td><td valign=top>The fastest train is "Slow Train 1".<br>
It's speed is 27 km/h, approximately.
</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=90" target="_blank">Задача №90</a><br>Геометрия<br>Треугольные страны</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 37%)</i></center>
<p class=text>
Эта история происходила на одной плоской планете. С незапамятных времен на ней существовал город N, находящийся в точке x<sub>n</sub>,y<sub>n</sub>. Кроме этого, в разное время на этой же планете существовали страны, каждая из которых имела форму треугольника.
</p>
<p class=text>
Теперь перед историками встала серьезная задача — по имеющимся у них данным о треугольных странах определить, в какие страны мог входить город N. Город мог входить в страну, если он находится строго внутри нее.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла содержит два числа: x<sub>n</sub> и y<sub>n</sub> — координаты города N. Вторая строка входного файла содержит количество k треугольных стран (1 &#8804; k &#8804; 1000). Последующие k строк каждая описывают одну треугольную страну. Описание треугольной страны состоит из шести целых чисел x<sub>1</sub>,y<sub>1</sub>,x<sub>2</sub>,y<sub>2</sub>,x<sub>3</sub>,y<sub>3</sub>, где (x<sub>1</sub>,y<sub>1</sub>), (x<sub>2</sub>,y<sub>2</sub>), (x<sub>3</sub>,y<sub>3</sub>) — координаты вершин этой страны.
</p>
<p class=text>
Гарантируется, что все страны имеют ненулевую площадь. Все координаты не превосходят 10000 по абсолютной величине.
</p>

<h2>Выходные данные</h2>

<p class=text>
В первой строке выходного файла выведите количество стран, в которые мог входить город N. Во второй строке выведите через пробел номера этих стран в возрастающем порядке. Страны нумеруются с единицы в том порядке, в каком они заданы во входном файле.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>0 1<br>
2<br>
-2 0 2 0 0 2<br>
-3 0 3 0 0 3
</td><td valign=top>2<br>
1 2
</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>0 2<br>
2<br>
-2 0 2 0 0 2<br>
-3 0 3 0 0 3
</td><td valign=top>1<br>
2
</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=91" target="_blank">Задача №91</a><br>Сортировка и последовательности<br>Две последовательности</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 29%)</i></center>
<p class=text>
Определим последовательности a<sub>n</sub> и b<sub>n</sub> следующим образом: a<sub>1</sub> = 2, a<sub>2</sub> = 3, a<sub>3</sub> = 4, a<sub>4</sub> = 7, a<sub>n</sub> = b<sub>n&#8722;1</sub> + b<sub>n&#8722;3</sub>, n > 4, b<sub>n</sub> — последовательность чисел, не входящих в a<sub>n</sub>, записанных в возрастающем порядке.
</p>
<p class=text>
Таким образом, последовательность a<sub>n</sub> будет выглядеть следующим образом: 2, 3, 4, 7, 13, 15,..., а последовательность b<sub>n</sub> – 1, 5, 6, 8, 9, 10,....
</p>
<p class=text>
Ваша задача состоит в том, чтобы найти a<sub>n</sub> и b<sub>n</sub>.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл содержит целое число n (1 &#8804; n &#8804; 10000).
</p>

<h2>Выходные данные</h2>

<p class=text>
В первой строке выходного файла выведите a<sub>n</sub>, во второй – b<sub>n</sub>.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4</td><td valign=top>7<br>8</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>10</td><td valign=top>25<br>16</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>6578</td><td valign=top>19731<br>9868</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=96" target="_blank">Задача №96</a><br>Математическое моделирование<br>Винни-пух</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 41%)</i></center>
<p class=text>
<img src="acmp_files/image00A.gif" align=right>
Вини-Пух стоит на прямоугольном поле размером N*M клеток. В каждой клетке растет по одной ягоде. В начальный момент времени он стоит на левой верхней клетке. Он  начинает собирать ягоды по верхнему краю поля. Если он доходит до края поля или до пустой клетки, он поворачивается на 90 градусов вправо и продолжает собирать ягоды. Но дойдя до очередной клетки Вини вспоминает, что его ждет Пятачок, и он уходит с поля.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT стоят размеры поляны N и M (0 < N, M &#8804; 100) – высота и ширина, во второй числа Y и X (0 < Y &#8804; N, 0 < X &#8804; M) –номера строки и столбца клетки, дойдя до которой Вини-Пух прекращает собирать ягоды.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл  OUTPUT.TXT выведите число ягод, которые соберет Пух.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1 1<br>1 1</td><td valign=top>1</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>3 3<br>2 3</td><td valign=top>4</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>5 5<br>2 3</td><td valign=top>18</td></tr>
</table>


<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=98" target="_blank">Задача №98</a><br>Математическое моделирование<br>Игра в числа</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 28%)</i></center>
<p class=text>
Игра в числа ведётся на одномерном массиве целых положительных чисел. Перед началом, жеребьёвкой определяется, кто будет ходить первым (первый игрок), а кто – вторым (второй игрок). Процесс игры состоит в том, что игроки по очереди (сначала первый игрок, затем второй, следом опять первый и так далее) вычёркивают числа из массива. Вычеркнуть можно только число, находящееся в конце или начале оставшегося массива. При этом всегда вычёркивается максимальное число из этих двух. Если первое и последнее числа массива равны, то вычёркивается первое. Игра продолжается до того момента, пока не будут вычеркнуты все числа. Каждое вычеркнутое число идёт в актив тому игроку, который его вычеркнул. После окончания игры каждый игрок суммирует вычеркнутые им числа. Победителем объявляется тот, кто наберет больше очков. 
</p>
<p class=text>
Некоторые игроки поняли, что результат не зависит от стратегии игры, и решили попросить Вас написать программу для получения результата.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT находится одно целое число N – количество чисел в массиве (1 &#8804; N &#8804; 10<sup>4</sup>). Во второй строке находятся N целых положительных чисел из диапазона [1, 32000], разделённых пробелом.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите два числа, разделенные двоеточием. Первое число – количество очков, набираемых первым игроком при игре на этом массиве, второе число – для второго.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5<br>4 4 1 5 4</td><td valign=top>9:9</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>1<br>1234</td><td valign=top>1234:0</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=99" target="_blank">Задача №99</a><br>Теория графов<br>Лабиринт</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 57%)</i></center>
<p class=text>
Открыв глаза, Принц Персии обнаружил, что находится на верхнем уровне подземного лабиринта Джаффара. Лабиринт состоит из h уровней, расположенных строго друг под другом. Каждый уровень представляет собой прямоугольную площадку, разбитую на m х n участков. На некоторых участках стоят колонны, поддерживающие потолок, на такие участки Принц заходить не может.
</p>
<p class=text>
Принц может перемещаться с одного участка на другой свободный участок того же уровня, так же он может проломить пол под собой и оказаться уровнем нижнее (на самом нижнем уровне пол проломить нельзя). Любое перемещение занимает у Принца 5 секунд.
</p>
<p class=text>
На одном из участков нижнего уровня Принца ждет Принцесса. Помогите Принцу найти Принцессу, потратив на это как можно меньше времени.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT содержатся натуральные числа h, m и n — высота и горизонтальные размеры лабиринта (2 &#8804; h, m, n &#8804; 50). Далее во входном файле приведены h блоков, описывающих уровни лабиринта в порядке от верхнего к нижнему. Каждый блок содержит m строк, по n символов в каждой: «.» обозначает свободный участок, «о» обозначает участок с колонной, «1» обозначает свободный участок, в котором оказался Принц в начале своего путешествия, «2» обозначает свободный участок, на котором томится Принцесса. Символы «1» и «2» встречаются во входном файле ровно по одному разу: символ «1» — в описании самого верхнего уровня, а символ «2» — в описании самого нижнего. Соседние блоки разделены одной пустой строкой.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите минимальное время в секундах, необходимое Принцу, чтобы найти Принцессу. Поскольку добро всегда побеждает Зло, гарантируется, что Принц может это сделать.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3 3 3<br>
1..<br>
oo.<br>
...<br>
<br>
ooo<br>
..o<br>
.oo<br>
<br>
ooo<br>
o..<br>
o.2
</td><td valign=top>60</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=102" target="_blank">Задача №102</a><br>Геометрия<br>Треугольник</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 32%)</i></center>
<p class=text>
В декартовой системе координат на плоскости заданы координаты вершин треугольника и еще одной точки. Требуется написать программу, определяющую, принадлежит ли эта точка треугольнику.
</p>

<h2>Входные данные</h2>

<p class=text>
В четырех строках входного файла INPUT.TXT находятся пары целых чисел - координаты точек. Числа в первых трех строках - это координаты вершин треугольника (x<sub>1</sub>,y<sub>1</sub>), (x<sub>2</sub>,y<sub>2</sub>), (х<sub>3</sub>,у<sub>3</sub>), в четвертой строке - координаты тестируемой точки (x<sub>4</sub>,у<sub>4</sub>). Все координаты не превышают 10000 по абсолютной величине.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT необходимо вывести слово «In», если точка находится внутри треугольника и «Out» в противном случае.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>0 0<br>
100 0<br>
0 100<br>
100 100
</td><td valign=top>Out</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>0 0<br> 
100 0<br>
0 100<br>
10 10
</td><td valign=top>In</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>0 0<br>
100 0<br>
0 100<br>
50 50
</td><td valign=top>In</td></tr>
<tr class=white2><td align=center>4</td><td valign=top>0 0<br>
100 0<br>
0 100<br>
0 0
</td><td valign=top>In</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=107" target="_blank">Задача №107</a><br>Рекурсия, перебор<br>Красивые номера</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 62%)</i></center>
<table class=main cellpadding=2 cellspacing=1 align=right style="width:300px">
<tr><th>Шаблон группы</th><th>Баллы</th></tr>
<tr class=white2><td valign=top>aa</td><td valign=top>2</td></tr>
<tr class=white2><td valign=top>aba</td><td valign=top>2</td></tr>
<tr class=white2><td valign=top>aab, abb</td><td valign=top>2</td></tr>
<tr class=white2><td valign=top>aaa</td><td valign=top>3</td></tr>
<tr class=white2><td valign=top>abac, baca</td><td valign=top>2</td></tr>
<tr class=white2><td valign=top>abab</td><td valign=top>3</td></tr>
<tr class=white2><td valign=top>aabb</td><td valign=top>3</td></tr>
<tr class=white2><td valign=top>abba</td><td valign=top>4</td></tr>
<tr class=white2><td valign=top>baaa, abaa, aaba, aaab</td><td valign=top>3</td></tr>
<tr class=white2><td valign=top>aaaa</td><td valign=top>5</td></tr>
</table>
<p class=text>
Вы, наверное, замечали, что многие компании используют для рекламы «красивые» номера телефонов, которые удобны для запоминания потенциальными клиентами. Но что делать, если номер вашей компании ничем не примечателен? Можно присмотреться к нему повнимательнее, а вдруг, если перегруппировать цифры номера некоторым образом, номер станет намного красивее? Например, если у вашей компании номер 872-73-33, то его можно сделать красивее, если перегруппировать цифры так: 8727-333.
</p>
<p class=text>
Введем следующую оценку красоты разбиения номера. Будем разбивать номер дефисами на группы размером от 2 до 4 цифр. Теперь красотой разбиения назовем сумму баллов, которые приносит каждая группа. Эти баллы будем считать, пользуясь приведенной справа таблицей.
</p>
<p class=text>
В этой таблице символами «а», «b», «с» обозначены различные цифры. Например, под шаблон «aab» подходят группы «223», «667», но не подходят «123» и «888». Пользуясь предложенной оценкой, найдите наиболее красивое разбиение заданного номера.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит одну строку из 7 цифр – заданный телефонный номер.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выведите в первой строке выходного файла OUTPUT.TXT наиболее красивое разбиение номера, а во второй – величину его красоты. Если разбиений с максимальной величиной красоты несколько, выведите в выходной файл любое из этих разбиений.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>8727333</td><td valign=top>8727-333<br>5</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>8827291</td><td valign=top>88-272-91<br>4</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=109" target="_blank">Задача №109</a><br>Длинная арифметика<br>A / B</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 43%)</i></center>
<p class=text>
Требуется получить точное значение частного А/В для двух натуральных чисел A и B.
</p>

<h2>Входные данные</h2>

<p class=text>
В единственной строке входного файла INPUT.TXT записано частное двух натуральных чисел, не превышающих 1000. Числа разделены символом «/» без лишних пробелов.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT нужно вывести точное значение A/B без лишних точек, нулей и пробелов. В случае присутствия бесконечной записи числа следует вывести период в скобках. 
</p>
<p class=text>
Например, неправильно выведены числа: 08.92, 3.20, 120.6(6), 0.(33), 5.(0), 2. , .3, 0.33(03) . Их следует выводить как 8.92, 3.2, 120.(6), 0.(3), 5, 2, 0.3, 0.3(30) .
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>10/7</td><td valign=top>1.(428571)</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>1/3</td><td valign=top>0.(3)</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>100/25</td><td valign=top>4</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=111" target="_blank">Задача №111</a><br>Математическое моделирование<br>Игра «Пуговицы»</h1><center><i>(Время: 0,25 сек. Память: 16 Мб Сложность: 48%)</i></center>
<p class=text>
Правила игры очень просты. Перед двумя играющими находится кучка из K пуговиц. Играющие по очереди берут пуговицы из кучки, причем за один ход каждый из них может взять от 1 до L пуговиц. Выигрывает тот из спортсменов, которому удастся взять последнюю пуговицу.
</p>
<p class=text>
Тот из игроков, которому по жребию выпадает делать первый ход, получает возможность собственноручно назначить число K. Тот из игроков, который будет ходить вторым, выбирает, в свою очередь, число L.
</p>
<p class=text>
Вам необходимо определить наилучшую стратегию для участника, который ходит вторым.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записано одно натуральное число K (1 &#8804; K &#8804; 10<sup>8</sup>) – общее количество пуговиц.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT необходимо вывести целое число L (2 &#8804; L < K) — максимальное количество пуговиц, которое можно взять за один ход, обеспечивающее победу второму игроку. Если таких чисел несколько, то следует вывести наименьшее из них. Если таких чисел нет, то следует вывести число 0. 
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3</td><td valign=top>2</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>26</td><td valign=top>12</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>31</td><td valign=top>30</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=116" target="_blank">Задача №116</a><br>Динамическое программирование<br>Фермер - 2</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 60%)</i></center>
<p class=text>
После решения задачи с пашней земли, фермер хочет построить на этой земле как можно больший по площади сарай прямоугольной формы. Но на его участке есть деревья и хозяйственные постройки, которые он не хочет никуда переносить. Для простоты представим ферму прямоугольной сеткой размера MxN. Каждое из деревьев и построек размещается в одном или нескольких узлах сетки. Сарай должен быть построен на свободных узлах сетки.
</p>
<p class=text>
Помогите фермеру определить максимально возможную площадь сарая.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT записаны два натуральных числа N и M (1 &#8804; N,M &#8804; 1000) – размеры фермы. Далее, следует N строк, в каждой из которых находится последовательность (без пробелов) из M нулей и единиц, описывающих ферму. Единицы соответствуют свободным для постройки участкам.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT необходимо вывести максимально возможную площадь сарая, который может построить фермер на своем участке.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5 10<br>
1011011111<br>
0111111110<br>
1111111111<br>
1011111111<br>
1101110111
</td><td valign=top>21</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=117" target="_blank">Задача №117</a><br>Геометрия<br>Опасная зона</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 57%)</i></center>
<table width=100%><tr><td valign=top>
<p class=text>
Группа экспертов обнаружила на территории нежилого массива множество опасных участков, соприкосновение с которыми небезопасно для жизни человека. 
</p>
<p class=text>
В целях безопасности требуется создать защитный периметр в форме выпуклого многоугольника, который бы смог обезопасить проникновение человека в эту зону.
</p>
<p class=text>
По заданным координатам опасных участков требуется вычислить минимально возможную площадь опасной зоны, которая попадет в защитный периметр.
</p>
</td><td valing=top>
<img src="acmp_files/image00D.gif">
</td><tr></table>


<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT записано натуральное число N – количество опасных участков. В каждой из N последующих строк находятся два числа X<sub>i</sub> и Y<sub>i</sub>  - координаты участков, размерами которых можно пренебречь. При этом участки могут повторяться.
</p>
<p class=text>
Все числа целые, не превосходящие 1000 по абсолютной величине.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT необходимо вывести одно число — площадь опасной зоны, округленной до целого значения.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>10<br>
4 6<br>
2 5<br>
6 4<br>
7 7<br>
4 4<br>
1 5<br>
3 8<br>
3 2<br>
5 7<br>
7 3
</td><td valign=top>26</td></tr>
</table>


<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=129" target="_blank">Задача №129</a><br>Теория графов<br>Табличка</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 40%)</i></center>
<p class=text>
Вам дана табличка, состоящая из N строк и M столбцов. В каждой клетке таблицы стоит либо 0, либо 1. Расстоянием между клетками (x1,y1) и (x2,y2) называется |x1-x2|+|y1-y2|. Вам нужно построить другую таблицу, в которой в каждой клетке стоит расстояние от данной до ближайшей клетки, содержащей 1 (в начальной таблице). Гарантируется, что хотя бы одна 1 в таблице есть.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT содержатся два натуральных числа, не превосходящих 100 - N и M. Далее идут N строк по M чисел - элементы таблицы.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать N строк по M чисел - элементы искомой таблицы.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>2 3<br>
0 0 1<br>
1 0 0
</td><td valign=top>1 1 0<br>
0 1 1
</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=139" target="_blank">Задача №139</a><br>Теория графов<br>Лабиринт знаний</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 53%)</i></center>
<p class=text>
В стране Умландии построили аттракцион "Лабиринт знаний". Лабиринт представляет собой N комнат, занумерованных от 1 до N, между некоторыми из которых есть двери. Когда человек проходит через дверь, показатель его знаний изменяется на определенную величину, фиксированную для данной двери. Вход в лабиринт находится в комнате 1, выход - в комнате N. Каждый ученик проходит лабиринт ровно один раз и попадает в ту или иную учебную группу в зависимости от количества набранных знаний (при входе в лабиринт этот показатель равен нулю). Ваша задача показать наилучший результат.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит целые числа N (1 <= N <= 2000) - количество комнат и M (1 <= M <= 10000) - количество дверей. В каждой из следующих M строк содержится описание двери - номера комнат, из которой она ведет и в которую она ведет (через дверь можно ходить только в одном направлении), а также целое число, которое прибавляется к количеству знаний при прохождении через дверь (это число по модулю не превышает 10000). Двери могут вести из комнаты в нее саму, между двумя комнатами может быть более одной двери.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите ":)" - если можно получить неограниченно большой запас знаний, ":(" - если лабиринт пройти нельзя, и максимальное количество набранных знаний в противном случае. 
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>2 2<br>
1 2 5<br>
1 2 -5
</td><td valign=top>5</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=152" target="_blank">Задача №152</a><br>Теория графов<br>Построение</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 62%)</i></center>
<p class=text>
Группа солдат-новобранцев прибыла в армейскую часть N666. После знакомства с прапорщиком стало очевидно, что от работ на кухне по очистке картофеля спасти солдат может только чудо.
</p>
<p class=text>
Прапорщик, будучи не в состоянии запомнить фамилии, пронумеровал новобранцев от 1 до N. После этого он велел им построиться по росту (начиная с самого высокого). С этой несложной задачей могут справиться даже совсем необученные новобранцы, да вот беда, прапорщик уверил себя, что знает про некоторых солдат, кто из них кого выше, и это далеко не всегда соответствует истине.
</p>
<p class=text>
После трех дней обучения новобранцам удалось выяснить, что знает (а точнее, думает, что знает) прапорщик. Помогите им, используя эти знания, построиться так, чтобы товарищ прапорщик остался доволен.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT сначала идут числа N и M (1 <= N <= 100, 1 <= M <= 5000) - количество солдат в роте и количество пар солдат, про которых прапорщик знает, кто из них выше. Далее идут эти пары чисел A и B по одной на строке (1 <= A,B <= N), что означает, что, по мнению прапорщика, солдат A выше, чем B.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите "Yes" если можно построиться так, чтобы прапорщик остался доволен и "No" если нельзя.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5 4<br>
1 3<br>
1 4<br>
4 3<br>
5 2
</td><td valign=top>Yes</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=153" target="_blank">Задача №153</a><br>Рекурсия, перебор<br>Монетки - 2</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 51%)</i></center>
<p class=text>
В волшебной стране используются монетки достоинством A1, A2,..., AM. волшебный человечек пришел в магазин и обнаружил, что у него есть ровно по две монетки каждого достоинства. Ему нужно заплатить сумму N. Напишите программу, определяющую, сможет ли он расплатиться без сдачи.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записано сначала число N (1 <= N <= 10<sup>9</sup>), затем - число M (1 <= M <= 15) и далее M попарно различных чисел A1, A2,..., AM (1 <= Ai <= 10<sup>9</sup>).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите количество монет, которое придется отдать волшебному человечку, если он сможет заплатить указанную сумму без сдачи. Если решений несколько, выведите вариант, в котором волшебный человек отдаст наименьшее возможное количество монет. Если без сдачи не обойтись, то выведите одно число 0. Если же у волшебного человечка не хватит денег, чтобы заплатить указанную сумму, выведите одно число -1 (минус один).
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5 2<br>1 2</td><td valign=top>3</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>7 2<br>1 2</td><td valign=top>-1</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>5 2<br>3 4</td><td valign=top>0</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=166" target="_blank">Задача №166</a><br>Математическое моделирование<br>Сообщество роботов</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 30%)</i></center>
<p class=text>
Сообщество роботов живет по следующим законам:
</p>
<ul>
<li>один раз в начале года они объединяются в группы по три или пять роботов;</li>
<li>за год группа из трех роботов собирает 5 новых, а группа из 5 роботов – 9 новых;</li>
<li>роботы объединяются так, чтобы собрать за год наибольшее количество новых роботов;</li>
<li>каждый робот живет ровно три года после сборки.</li>
</ul>
<p class=text>
В начале первого года было K роботов и все они были только что собраны.
</p>
<p class=text>
Требуется написать программу, которая найдет количество роботов в начале N-го года.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит записанные через пробел числа K (1 <= K <= 500) и N  (1 <= N <= 100).
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать одно число - количество роботов в начале N-го года. Количество роботов меньше, чем 2<sup>31</sup>.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3 2</td><td valign=top>8</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>8 2</td><td valign=top>22</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=169" target="_blank">Задача №169</a><br>Теория графов<br>Магазин</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 34%)</i></center>
<p class=text>
На расстоянии N шагов от магазина стоит человек. Каждую минуту он выбирает, куда сделать шаг: к магазину или в противоположном направлении.
</p>
<p class=text>
Требуется написать программу, которая определит, сколькими способами он может попасть в магазин, пройдя ровно K шагов.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит 2 числа n и k, записанные через пробел. Известно, что 1 <= N <= K <= 37.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать одно число – количество способов попадания в магазин.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>2 4</td><td valign=top>2</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>5 5</td><td valign=top>1</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=175" target="_blank">Задача №175</a><br>Математическое моделирование<br>Наручные часы</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 37%)</i></center>
<p class=text>
Вы приобрели новые электронные наручные часы с жидкокристаллическим дисплеем. Дисплей отображает часы и минуты с помощью четырех элементов, каждый из которых отображает одну цифру. 
</p>
<center><img src="acmp_files/image00I.gif" alt="Дисплей наручных часов"></center>
<p class=text>
Три из них состоят из семи полосок, каждая из которых может быть либо белой (неотличимой от фона), либо черной. Вид такого элемента и отображаемые им цифры показаны на рисунке:
</p>
<center><img src="acmp_files/image00J.gif" alt="Цифры"></center>
<p class=text>
Четвертый элемент предназначен для отображения старшей цифры часа. Если она равна нулю, то элемент полностью неактивен (все полоски белые), иначе показывается соответствующая цифра. Вот как выглядит этот элемент с цифрами:
</p>
<center><img src="acmp_files/image00K.gif" alt="Первая цифра на наручных часах"></center>
<p class=text>
Вам хочется проверить: все ли в порядке с новым приобретением, а именно, нет ли таких полосок в каком-либо из элементов, которые либо всегда белые, либо всегда черные. Вы хотите начать проверку в некоторое начальное время. Требуется определить, сколько Вам потребуется минут для убеждения в исправности часов.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT находится время начала проверки в формате HH:MM. Часы и минуты записаны с лидирующими нулями, если таковые имеются. (00 &#8804; HH &#8804; 23, 00 &#8804; MM &#8804; 59).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите минимальное число минут, необходимое для проверки Ваших часов, если она началась в заданное время.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>00:00</td><td valign=top>1200</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>02:39</td><td valign=top>1041</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=178" target="_blank">Задача №178</a><br>Сортировка и последовательности<br>Преобразование последовательности</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 42%)</i></center>
<p class=text>
Задана последовательность, содержащая n целых чисел. Необходимо найти число, которое встречается в этой последовательности наибольшее количество раз, а если таких чисел несколько, то найти минимальное из них, и после этого переместить все такие числа в конец заданной последовательности. Порядок расположения остальных чисел должен остаться без изменения.
</p>
<p class=text>
Например, последовательность 1, 2, 3, 2, 3, 1, 2 после преобразования должна превратиться в последовательность 1, 3, 3, 1, 2, 2, 2.
</p>
<p class=text>
Требуется написать программу, которая решает данную задачу.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит число n — количество чисел во входной последовательности (3 &#8804; n &#8804; 200000). Следующая строка содержит входную последовательность, состоящую из n целых чисел, не превышающих по модулю 10<sup>9</sup>. Все числа в строке разделены пробелом.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выводится последовательность чисел, которая получается в результате названного преобразования. Все числа в последовательности должны быть разделены пробелом.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>7<br>1 2 3 2 3 1 2</td><td valign=top>1 3 3 1 2 2 2</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=182" target="_blank">Задача №182</a><br>Геометрия<br>Прямоугольник - 2</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 27%)</i></center>
<p class=text>
Заданы координаты трех вершин прямоугольника. Необходимо определить координаты четвертой вершины.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записаны через пробел координаты трех вершин прямоугольника в произвольном порядке в формате x<sub>1</sub> y<sub>1</sub> x<sub>2</sub> y<sub>2</sub> x<sub>3</sub> y<sub>3</sub>. Все числа целые, не превосходящие 1000 по абсолютной величине.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT нужно вывести через пробел координаты четвертой вершины прямоугольника.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>0 3 0 0 5 0 </td><td valign=top>5 3 </td></tr>
<tr class=white2><td align=center>2</td><td valign=top>1 4 8 3 7 6 </td><td valign=top>2 1 </td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=184" target="_blank">Задача №184</a><br>Сортировка и последовательности<br>Рабочее время</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 26%)</i></center>
<p class=text>
Иван Иванович – очень ответственный, но очень рассеянный человек. Поэтому когда он начинает очередное дело, он на отдельном листочке пишет дату и время начала (например, 29.01. 10:30), а когда заканчивает, то так же на отдельном листочке – дату и время окончания (например, 02.02. 12:15). Листочки аккуратно укладываются в стопку один на другой. А так как одновременно Иван Иванович может заниматься только одним делом, то листочки однозначно упорядочены в стопке: листок начала какого-то дела, листок окончания этого дела, листок начала,  листок окончания… и т.д. Дело начинается в начале минуты, указанной в листочке начала этого дела, а заканчивается в конце минуты, указанной на листочке окончания. Иван Иванович ходит на работу каждый день и его рабочий день продолжается с 10:00 до 18:00. Таким образом, пара листочков «18.11. 15:13» — «20.11. 10:27» была написана при начале и окончании дела длительностью 11ч.15м.
</p>
<p class=text>
Однажды в конце декабря уборщица Дуся нечаянно уронила эту стопку на пол и, не зная важной закономерности их укладки, собрала листочки обратно в каком-то произвольном порядке. Иван Иванович обнаружил этот прискорбный факт только 31 декабря, когда ему надо было произвести учет своего рабочего времени за год. Год был невисокосный.
</p>
<p class=text>
Помогите Ивану Ивановичу найти его суммарные затраты времени за год.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит в первой строке число листочков K, (K – четное число, не большее 5000). Далее записаны K строк с данными на листочках в формате DD.MM. hh:mm, где DD – число, MM – номер месяца, hh – часы и mm – минуты.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать запись вида h:mm – количество часов и минут, отработанных Иваном Ивановичем. При этом число h >= 0 выводится без ведущих нулей, а число 0 <= mm <= 59 выводится с ведущими нулями.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4<br>
15.01. 17:00<br>
16.01. 12:00<br>
11.02. 14:00<br>
30.01. 10:00
</td><td valign=top>103:02</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=190" target="_blank">Задача №190</a><br>Комбинаторика<br>По размещению!</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 56%)</i></center>
<p class=text>
<i>Перестановкой</i> из N элементов называется упорядоченный набор из N различных чисел от 1 до N.
</p>
<p class=text>
<i>Размещением</i> порядка K называют подмножество элементов некоторой перестановки порядка N. Например, (1, 3) – размещение порядка 2 для перестановки (1, 2, 3) порядка 3.
</p>
<p class=text>
Требуется по заданному размещению определить его позицию в лексикографическом порядке всех возможных размещений, образованных из всевозможных перестановок порядка N.
</p>
<p class=text>
Например, лексикографическая последовательность всевозможных размещений для K=2 и N=3 выглядит следующим образом:
</p>
<p class=text>
(1,2), (1,3), (2,1), (2,3), (3,1), (3,2)
</p>
<p class=text>
Таким образом, перемещение (2,3) имеет номер 4 в этой последовательности.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT находятся числа N и K (1 <= K <= N <= 12). Во второй строке записаны K чисел из диапазона от 1 до N - размещение.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите единственное число - номер данного размещения.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3 2<br>3 2</td><td valign=top>6</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>6 4<br>1 3 2 5</td><td valign=top>14</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=191" target="_blank">Задача №191</a><br>Комбинаторика<br>Гладкие числа</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 60%)</i></center>
<p class=text>
Назовем число <i>гладким</i>, если его цифры, начиная со старшего разряда, образуют неубывающую последовательность. Упорядочим все такие числа в возрастающем порядке и присвоим каждому номер. 
</p>
<p class=text>
Вам требуется по номеру N вывести N-ое гладкое число.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT содержится номер N (1 <= N <= 2147483647).
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать искомое N-е гладкое число.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1</td><td valign=top>1</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>11</td><td valign=top>12</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>239 </td><td valign=top>1135</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=193" target="_blank">Задача №193</a><br>Структуры данных<br>Поиск прямоугольников</h1><center><i>(Время: 0,5 сек. Память: 16 Мб Сложность: 34%)</i></center>
<p class=text>
На поле NxM клеток (N строк и M столбцов) положили K прямоугольников один поверх другого в случайном порядке. Длины сторон прямоугольников выражаются целым числом клеток. Прямоугольники не выходят за границы поля. Границы прямоугольников совпадают с границами клеток поля.
</p>
<p class=text>
Получившуюся ситуацию записали в таблицу чисел (каждой клетке поля соответствует клетка таблицы). Если клетка поля не закрыта прямоугольником, то в соответствующую клетку таблицы записали число 0. Если же клетка закрыта одним или несколькими прямоугольниками, то в соответствующую клетку таблицы записали число, соответствующее номеру самого верхнего прямоугольника, закрывающего эту клетку.
</p>
<p class=text>
Требуется написать программу, которая определит положение и размеры прямоугольников. Гарантируется, что во входных данных содержится информация, которой достаточно для однозначного определения размеров прямоугольников.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит в первой строке целые числа N, M, K (1<=N<=200, 1<=M<=200, 1<=K<=255). Далее следует N строк по M чисел в каждой — содержимое таблицы. Все числа в таблице целые, находятся в диапазоне от 0 до K включительно.
</p>

<h2>Выходные данные</h2>

<p class=text>
<img src="acmp_files/image00M.gif" align=right alt="Поиск прямоугольников">
Выходной файл OUTPUT.TXT должен содержать K строк. Каждая строка должна описывать соответствующий ее номеру прямоугольник четырьмя числами X1 Y1 X2 Y2 (X1 и Y1 должны описывать координаты левого нижнего угла прямоугольника, а X2 и Y2 — координаты правого верхнего угла). Числа должны разделяться пробелом.
</p>
<p class=text>
Начало координат расположено в левом нижнем углу таблицы. Таким образом, координаты левого нижнего угла поля — (0,0), правого верхнего — (M,N).
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4 5 2<br>
0 2 2 2 2<br>
0 2 2 2 2<br>
1 1 2 2 2<br>
1 1 0 0 0
</td><td valign=top>0 0 2 2<br>1 1 5 4</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=196" target="_blank">Задача №196</a><br>Двумерные массивы<br>Спираль</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 38%)</i></center>
<p class=text>
<img src="acmp_files/image00N.gif" align=right alt="Спираль">
Требуется совершить обход квадратной матрицы по спирали так, как показано на рисунке справа: заполнение происходит с единицы из левого верхнего угла и заканчивается в центре числом N<sup>2</sup>, где N – порядок матрицы.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT задано натуральное число N – размер квадратной матрицы (N<=100).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл  OUTPUT.TXT выведите матрицу, заполненную числами от 1 до N<sup>2</sup> по спирали, при этом между числами может быть любое количество пробелов.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5</td><td valign=top> 1  2  3  4   5<br>
16 17 18 19  6<br>
15 24 25 20  7<br>
14 23 22 21  8<br>
13 12 11 10  9
</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=197" target="_blank">Задача №197</a><br>Двумерные массивы<br>Змейка</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 40%)</i></center>
<p class=text>
<img src="acmp_files/image00O.gif" alt="Змейка" align=right>
Требуется заполнить змейкой квадратную матрицу так, как показано на рисунке справа: заполнение происходит с единицы из левого верхнего угла и заканчивается в правом нижнем числом N<sup>2</sup>, где N – порядок матрицы.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT задано натуральное число N – размер квадратной матрицы (N<=100).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл  OUTPUT.TXT выведите матрицу, заполненную числами от 1 до N<sup>2</sup> змейкой, при этом между числами может быть любое количество пробелов.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4</td><td valign=top>1  3  4 10<br>
 2  5  9 11<br>
 6  8 12 15<br>
 7 13 14 16
</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=199" target="_blank">Задача №199</a><br>Разбор строк<br>Римские числа</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 50%)</i></center>
<p class=text>
Необходимо сократить дробь, записанную в римской системе счисления. Напомним, что в римской записи используются символы M, D, C, L, X, V и I. Приведем таблицу с примерами перевода римских чисел в арабскую систему:
</p>
<table class=main cellpadding=2 cellspacing=1>
<tr class=white2><td>I - 1</td><td>VII - 7</td><td>XLVI - 46</td><td>CCCII - 302</td></tr>
<tr class=white2><td>II - 2</td><td>VIII - 8</td><td>L - 50</td><td>CDXLI - 441</td></tr>
<tr class=white2><td>III - 3</td><td>IX - 9</td><td>LXXV - 75</td><td>ID - 499</td></tr>
<tr class=white2><td>IV - 4</td><td>X - 10</td><td>XCII - 92</td><td>D - 500</td></tr>
<tr class=white2><td>V - 5</td><td>XVIII - 18</td><td>IC - 99</td><td>DCXCV - 695</td></tr>
<tr class=white2><td>VI - 6</td><td>XXXI - 31</td><td>C - 100</td><td>CM - 900</td></tr>
</table>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записана дробь в римской системе счисления. Формат записи считается корректным, если запись представляет собой: римское число, деление, римское число (без пробелов), и каждое из чисел находится в диапазоне от 1 до 999.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите сокращенную дробь в римской системе счисления. В тех случаях, когда первое число делится на второе, следует выводить результат в виде только одного римского числа. В том случае, когда во входных данных содержится ошибка, следует вывести ERROR.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>II/IV</td><td valign=top>I/II</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>XXIV/VIII</td><td valign=top>III</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>12/16</td><td valign=top>ERROR</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=205" target="_blank">Задача №205</a><br>Простая математика<br>Таймер</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 31%)</i></center>
<p class=text>
Таймер - это часы, которые умеют подавать звуковой сигнал по прошествии некоторого периода времени. Напишите программу, которая определяет, когда должен быть подан звуковой сигнал.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT записано текущее время в формате ЧЧ:ММ:СС (с ведущими нулями). При этом оно удовлетворяет ограничениям: ЧЧ - от 00 до 23, ММ и СС - от 00 до 60. 
</p>
<p class=text>
Во второй строке записан интервал времени, который должен быть измерен. Интервал записывается в формате Ч:М:С (где Ч, М и С - от 0 до 10<sup>9</sup>, без ведущих нулей). Дополнительно если Ч=0 (или Ч=0 и М=0), то они могут быть опущены. Например, 100:60 на самом деле означает 100 минут 60 секунд, что то же самое, что 101:0 или 1:41:0. А 42 обозначает 42 секунды. 100:100:100 - 100 часов, 100 минут, 100 секунд, что то же самое, что 101:41:40. 
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите в формате ЧЧ:ММ:СС время, во сколько прозвучит звуковой сигнал. При этом если сигнал прозвучит не в текущие сутки, то дальше должна следовать запись +<кол во> days. Например, если сигнал прозвучит на следующий день – то +1 days.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>01:01:01<br>48:0:0</td><td valign=top>01:01:01+2 days</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>01:01:01<br>58:119</td><td valign=top>02:01:00</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>23:59:59<br>1</td><td valign=top>00:00:00+1 days</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=206" target="_blank">Задача №206</a><br>Теория графов<br>Домой на электричках</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 40%)</i></center>
<p class=text>
Одна из команд-участниц олимпиады решила вернуться домой на электричках. При этом ребята хотят попасть домой как можно раньше. К сожалению, не все электрички идут от города, где проводится олимпиада, до станции, на которой живут ребята. И, что еще более обидно, не все электрички, которые идут мимо их станции, останавливаются на ней (равно как вообще, электрички останавливаются далеко не на всех станциях, мимо которых они идут).
</p>
<p class=text>
Все станции на линии пронумерованы числами от 1 до N. При этом станция номер 1 находится в городе, где проводится олимпиада, и в момент времени 0 ребята приходят на станцию. Станция, на которую нужно попасть ребятам, имеет номер E. 
</p>
<p class=text>
Напишите программу, которая по данному расписанию движения электричек вычисляет минимальное время, когда ребята могут оказаться дома.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записаны сначала числа N (2 <= N <= 100) и E (2 <= E <= N). Затем записано число M (0 <= M <= 100), обозначающее число рейсов электричек. Далее идет описание M рейсов электричек. Описание каждого рейса электрички начинается с числа K<sub>i</sub> (2 <= K<sub>i</sub> <= N) — количества станций, на которых она останавливается, а далее следует Ki пар чисел, первое число каждой пары задает номер станции, второе — время, когда электричка останавливается на этой станции (время выражается целым числом из диапазона от 0 до 10<sup>9</sup>). Станции внутри одного рейса упорядочены в порядке возрастания времени. В течение одного рейса электричка все время движется в одном направлении — либо от города, либо к городу.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно число — минимальное время, когда ребята смогут оказаться на своей станции. Если существующими рейсами электричек они добраться не смогут, выведите –1.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5 3<br>
4<br>
2 1 5 2 10<br>
2 2 10 4 15<br>
4 5 0 4 17 3 20 2 35<br>
3 1 2 3 40 4 45
</td><td valign=top>20</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=207" target="_blank">Задача №207</a><br>Простая математика<br>Клад</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 28%)</i></center>
<img src="acmp_files/image00Q.gif" align=right alt='Клад'>
<p class=text>
Найти закопанный пиратами клад просто: всё, что для этого нужно – это карта. Как известно, пираты обычно рисуют карты от руки и описывают алгоритм действий. Большая часть таких действий просто сводится к прохождению какого-то количества шагов в одном из восьми направлений (1 – север, 2 – северо-восток, 3 – восток, 4 – юго-восток, 5 – юг, 6 – юго-запад, 7 – запад, 8 – северо-запад) (см. рис). Длина шага в любом направлении равна 1.
</p>
<p class=text>
Путешествие по такому пути обычно является прекрасным способом посмотреть окрестности, однако в наше время постоянной спешки ни у кого нет времени на это. Поэтому кладоискатели хотят идти напрямую в точку, где зарыт клад. Например, вместо того, чтобы проходить три шага на север, один шаг на восток, один шаг на север, три шага на восток, два шага на юг и один шаг на запад, можно пройти напрямую, использовав около 3.6 шага (см. рисунок).
</p>
<p class=text>
Вам необходимо узнать точку, в которой находится клад согласно указаниям пиратов.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит число N – число указаний (1&#8804;N&#8804;40). Последующие N строк содержат сами указания – номер направления (целое число от 1 до 8) и количество шагов (целое число от 1 до 1000). Числа разделены пробелами.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите координаты X и Y точки (два вещественных числа, разделённые пробелом), где зарыт клад, считая, что ось OX направлена на восток, а ось OY – на север. В начале кладоискатель должен стоять в начале координат. Координаты необходимо вывести с точностью 10<sup>-3</sup>.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>6<br>
1 3<br>
3 1<br>
1 1<br>
3 3<br>
5 2<br>
7 1
</td><td valign=top>3.000 2.000</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>1<br>
8 10
</td><td valign=top>-7.071 7.071</td></tr>
</table>


<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=216" target="_blank">Задача №216</a><br>Комбинаторика<br>Коллекционирование этикеток</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 41%)</i></center>
<p class=text>
Вася коллекционирует спичечные этикетки. Для этого у него есть N альбомов вместимостью K<sub>1</sub>, K<sub>2</sub>, …, K<sub>N</sub> этикеток. Вася хочет, чтобы в случае утери одного любого альбома каждая этикетка осталась у него хотя бы в одном экземпляре. Для этого он покупает каждую этикетку в двух экземплярах, и наклеивает их в два разных альбома. Какое максимальное количество различных этикеток при этом может оказаться в его коллекции? 
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит сначала число N — количество альбомов, а затем N чисел K<sub>1</sub>, K<sub>2</sub>, …, K<sub>N</sub>, задающих вместимости альбомов. N — натуральное число из диапазона от 2 до 1000. Вместимость каждого альбома задается натуральным числом, суммарная вместимость всех альбомов не превышает 100 000 этикеток.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите число E — максимальное количество различных этикеток, которое может собрать Вася с соблюдением выдвинутого условия. 
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4<br>1 2 1 1</td><td valign=top>2</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=228" target="_blank">Задача №228</a><br>Динамическое программирование<br>Валютные махинации</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 39%)</i></center>
<p class=text>
Петя, изучая, как меняется курс рубля по отношению к доллару и евро, вывел закон, по которому происходят эти изменения (или думает, что вывел :) ). По этому закону Петя рассчитал, каков будет курс рубля по отношению к доллару и евро в ближайшие N дней. 
</p>
<p class=text>
У Пети есть 100 рублей. В каждый из дней он может обменивать валюты друг на друга по текущему курсу без ограничения количества (при этом курс доллара по отношению к евро соответствует величине, которую можно получить, обменяв доллар на рубли, а потом эти рубли — на евро). Поскольку Петя будет оперировать не с наличной валютой, а со счетом в банке, то он может совершать операции обмена с любым (в том числе и нецелым) количеством единиц любой валюты.
</p>
<p class=text>
Напишите программу, которая вычисляет, какое наибольшее количество рублей сможет получить Петя к исходу N-го дня.
</p>
<p class=text>
Законы изменения курсов устроены так, что в течение указанного периода рублевый эквивалент той суммы, которая может оказаться у Пети, не превысит 10<sup>8</sup> рублей.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит одно число N (1<=N<=5000). В каждой из следующих N строк записано по 2 числа, вычисленных по Петиным законам для соответствующего дня — сколько рублей будет стоить 1 доллар, и сколько рублей будет стоить 1 евро. Все эти значения не меньше 0.01 и не больше 10000. Значения заданы точно и выражаются вещественными числами не более, чем с двумя знаками после десятичной точки.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите искомую величину с двумя знаками после десятичной точки.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4<br>
1 10<br>
10 5.53<br>
5.53 1.25<br>
6 5
</td><td valign=top>4000.00</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=235" target="_blank">Задача №235</a><br>Математическое моделирование<br>Робот К-79</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 30%)</i></center>
<p class=text>
Петя написал программу движения робота К-79. Программа состоит из следующих команд:
</p>
<ul>
  <li>S — сделать шаг вперед</li>
  <li>L — повернуться на 90 градусов влево</li>
  <li>R — повернуться на 90 градусов вправо</li>
</ul>
<p class=text>
Напишите программу, которая по заданной программе для робота определит, сколько шагов он сделает прежде, чем впервые вернется на то место, на котором уже побывал до этого, либо установит, что этого не произойдет.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записана одна строка из заглавных латинских букв S, L, R, описывающая программу для робота. Общее число команд в программе не превышает 200, при этом команд S — не более 50.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите, сколько шагов будет сделано (то есть выполнено команд S) прежде, чем робот впервые окажется в том месте, через которое он уже проходил. Если такого не произойдет, выведите в выходной файл число –1.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>SSLSLSLSSRSRS</td><td valign=top>5</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>LSSSS</td><td valign=top>-1</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=236" target="_blank">Задача №236</a><br>Разбор строк<br>Многочлен</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 41%)</i></center>
<p class=text>
Васе задали несколько однотипных задач по математике: «найти значение многочлена».  Он хочет написать программу, которая по заданному многочлену и значению x находила бы ответ. Напишите такую программу!
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT записан многочлен в виде суммы одночленов. Между одночленами находится знак + или –. Перед первым одночленом может быть знак –. Одночлен записывается как [<Коэффициент>*]x[^<Степень>] или <Коэффициент>, где <Коэффициент> – натуральное число, не превосходящее 100, x – символ переменной (всегда маленькая латинская буква x), <Степень> — натуральное число, не превосходящее 4. Параметры, взятые в квадратные скобки, могут быть опущены. Общее число символов в записи многочлена не превышает 80. Во второй строке записано одно целое число — значение x, не превышающее 100 по абсолютной величине.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT нужно записать одно число – значение данного многочлена при данном значении x.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>8*x+5<br>7</td><td valign=top>61</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>-2+x^1-3*x^2+x^2+100*x^3-2*x<br>0</td><td valign=top>-2</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=237" target="_blank">Задача №237</a><br>Жадный алгоритм<br>Головоломка</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 35%)</i></center>
<img src="acmp_files/image00U.gif" alt='Головоломка' align=right>
<p class=text>
Петя разгадывает головоломку, которая устроена следующим образом. Дана квадратная таблица размера NxN, в каждой клетке которой записана какая-нибудь латинская буква. Кроме того, дан список ключевых слов. Пете нужно, взяв очередное ключевое слово, найти его в таблице. То есть найти в таблице все буквы этого слова, причем они должны быть расположены так, чтобы клетка, в которой расположена каждая последующая буква слова, была соседней с клеткой, в которой записана предыдущая буква (клетки называются соседними, если они имеют общую сторону — то есть соседствуют по вертикали или по горизонтали). Например, на рисунке показано, как может быть расположено в таблице слово olympiad.
</p>
<p class=text>
Когда Петя находит слово, он вычеркивает его из таблицы. Использовать уже вычеркнутые буквы в других ключевых словах нельзя. После того, как найдены и вычеркнуты все ключевые слова, в таблице остаются еще несколько букв, из которых Петя должен составить слово, зашифрованное в головоломке.
</p>
<p class=text>
Помогите Пете в решении этой головоломки, написав программу, которая по данной таблице и списку ключевых слов выпишет, из каких букв Петя должен сложить слово, то есть какие буквы останутся в таблице после вычеркивания ключевых слов.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записаны два числа N (1<=N<=10) и M (0<=M<=100). Следующие N строк по N заглавных латинских букв описывают ребус. Следующие M строк содержат слова. Слова состоят только из заглавных латинских букв, каждое слово не длиннее 100 символов. Гарантируется, что в таблице можно найти и вычеркнуть по описанным выше правилам все ключевые слова.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите в алфавитном порядке оставшиеся в таблице буквы.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5 3<br>
POLTE<br>
RWYMS<br>
OAIPT<br>
BDANR<br>
LEMES<br>
OLYMPIAD<br>
PROBLEM<br>
TEST
</td><td valign=top>AENRSW</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>3 2<br>
ISQ<br>
ABC<br>
IQW<br>
I<br>
IS
</td><td valign=top>ABCQQW</td></tr>
</table>


<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=238" target="_blank">Задача №238</a><br>Теория графов<br>Побег с космической станции</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 52%)</i></center>
<p class=text>
Представьте, что вы состоите на службе во внешней разведке Межгалактического Альянса Республиканских Сил (МАРС). Одному из агентов разведки крупно не повезло, и он был захвачен на засекреченной космической базе. К счастью, внешней разведке МАРС удалось заполучить план этой базы. И вот теперь вам поручено разработать план побега. 
</p>
<p class=text>
База представляет собой прямоугольник размером NхM, со всех сторон окружённый стенами, и состоящий из квадратных отсеков единичной площади. База снабжена K выходами, до одного из которых агенту необходимо добраться. В некоторых отсеках базы находятся стены. Ваш агент может перемещаться из отсека в любой из четырех соседних с ним, если в том отсеке, куда он хочет переместиться, нет стены. 
</p>
<p class=text>
Кроме того, база снабжена системой гипертуннелей, способных перемещать агента из одного отсека базы (вход в гипертуннель) в другой (выход из гипертуннеля). Когда агент находится в отсеке, где есть вход в гипертуннель, он может (но не обязан) им воспользоваться.
</p>
<p class=text>
Начальное положение вашего агента известно. Вам необходимо найти кратчайший путь побега (то есть путь, проходящий через минимальное количество отсеков).
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT записаны числа N и M (2<=N<=100, 2<=M<=100), задающие размеры базы: N — количество строк в плане базы, M — количество столбцов. Во второй строке записаны начальные координаты агента X<sub>A</sub>,Y<sub>A</sub> (1<=X<sub>A</sub><=N, 1<=Y<sub>A</sub><=M). Первая координата задает номер строки, вторая — номер столбца. Строки нумеруются сверху вниз, столбцы слева направо. Далее следуют N строк по M чисел, задающих описание стен внутри базы: 1 соответствует стенке, 0 — её отсутствию. Далее в отдельной строке записано число H (0<=H<=1000) — количество гипертуннелей. В последующих H строках идут описания гипертуннелей. Каждый гипертуннель задается 4 числами: X<sub>1</sub>, Y<sub>1</sub>, X<sub>2</sub>, Y<sub>2</sub> (1<=X<sub>1</sub>,X<sub>2</sub><=N; 1<=Y<sub>1</sub>,Y<sub>2</sub><=M) — координатами входа и выхода гипертуннеля. Никакие два гипертуннеля не имеют общего входа. После этого в отдельной строке следует число K (1<=K<=10) — количество выходов с базы. В последующих K строках идут описания выходов с базы. Каждый выход задается двумя координатами X и Y (1<=X<=N; 1<=Y<=M).
</p>
<p class=text>
Гарантируется, что начальные координаты агента не совпадают ни с одним из выходов и он не стоит в отсеке, занятом стеной. Никакие входы и выходы гипертуннелей, а также выходы с базы не находятся в отсеках, занятых стенами. Никакой вход в гипертуннель не совпадает с выходом с базы.
</p>

<h2>Выходные данные</h2>

<p class=text>
Если побег невозможен, выведите в выходной файл OUTPUT.TXT "Impossible". В противном случае следует вывести количество отсеков в кратчайшем пути побега.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4 5<br>
2 1<br>
0 0 0 0 0<br>
0 1 0 0 0<br>
0 0 0 0 0<br>
0 0 0 0 0<br>
2<br>
1 2 1 4<br>
3 1 1 4<br>
1<br> 
2 4
</td><td valign=top>4</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=241" target="_blank">Задача №241</a><br>Математическое моделирование<br>Праздники</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 39%)</i></center>
<p class=text>
Парламент некоторой страны принял новый закон о праздничных днях. Согласно этому закону первые K дней года, а также 23 февраля и 8 марта объявляются праздничными, а все остальные праздники отменяются. При этом все выходные (суббота и воскресенье), попавшие на праздничные дни, переносятся на следующие за этими праздниками рабочие дни. 
</p>
<p class=text>
В зависимости от того, на какой день недели приходится 1 января, количество нерабочих дней, которые идут подряд, может меняться. 
</p>
<p class=text>
Требуется определить, какое наибольшее количество нерабочих дней может идти подряд. 
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записано единственное число K (1<=K<=50).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT требуется записать единственное число — наибольшее количество нерабочих дней, идущих подряд.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>2</td><td valign=top>4</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>10</td><td valign=top>16</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=244" target="_blank">Задача №244</a><br>Сортировка и последовательности<br>Билетики</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 37%)</i></center>
<p class=text>
В процессе установки турникетов в автобусах, разработчики столкнулись с проблемой проверки подлинности билета. Для ее решения был придуман следующий способ защиты от подделок.
</p>
<p class=text>
Информация, записанная на билете, кодируется K числами (0 или 1). При этом непосредственно на билете записывается последовательность из N чисел (N>=K) так, что числа, записанные на расстоянии K, совпадают. Таким образом, для проверки подлинности билета достаточно проверить, что все числа на расстоянии K совпадают. К сожалению, при считывании информации с билета иногда могут происходить ошибки — считается, что одно из чисел может исказиться (то есть 0 замениться на 1, или 1 — на 0). Такой билет все равно нужно считать подлинным. Во всех остальных случаях билет считается поддельным.
</p>
<p class=text>
Напишите программу, которая по информации, считанной с билета, устанавливает его подлинность, и указывает на то, при считывании какого из чисел могла произойти ошибка.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла  INPUT.TXT записаны числа N и K (1<=N<=50000, 1<=K<=1000, K<=N). Во второй строке записано N чисел, каждое из которых является 0 или 1 — информация, считанная с билета.
</p>

<h2>Выходные данные</h2>

<p class=text>
В первой строке выходного файла OUTPUT.TXT должно быть записано OK, если билет подлинный и FAIL, если поддельный. В случае, если билет подлинный, во второй строке выведите 0, если все числа были считаны правильно, или номер числа, в котором при считывании произошла ошибка. Если возможных искаженных номеров несколько, выведите наименьший из них.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>6 2<br>
1 0 1 0 1 0
</td><td valign=top>OK<br>
0
</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>8 5<br>
0 1 1 0 1 0 0 1
</td><td valign=top>OK<br>
2
</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>6 2<br>
1 1 1 0 0 0
</td><td valign=top>FAIL</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=245" target="_blank">Задача №245</a><br>Сортировка и последовательности<br>Сплоченная команда</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 42%)</i></center>
<p class=text>
Как показывает опыт, для создания успешной футбольной команды важны не только умения отдельных её участников, но и сплочённость команды в целом. Характеристикой умения игрока является показатель его профессионализма (ПП). Команда является сплочённой, если ПП каждого из игроков не превосходит суммы ПП любых двух других (в частности, любая команда из одного или двух игроков является сплоченной). Перед тренерским составом молодёжной сборной была поставлена задача сформировать сплоченную сборную с максимальной суммой ПП игроков (ограничений на количество игроков в команде нет).
</p>
<p class=text>
Ваша задача состоит в том, чтобы помочь сделать правильный выбор из N человек, для каждого из которых известен его ПП.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT записано целое число N (0<=N<=30000). В последующих N строках записано по одному целому числу Pi (0<=Pi<=60000), представляющему собой ПП соответствующего игрока.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите максимально возможную сумму ПП игроков сплоченной команды.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4<br>
1<br>
5<br>
3<br>
3
</td><td valign=top>11</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>5<br>
100<br>
20<br>
20<br>
20<br>
20
</td><td valign=top>120</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=253" target="_blank">Задача №253</a><br>Математическое моделирование<br>Часы с боем</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 25%)</i></center>
<p class=text>
Старинные часы бьют каждые полчаса. Причем в начале каждого часа они бьют столько раз, сколько сейчас часов (по 1 разу – в час ночи и в час дня, по 2 раза – в два часа ночи в два часа дня и т.д., в полночь и в полдень они бьют, соответственно, по 12 раз). И еще 1 раз они бьют в середине каждого часа.
</p>
<p class=text>
Дан промежуток времени (известно, что прошло строго меньше 24 часов). Напишите программу, определяющую, сколько ударов сделали часы за это время.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT записан начальный момент времени, во второй строке — конечный. Моменты времени задаются двумя целыми числами, разделяющимися пробелом. Первое число задает часы (от 0 до 23), второе — минуты (от 1 до 59, при этом оно не равно 30).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно число — сколько ударов сделали часы за этот отрезок времени.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5 20<br>10 25</td><td valign=top>45</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>10 25<br>5 20</td><td valign=top>135</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>5 2<br>5 21</td><td valign=top>0</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=256" target="_blank">Задача №256</a><br>Математическое моделирование<br>Гексагон</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 38%)</i></center>
<p class=text>
<img src="acmp_files/image00X.gif" align=right hspace=10 vspace=10>
Поле для игры в новую игру "Гексагон" разбито на шестиугольники (см. рисунок). Игрок, стартуя из некоторого начального шестиугольника, сделал несколько ходов. Каждый ход заключается в перемещении фишки в соседний шестиугольник (имеющий с тем, где находилась фишка до начала хода, общую сторону) — тем самым, ход делается вдоль одного из направлений X, Y или Z (см. рисунок). Игрок записал все свои ходы, причем если фишка двигалась вдоль какого-либо направления несколько раз подряд, то в записи это обозначается указанием направления и количества ходов, которые были сделаны.
</p>
<p class=text>
Напишите программу, которая найдет кратчайший (по количеству совершаемых ходов) путь в начальную клетку из той, где фишка оказалась после ходов игрока.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT записано число N — количество строк в записи перемещений фишки (1<=N<=100). Далее идет N строк с записью ходов: в каждой строке записана сначала большая буква X, Y или Z, задающая направление, затем пробел, и число, задающее количество ходов в данном направлении (число может быть и отрицательным, если игрок перемещал фишку параллельно оси, но в направлении, противоположном направлению оси). Все числа по модулю не превышают 200.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите длину кратчайшего пути обратно в начальную клетку.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4<br>Z -2<br>Y 3<br>Z 3<br>X -1</td><td valign=top>4</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=259" target="_blank">Задача №259</a><br>Динамическое программирование<br>A-функция от строчки</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 59%)</i></center>
<p class=text>
Дана строка S, состоящая из N символов. Определим функцию A(i) от первых i символов этой строки следующим образом:
</p>
<p class=text>
A(i) = максимально возможному k, что равны следующие строки: 
</p>
<p class=text>
S[1]+S[2]+S[3]+…+S[k]
</p>
<p class=text>
S[i]+S[i–1]+S[i–2]+…+S[i–k+1]
</p>
<p class=text>
где S[i] – i-ый символ строки S, а знак + означает, что символы записываются в строчку непосредственно друг за другом.
</p>
<p class=text>
Напишите программу, которая вычислит значения функции A для заданной строчки для всех возможных значений i от 1 до N.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT записано одно число N. 1<=N<=200000. Во второй строке записана строка длиной N символов, состоящая только из больших и/или маленьких латинских букв.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите N чисел — значения функции A(1), A(2), … A(N).
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5<br>aabaa</td><td valign=top>1 2 0 1 5</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=262" target="_blank">Задача №262</a><br>Структуры данных<br>Коммерческий калькулятор</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 52%)</i></center>
<p class=text>
Фирма OISAC выпустила новую версию калькулятора. Этот калькулятор берет с пользователя деньги за совершаемые арифметические операции. Стоимость каждой операции в долларах равна 5% от числа, которое является результатом операции.
</p>
<p class=text>
На этом калькуляторе требуется вычислить сумму N натуральных чисел (числа известны). Нетрудно заметить, что от того, в каком порядке мы будем складывать эти числа, иногда зависит, в какую сумму денег нам обойдется вычисление суммы чисел (тем самым, оказывается нарушен классический принцип «от перестановки мест слагаемых сумма не меняется» <img src="acmp_files/sm100000.gif"> ).
</p>
<p class=text>
Например, пусть нам нужно сложить числа 10, 11, 12 и 13. Тогда если мы сначала сложим 10 и 11 (это обойдется нам в $1.05), потом результат — с 12 ($1.65), и затем — с 13 ($2.3), то всего мы заплатим $5, если же сначала отдельно сложить 10 и 11 ($1.05), потом — 12 и 13 ($1.25) и, наконец, сложить между собой два полученных числа ($2.3), то в итоге мы заплатим лишь $4.6.
</p>
<p class=text>
Напишите программу, которая будет определять, за какую минимальную сумму денег можно найти сумму данных N чисел.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записано число N (2<=N<=100000). Далее идет N натуральных чисел, которые нужно сложить, каждое из них не превышает 10000.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите, сколько денег нам потребуется на нахождение суммы этих N чисел. Результат должен быть выведен с двумя знаками после десятичной точки без лидирующих нулей.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4<br>10 11 12 13</td><td valign=top>4.60</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>2<br>1 1</td><td valign=top>0.10</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=265" target="_blank">Задача №265</a><br>Двумерные массивы<br>Шахматная доска</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 36%)</i></center>
<p class=text>
<img src="acmp_files/image00Y.gif" align=right alt="Шахматная доска">
Из шахматной доски по границам клеток выпилили связную (не распадающуюся на части) фигуру без дыр. Требуется определить ее периметр.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT сначала записано число N (1 &#8804; N &#8804; 64) – количество выпиленных клеток. В следующих N строках указаны координаты выпиленных клеток, разделенные пробелом (номер строки и столбца – числа от 1 до 8). Каждая выпиленная клетка указывается один раз.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно число – периметр выпиленной фигуры (сторона клетки равна единице).
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3<br>1 1<br>1 2<br>2 1</td><td valign=top>8</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>1<br>8 8</td><td valign=top>4</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=268" target="_blank">Задача №268</a><br>Динамическое программирование<br>Почти палиндром</h1><center><i>(Время: 5 сек. Память: 64 Мб Сложность: 55%)</i></center>
<p class=text>
Слово называется палиндромом, если его первая буква совпадает с последней, вторая – с предпоследней и т.д. Например: "abba", "madam", "x".
</p>
<p class=text>
Для заданного числа K слово называется  почти палиндромом, если в нем можно изменить не более K любых букв так, чтобы получился палиндром. Например, при K = 2 слова "r<u>ea</u>ctor", "kolo<u>b</u>ok", "madam" являются почти палиндромами (подчеркнуты буквы, заменой которых можно получить палиндром).
</p>
<p class=text>
Подсловом данного слова являются все слова, получающиеся путем вычеркивания из данного нескольких (возможно, одной или нуля) первых букв и нескольких последних. Например, подсловами слова "cat" являются слова "c", "a", "t", "ca", "at" и само слово "cat" (а "ct" подсловом слова "cat" не является).
</p>
<p class=text>
Требуется для данного числа K определить, сколько подслов данного слова S являются почти палиндромами.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT вводятся два натуральных числа: N (1 &#8804; N &#8804;  5 000) – длина слова и K (0 &#8804; K &#8804;  N). Во второй строке записано слово S, состоящее из N строчных латинских букв.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT требуется вывести одно число – количество подслов слова S, являющихся почти палиндромами (для данного K).
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5 1<br>abcde</td><td valign=top>12</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>3 3<br>aaa</td><td valign=top>6</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=269" target="_blank">Задача №269</a><br>Жадный алгоритм<br>Тормозной механизм</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 40%)</i></center>
<p class=text>
Исследовательская лаборатория одной известной автомобильной компании разработала специальный механизм, позволяющий повысить эффективность тормозов путем равномерной нагрузки деталей, используемых в тормозах.
</p>
<p class=text>
Одним из основных компонентов механизма являются 2 прокладки, которые в процессе взаимодействия накладываются друг на друга. Каждая прокладка длины n разделена на n разделов, каждый из которых имеет высоту h или 2h. Таким образом, прокладки имеют зубчатую форму без закруглений.
</p>
<center><img src="acmp_files/image00Z.gif" alt="Тормозной механизм"></center>
<p class=text>
В процессе взаимодействия прокладок важно, чтобы они накладывались друг на друга и при этом общая длина получившегося соединения была наименьшей.
</p>
<center><img src="acmp_files/image010.gif" alt="Тормозной механизм"></center>
<p class=text>
По заданной конфигурации прокладок требуется определить наименьшую длину их возможного соединения, при котором общая высота конструкции не превышает значения 3h. При этом вращать прокладки и удалять зубцы запрещено.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит 2 строки с описанием конфигурации 2х прокладок. Каждая конфигурация определяется последовательностью цифр 1 и 2, соответствующих высоте каждого зубца прокладки. Каждая из строк не пуста и имеет длину, не превышающую 100.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT требуется вывести наименьшую длину конструкции из заданных прокладок.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>2112112112<br>
2212112
</td><td valign=top>10</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>12121212<br>
21212121
</td><td valign=top>8</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>2211221122<br>
21212
</td><td valign=top>15</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=273" target="_blank">Задача №273</a><br>Рекурсия, перебор<br>Вычеркивание</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 28%)</i></center>
<p class=text>
Задано натуральное число N. Требуется написать программу, вычисляющую количество различных трехзначных чисел получающихся из N вычеркиванием цифр из его десятичной записи.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной текстовый файл INPUT.TXT содержит одно натуральное число N (1 <= N <= 10<sup>100</sup>).
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной текстовый файл OUTPUT.TXT должен содержать одно натуральное число - найденное количество трехзначных чисел.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>12</td><td valign=top>0</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>111111111110011111111</td><td valign=top>4</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=276" target="_blank">Задача №276</a><br>Простая математика<br>Разбиение на части</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 21%)</i></center>
<p class=text>
Необходимо представить целое число N в виде суммы M примерно равных целых чисел. Будем считать, что числа примерно равны, если они отличаются друг от друга не более чем на единицу.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записаны два натуральных числа N и M через пробел, каждое из которых не превосходит 30000.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать M примерно равных целых чисел, сумма которых должна быть равна N. Все числа следует вывести в одной строке в порядке неубывания через пробел.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>13 4</td><td valign=top>3 3 3 4</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>72 8</td><td valign=top>9 9 9 9 9 9 9 9</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=277" target="_blank">Задача №277</a><br>Задачи для начинающих<br>Школьная алгебра</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 27%)</i></center>
<p class=text>
Трёхчлен a + bx + сy от двух переменных x и y однозначно определяется коэффициентами a, b и c. Написать программу, которая по заданным a, b и c выводит соответствующий трёхчлен, записанный с использованием алгебраических соглашений:
</p>
<ul>
<li>коэффициент при члене, содержащем переменную, опускается, если его модуль равен единице;</li>
<li>член, коэффициент при котором равен нулю, опускается (кроме случая, когда все коэффициенты равны нулю, тогда трехчлен состоит из одной цифры 0);</li>
<li>знак "+" опускается, если он предшествует отрицательному коэффициенту;</li>
<li>знак "+" опускается, если он стоит в начале выражения (так называемый унарный плюс);</li>
<li>знак умножения между коэффициентом и переменной опускается.</li>
</ul>
<p class=text>
При этом запрещено менять местами члены.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT через пробел записаны целые коэффициенты a, b и с, каждое из которых не превосходит 30000 по абсолютной величине.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать трехчлен, записанный с использованием алгебраических соглашений.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>0 2 -1</td><td valign=top>2x-y</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>3 0 -2</td><td valign=top>3-2y</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=282" target="_blank">Задача №282</a><br>Динамическое программирование<br>Прямоугольники</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 47%)</i></center>
<p class=text>
Найдите количество невырожденных прямоугольников со сторонами, параллельными осям координат, вершины которых лежат в точках с целыми координатами внутри или на границе прямоугольника, противоположные углы которого находятся в точках (0, 0) и (W, Н).
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит два натуральных числа W и Н, не превосходящих 1000.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите ответ на задачу.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1 1</td><td valign=top>1</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>2 1</td><td valign=top>3</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=285" target="_blank">Задача №285</a><br>Математическое моделирование<br>Костер</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 34%)</i></center>
<p class=text>
Во время военного похода на морского пехотинца Джо было возложено ответственное задание – развести костёр и поддерживать в нём огонь ровно m минут. Для этого у Джо есть спички и n поленьев, причём Джо известно точное время сгорания каждого полена.
</p>
<p class=text>
Джо разжигает огонь в момент времени t = 0 и сразу бросает в него одно или несколько поленьев. Затем он должен подбрасывать в огонь новые поленья, не позволяя костру угаснуть (т.е. если последнее полено в костре догорает в момент времени t, то новое полено может быть брошено в огонь не позднее t – 1). Поленья, брошенные в огонь, загораются мгновенно. Одновременно Джо может бросить в огонь любое количество поленьев. Джо должен бросить в огонь все n поленьев.
</p>
<p class=text>
Помогите Джо определить, сможет ли он подбрасывать поленья в огонь таким образом, чтобы костер горел ровно m минут.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит целые числа n и m 
(1 &#8804; n &#8804; 100, 1 &#8804; m &#8804; 1000) – количество поленьев и время, в течение которого Джо должен поддерживать огонь в костре. Вторая строка входного файла содержит n целых чисел a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub>, где a<sub>i</sub> (2 &#8804; a<sub>i</sub> &#8804; 1000) – время сгорания i-ого полена в минутах.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите строку «yes», если Джо сможет поддерживать огонь в костре ровно m минут, и строку «no» в противном случае.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3 7<br>2 3 5</td><td valign=top>yes</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>2 5<br>3 9</td><td valign=top>no</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>4 10<br>3 3 3 3</td><td valign=top>no</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=288" target="_blank">Задача №288</a><br>Разбор строк<br>Комментарии</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 52%)</i></center>
<p class=text>
Программист Билл недавно узнал, что, чем больше комментариев содержит исходный текст, тем он лучше. Теперь он хочет проверить, насколько хороши его собственные программы, написанные на языке Pascal. Но поскольку самому считать комментарии очень утомительно, Билл попросил Вас сделать эту работу за него.
</p>
<p class=text>
Исходный текст может содержать комментарии трёх типов:
</p>
<ol>
<li> // ... </li>
<li> { ... } </li>
<li> (* ... *) </li>
</ol>
<p class=text>
Комментарий первого типа начинается составным символом  // и продолжается до конца строки. Комментарий второго типа начинается символом { и заканчивается символом }. Он может размещаться в нескольких строках. Комментарий третьего типа начинается составным символом (* и заканчивается составным символом *). Он также может размещаться в нескольких строках.
</p>
<p class=text>
Комментарии не могут быть вложены друг в друга, так что запись вида {…//…(*…*)…} является одним комментарием второго типа. Комментарии не могут размещаться внутри символьных строк, так что запись ‘…(**)…{}…’ не содержит ни одного комментария.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записан исходный текст программы на языке Pascal. Размер текста не превосходит 16 Кб.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно число – количество комментариев в исходном тексте программы.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>{ my first program }<br>
begin <br>
  writeln('hello world');<br>
end.
</td><td valign=top>1</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>const comments = '{}(**)//';<br>
begin<br>
  writeln(comments);<br>
end.
</td><td valign=top>0</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>// comment<br>
begin<br>
  writeln('{ string }');<br>
  { while (true) do; }<br>
end.
</td><td valign=top>2</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=289" target="_blank">Задача №289</a><br>Целочисленная арифметика<br>Делители</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 76%)</i></center>
<p class=text>
По заданному количеству делителей числа требуется найти само это число.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записано количество делителей D некоторого натурального числа N (1 <= D <= 5000).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT запишите число N. Если решений несколько, выведите наименьшее из них. Если решения нет, или наименьшее из решений превосходит 10<sup>15</sup>+1, запишите в файл число 0.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3</td><td valign=top>4</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>4</td><td valign=top>6</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>12</td><td valign=top>60</td></tr>
<tr class=white2><td align=center>4</td><td valign=top>60</td><td valign=top>5040</td></tr>
<tr class=white2><td align=center>5</td><td valign=top>4911</td><td valign=top>0</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=293" target="_blank">Задача №293</a><br>Задачи для начинающих<br>Налоги</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 20%)</i></center>
<p class=text>
В некотором государстве действует N фирм, конкурирующих между собой. У каждой фирмы есть некоторая прибыль в год, равная V[i] американских рублей.  У царя есть любимые фирмы, а есть нелюбимые. Соответственно, налог для всех фирм разный и назначается царем в индивидуальном порядке. Налог на i-ую фирму равен p[i] процентов.
</p>
<p class=text>
Собиратели статистики решили посчитать, с какой фирмы в государственную казну идет наибольший доход (в казну идут все налоги). К сожалению, они не учили в детстве ни математику, ни информатику (так что учитесь, дети!), и их задача резко осложняется.
</p>
<p class=text>
Помогите им в этой нелегкой задаче.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT сначала записано число N - число фирм (0 < N &#8804; 100). Далее идет N целых неотрицательных чисел, не превышающих 154 - доходы фирм, а затем еще N целых чисел от 0 до 100 - налоги фирм в процентах.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно число - номер фирмы, от которой государство получает наибольший налог. Если таких фирм несколько, выведите фирму с наименьшим номером.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1<br>
1<br>
1
</td><td valign=top>1</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>2<br>
1 2<br>
3 2
</td><td valign=top>2</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>3<br>
100 1 50<br>
0 100 3
</td><td valign=top>3</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=296" target="_blank">Задача №296</a><br>Целочисленная арифметика<br>Лиса Алиса и кот Базилио</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 22%)</i></center>
<p class=text>
Лиса Алиса и кот Базилио вырастили денежное дерево. И выросли на нем трехрублевые и пятирублевые золотые монеты. Лиса Алиса себе взяла трехрублевые монеты, а коту Базилио отдала пятирублевые монеты. Посетовав на свою скромность, она предложила впредь рассчитываться за покупки вместе, деньги давать без сдачи и минимальным числом монет. Известно, что они сделали покупку стоимостью N рублей, при этом они рассчитались без сдачи.
</p>
<p class=text>
Вам следует написать программу, которая определяет: сколько монет внес кот Базилио, и сколько монет внесла лиса Алиса.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записано одно натуральное число N – стоимость покупки в рублях (7 < N < 1000).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной OUTPUT.TXT выведите два целых числа через пробел: число монет, которые отдал кот Базилио и число монет, которые отдала лиса Алиса.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>8</td><td valign=top>1 1</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>11</td><td valign=top>1 2</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>15</td><td valign=top>3 0</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=298" target="_blank">Задача №298</a><br>Геометрия<br>Стрелок</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 28%)</i></center>
<p class=text>
Стрелок стоит в центре стрельбища. На стрельбище несколько мишеней. Пули стрелка пробивают мишени насквозь, не теряя скорости, и могут поразить все мишени, стоящие на одной линии.
</p>
<p class=text>
Будем считать, что стрелок стоит в центре начала координат. Известны координаты всех мишеней (для простоты будем считать их геометрические размеры пренебрежимо малыми). Определите минимальное число выстрелов, необходимых стрелку для поражения всех мишеней.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит натуральное число N – количество мишеней (N &#8804; 20). Далее идет N строк с информацией о координатах каждой мишени, при этом в каждой строке указывается два целых числа через пробел X и Y (-10 <= X, Y <= 10).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно целое число – наименьшее количество выстрелов, необходимых для поражения всех мишеней.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4<br>
2 2<br>
-2 2<br>
-2 -2<br>
2 -2
</td><td valign=top>4</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>6<br>
2 2<br>
-2 2<br>
-2 -2<br>
2 -2<br>
1 1<br>
-1 3
</td><td valign=top>5</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=299" target="_blank">Задача №299</a><br>Комбинаторика<br>Волейбол</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 56%)</i></center>
<p class=text>
Партия в волейболе выигрывается командой, которая первой набирает 25 очков с преимуществом минимум в два очка. В случае равного счета 24-24, игра продолжается до достижения преимущества в 2 очка (26-24; 27-25).
</p>
<p class=text>
Две сыгранные партии, закончившиеся с одинаковым счетом, будем считать разными, если строки, в которых выписан порядок набора очков командами, не равны.
</p>
<p class=text>
Комитет по проведению соревнований по волейболу заинтересовался, количеством различных партий, заканчивающихся счетом 25:23. Их оказалось 16123801841550.
</p>
<p class=text>
Определить, сколько существует различных партий, заканчивающихся заданным счетом.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT указан конечный счет в партии (то есть такой, при котором победа в партии отдаётся одной из команд). Также известно, что ни одна из команд не набрала более 40 очков.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите количество всевозможных партий, которые заканчиваются данным счетом.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>25:12</td><td valign=top>1251677700</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>20:25</td><td valign=top>1761039350070</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>25:23</td><td valign=top>16123801841550</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=300" target="_blank">Задача №300</a><br>Математическое моделирование<br>Радар</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 38%)</i></center>
<p class=text>
Радар подвергается атаке из четырех точек, являющихся вершинами квадрата, в центре которого и стоит радар. Радар укомплектован специальным щитом, позволяющим блокировать удар, но щит может защищать радар только с одной из четырех сторон, и поворот щита требует времени. Изначально щит направлен в сторону той вершины, откуда будет первая атака. Известно время запуска и скорость ракет, ведущих атаку.
</p>
<p class=text>
Требуется определить, сколько ракет удастся отбить.
</p>

<h2>Входные данные</h2>

<p class=text>
Первые четыре строки входного файла INPUT.TXT содержат время запуска в секундах Tx  (0 <= Tx <= 1000) и скорость полета в метрах в секундуVx x-ой ракеты (0 < Vx <= 1000). Ракеты перечисляются по часовой стрелке Далее задано время в секундах, необходимое для поворота щита на 90 градусов Tpov (0 < Tpov <= 1000) и половина диагонали квадрата D – расстояние в метрах, предстоящее каждой из ракет (0 < D < 1000). Все числа – целые.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите «ALIVE», если радар уцелеет при всех выстрелах, в противном случае следует вывести число успешно отраженных ракет.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>0 10<br>
5 10<br>
10 10<br>
15 10<br>
5 100
</td><td valign=top>ALIVE</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>0 10<br>
10 10<br>
5 10<br>
15 10<br>
5 100
</td><td valign=top>1</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=301" target="_blank">Задача №301</a><br>Математическое моделирование<br>Код</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 46%)</i></center>
<p class=text>
В наши дни в космосе находятся сотни спутников, и все они обмениваются данными. При этом система распознавания сигналов работает по схеме «Свой-Чужой». Один из спутников отправляет запрос другому спутнику в формате двух целых чисел, а второй спутник отвечает первому так же двумя целыми числами. Первые два числа первого спутника представляют собой сумму цифр и количество цифр тех двух чисел, которыми должен ответить второй спутник. При этом в качестве ответа должны получиться числа, представляющие наибольшее и наименьшее возможные значения, которые могут быть сформированы по описанному выше методу.
</p>
<p class=text>
Вам предстоит написать программу, формирующую ответ для второго спутника по известным числам, полученным от первого спутника.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записаны 2 натуральных числа S и K, представляющих сумму и количество цифр соответственно (K <=100). При этом гарантируется, что возможно составить хотя бы одно K-значное число, сумма цифр которого равна S.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите два числа – ответ второго спутника. При этом следует помнить, что все числа не имеют лидирующих нулей.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1 3</td><td valign=top>100 100</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>2 3</td><td valign=top>200 101</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>3 4</td><td valign=top>3000 1002</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=302" target="_blank">Задача №302</a><br>Теория графов<br>Города</h1><center><i>(Время: 5 сек. Память: 16 Мб Сложность: 65%)</i></center>
<p class=text>
Для исследования поверхности Марса ученым необходимо разработать систему оповещения, которая смогла бы передавать информацию по цепному принципу между городами, которые планируется там построить.
</p>
<p class=text>
При этом в каждом городе необходимо построить радиостанцию таким образом, чтобы была связь между всеми городами. При этом все такие станции должны передавать сигнал друг другу на равном расстоянии R. Таким образом, будет возможна передачи информации из одного города в другой только тогда, когда расстояние между ними не более R.
</p>
<p class=text>
По заданным координатам городов, в целях экономии энергии радиостанций, Вам следует определить минимальное значение R, при котором информация сможет быть доставлена из любого города во все остальные.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT сначала записано натуральное число N – количество городов (N &#8804; 1000). Далее идет N строк, содержащих вещественные координаты (Xi, Yi) соответствующего города. (-10000 <= Xi, Yi <= 10000). Предполагается, что все города находятся на плоскости.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно вещественное число – наименьший радиус радиостанций. Число следует вывести с двумя знаками после запятой, без лидирующих нулей, в формате, приведенном в примерах.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4<br>
0 0<br>
2 0<br>
0 2<br>
2 3
</td><td valign=top>2.24</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>3<br>
2 0<br>
0 2<br>
4 2
</td><td valign=top>2.83</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=304" target="_blank">Задача №304</a><br>Комбинаторика<br>Волейбол - 2</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 68%)</i></center>
<p class=text>
Партия в волейболе, выигрывается командой, которая первой набирает 25 очков с преимуществом минимум в два очка. В случае равного счета 24-24, игра продолжается до достижения преимущества в 2 очка (26-24; 27-25). Исключение составляет лишь пятая партия (когда счет по партиям 2:2), в этом случае счет ведется по такому же принципу, но до 15 очков, а в случае счета 14:14 игра продолжается так же до достижения преимущества в 2 очка.
</p>
<p class=text>
Две сыгранные партии, закончившиеся с одинаковым счетом, будем считать разными, если строки, в которые вписан порядок набора очков командами, не равны.
</p>
<p class=text>
Комитет по проведению соревнований по волейболу заинтересовало, сколько различных партий может быть, заканчивающихся со счетом 25:23, оказывается 16123801841550, далее им стало интересно, сколько же существует различных матчей в которых первая команда победила в 3 партиях со счетом 25:23 25:20 25:18, оказывается 10043105786927107686166271970998925000.
</p>
<p class=text>
Определить, сколько существует различных матчей, заканчивающихся заданным счетом. Два матча закончившиеся одинаковым количеством партий с одинаковым счетом, считаются различными, если есть различно сыгранные партии.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT сначала записано число N - количество партий в матче.  Далее следует N пар чисел, описывающих счет в каждой партии. При этом результаты партий разделяются пробелом, а счет в каждой партии отделяется двоеточием. Гарантируется, что счет в каждой партии соответствует возможному, согласно правилам волейбола, и ни в какой партии, ни одна из команд не набирает более 40 очков.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите количество различных матчей, которые могут оканчиваться данным счетом.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3 25:23 25:20 25:18</td><td valign=top>10043105786927107686166271970998925000</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>4 25:23 20:25 26:24 25:18</td><td valign=top>323866095164273521651645790930981230216140667500000</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=306" target="_blank">Задача №306</a><br>Математическое моделирование<br>Танец</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 45%)</i></center>
<p class=text>
На городском празднике танцуют девушки в красных и синих юбках. Они двигаются цепочкой и выполняют сложный рисунок танца. Из цепочки девушки выделяются по одной. Первая становится на левом краю сцены, вторая уходит в конец исходной цепочки, третья – на левый край сцены (справа от первой), четвертая – в конец исходной цепочки и т.д., пока все девушки не выстроятся на краю сцены. 
</p>
<p class=text>
Помогите постановщику танца определить, каким должно быть исходное расположение девушек, если на краю сцены, они выстроены так, что их юбки чередуются по цвету (слева направо): синяя, красная, синяя, красная и т.д.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записано натуральное число N – количество танцующих девушек (N <= 1000).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите строку, содержащую цепочку из N символов, состоящую из заглавных букв B и R, соответствующих цветам юбок – синему и красному.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>2</td><td valign=top>BR</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>3</td><td valign=top>BBR</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>4</td><td valign=top>BBRR</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=310" target="_blank">Задача №310</a><br>Простая математика<br>Рамка из клеток</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 33%)</i></center>
<p class=text>
Прямоугольник состоит из X&#215;Y квадратных клеток одинакового размера. Из него вырезан прямоугольник размером (X-2)&#215;(Y-2) так, что осталась рамка шириной в одну клетку. Определить, можно ли покрыть всю рамку плитками размером A&#215;1. Запас плиток неограничен, плитки не накладываются одна на другую и за пределы рамки не выходят.
</p>
<p class=text>
Требуется написать программу, которая решает эту задачу.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной текстовый файл INPUT.TXT содержит в первой строке натуральное число K – количество тестов (1 &#8804; K &#8804; 10). В следующих K строках записаны по три натуральных числа: X, Y - размеры рамки, А – размер плитки (3 &#8804; X, Y &#8804; 2&#215;10<sup>9</sup>, 1 &#8804; A &#8804; 2&#215;10<sup>9</sup>). Числа разделены пробелами.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной текстовый файл OUTPUT.TXT должен содержать одну строку из K символов 0 или 1 (1 - если покрытие существует, 0 - иначе).
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1<br>3 3 1</td><td valign=top>1</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>2<br>3 3 2<br>3 3 3</td><td valign=top>10</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=314" target="_blank">Задача №314</a><br>Сортировка и последовательности<br>Лексикографический порядок чисел</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 31%)</i></center>
<p class=text>
Натуральные числа от 1 до N упорядочены лексикографически. Например, для N=25 результат этого упорядочения будет таким: 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 2, 20, 21, 22, 23, 24, 25, 3, 4, 5, 6, 7, 8, 9.
</p>
<p class=text>
Требуется написать программу, которая определит, на каком месте оказалось число K.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит два натуральных числа N и K, записанных через пробел (1 &#8804; K &#8804; N &#8804; 10<sup>4</sup>).
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать одно натуральное число – номер места, на котором оказалось число K.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>25 17</td><td valign=top>9</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=316" target="_blank">Задача №316</a><br>Математическое моделирование<br>Телеграфный перевод</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 29%)</i></center>
<p class=text>
Телеграфный перевод оплачивается по 7 рублей за каждую полную и неполную сотню рублей. Например, за перевод 123 рублей надо заплатить 14 рублей – 7 рублей за полную сотню и 7 рублей за 23 рубля – неполную сотню. Некто попросил переслать ему зарплату в N рублей, взяв деньги за перевод из этой зарплаты.
</p>
<p class=text>
Требуется написать программу, которая найдет, какую максимальную сумму некто сможет получить, и сколько денег будет стоить перевод.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит одно натуральное число N (8 &#8804; N &#8804; 6&#8729;10<sup>4</sup>).
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать два натуральных числа – максимальную сумму и стоимость перевода. Числа разделить одним пробелом.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>10</td><td valign=top>3 7</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>108</td><td valign=top>100 7</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=318" target="_blank">Задача №318</a><br>Целочисленная арифметика<br>Следующее число</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 36%)</i></center>
<p class=text>
Задано натуральное число N.
</p>
<p class=text>
Требуется написать программу, которая найдет следующее за ним число, в двоичном разложении которого столько же единиц, сколько в двоичном разложении числа N.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит одно натуральное число N (N &#8804; 2<sup>30</sup>).
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать ответ на задачу.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1</td><td valign=top>2</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>2</td><td valign=top>4</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>3</td><td valign=top>5</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=319" target="_blank">Задача №319</a><br>Геометрия<br>Точки отрезка</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 42%)</i></center>
<p class=text>
Концы отрезка на плоскости имеют целочисленные координаты.
</p>
<p class=text>
Требуется написать программу, которая вычислит, сколько всего точек с целочисленными координатами принадлежат этому отрезку.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной  файл INPUT.TXT содержит четыре числа – координаты концов отрезка (x1, y1) и (x2, y2). Каждая из координат не превышает по абсолютной величине значения 10<sup>9</sup>.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать одно число – количество точек на заданном отрезке, имеющих целочисленные координаты.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1 1 2 2</td><td valign=top>2</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>0 0 -2 -2</td><td valign=top>3</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>1 1 1 10</td><td valign=top>10</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=320" target="_blank">Задача №320</a><br>Динамическое программирование<br>Коридор</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 38%)</i></center>
<p class=text>
Прямоугольный коридор длиной N метров и шириной M метров решили застелить N прямоугольными плитками шириной 1 метр и длиной M метров, таким образом, чтобы не было не застеленной поверхности.
</p>
<p class=text>
Требуется написать программу, которая найдет количество способов это сделать. Например, для коридора с размерами 6 на 4 существует четыре способа застелить плитками 1 на 4.
</p>

<center><img src="acmp_files/image011.gif" alt="Коридор"></center>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит два целых числа – M (длина плитки и ширина коридора) и N (длина коридора). Для этих чисел верны неравенства 2 &#8804; M &#8804; N &#8804; 50.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать одно число – количество способов.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4 6</td><td valign=top>4</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>2 2</td><td valign=top>2</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=321" target="_blank">Задача №321</a><br>Целочисленная арифметика<br>Разные цифры</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 32%)</i></center>
<p class=text>
Требуется написать программу, определяющую, в каких системах счисления с основаниями от 2 до 36 это число не содержит одинаковых цифр.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит одно целое число N (1 &#8804; N &#8804; 10<sup>9</sup>), записанное в десятичной системе счисления.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать основания систем счисления в порядке возрастания, разделенные одним пробелом.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>100</td><td valign=top>11 12 13 14 15 16 17 18 20 21 22 23 25 26 27 28 29 30 31 32 33 34 35 36</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=326" target="_blank">Задача №326</a><br>Сортировка и последовательности<br>Преобразование последовательности - 2</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 29%)</i></center>
<p class=text>
Задана последовательность, содержащая n целых чисел. Необходимо найти число, которое встречается в этой последовательности наибольшее количество раз, а если таких чисел несколько, то найти минимальное из них, и после этого переместить все такие числа в конец заданной последовательности. Порядок расположения остальных чисел должен остаться без изменения.
</p>
<p class=text>
Например, последовательность 1, 2, 3, 2, 3, 1, 2 после преобразования должна превратиться в последовательность 1, 3, 3, 1, 2, 2, 2.
</p>
<p class=text>
Требуется написать программу, которая решает данную задачу.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит число n — количество чисел во входной последовательности (3 &#8804; n &#8804; 100). Следующая строка содержит входную последовательность, состоящую из n целых чисел, не превышающих по модулю 100. Все числа в строке разделены пробелом.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выводится последовательность чисел, которая получается в результате названного преобразования. Все числа в последовательности должны быть разделены пробелом.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>7<br>1 2 3 2 3 1 2</td><td valign=top>1 3 3 1 2 2 2</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=329" target="_blank">Задача №329</a><br>Динамическое программирование<br>Лесенка-2</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 37%)</i></center>
<p class=text>
Вова стоит перед лесенкой из N ступеней. На каждой из ступеней написаны произвольные целые числа. Первым шагом Вова может перейти на первую ступень или, перепрыгнув через первую, сразу оказаться на второй. Также он поступает и дальше, пока не достигнет N-ой ступени. Посчитаем сумму всех чисел, написанных на ступенях через которые прошел Вова.
</p>
<p class=text>
Требуется написать программу, которая определит оптимальный маршрут Вовы, при котором, шагая, он получит наибольшую сумму.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит в первой строке натуральное число N – количество ступеней лестницы. Во второй строке через пробел заданы числа, написанные на ступенях лестницы, начиная с первой. Количество ступеней не превышает 1000, числа, написанные на ступенях, не превосходят по модулю 1000.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать в первой строке наибольшее значение суммы. Во второй строке должны быть записаны через пробел номера ступеней по возрастанию, по которым должен шагать Вова.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3<br>1 2 1</td><td valign=top>4<br>1 2 3</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>3<br>1 -1 1</td><td valign=top>2<br>1 3</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=332" target="_blank">Задача №332</a><br>Теория графов<br>Минимальная стоимость проезда</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 40%)</i></center>
<p class=text>
На прямой ветке железной дороги расположено несколько станций. Задана стоимость проезда между любыми двумя станциями.
</p>
<p class=text>
Требуется написать программу нахождения минимальной стоимости проезда между крайними станциями. Двигаться по железной дороге можно только в одном направлении (от станции с меньшим номером до станции с большим номером.).
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит в первой строке натуральное число N, не большее 250. Всего на дороге расположено N+1 станций, пронумерованных от 0 до N. В следующих строках записано N(N+1)/2 чисел, задающих стоимости проезда между станциями: сначала стоимость проезда от станции 0 до станций 1, 2, 3, …, N, затем от станции 1 до станций 2, 3, …, N, …, от станции N-1 до станции N. Все стоимости проезда – неотрицательнные целые числа, не превосходящие 10000.</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать одно число – минимальную стоимость проезда от станции 0 до станции N с возможными пересадками.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3<br>7 10 20<br>4 8<br>2</td><td valign=top>12</td></tr>
</table>

<h2>Пояснение</h2>

<p class=text>
В приведенном примере всего 4 станции с номерами 0, 1, 2, 3. Оптимальный маршрут проходит через станции 0, 2 и 3. Его стоимость равна 10+2=12.
</p>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=339" target="_blank">Задача №339</a><br>Простая математика<br>Мероприятие</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 31%)</i></center>
<p class=text>
Мише поручили решить следующую задачу: имеется дата начала и конца некоторого мероприятия; требуется определить его длительность. Он написал программу и попросил Машу её проверить.
</p>
<p class=text>
Через некоторое время пришла Маша и расстроила Мишу: «Твоя программа работает неправильно. По-моему, ты забыл, что года бывают високосными».
</p>
<p class=text>
У Миши очень мало свободного времени и он не успевает исправить свою программу. Помогите ему.
</p>
<p class=text>
Год является високосным, тогда и только тогда, когда выполнено одно из следующих условий:
</p>
<ul>
  <li>год делится на 4, но не делится на 100;</li>
  <li>год делится на 400.</li>
</ul>
<p class=text>
Например, года 400, 404, 496, 504, 2000, 2004 являются високосными, а года 100, 200, 300, 503, 1000, 2001, 2005 - нет.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит дату начала мероприятия. Вторая строка входного файла содержит дату конца мероприятия. Гарантируется, что первая дата меньше второй. Даты заданы в формате DD.MM.YYYY.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите единственное число - длительность мероприятия (в днях).
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>01.09.2005<br>06.10.2005</td><td valign=top>36</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>01.09.0005<br>01.09.0006</td><td valign=top>366</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>01.02.2004<br>01.03.2004</td><td valign=top>30</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=341" target="_blank">Задача №341</a><br>Сортировка и последовательности<br>Числовая последовательность</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 35%)</i></center>
<p class=text>
Дима недавно поступил на работу в научно-исследовательский институт «Числовые Последовательности». Как следует из названия этого института, основным направлением его работы является проведение различных исследований в области числовых последовательностей. 
</p>
<p class=text>
Недавно руководитель отдела, где начал работать Дима, при решении одной из проблем столкнулся с весьма интересной последовательностью чисел a<sub>1</sub>, a<sub>2</sub>, …, a<sub>n</sub>, …, которая определяется следующим образом: a<sub>1</sub> = 0 и каждое последующее число a<sub>i</sub> (1 < i &#8804; n) определяется как наименьшее большее натуральное число, десятичная запись которого не содержит цифр, представленных в десятичной записи a<sub>i-1</sub>. 
</p>
<p class=text>
Требуется написать программу, которая по значению числа n вычисляет величину a<sub>n</sub>.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит натуральное число N (N<=500). 
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите искомое число a<sub>N</sub>.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1</td><td valign=top>0</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>28</td><td valign=top>911</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=343" target="_blank">Задача №343</a><br>Двумерные массивы<br>Укладка плиток</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 35%)</i></center>
<img src="acmp_files/image012.gif" align=right>
<p class=text>
Вы являетесь одним из разработчиков нового архитектурного пакета прикладных программ «CadArch». Одной из его функций является проектирование укладки половых плиток. В настоящее время вы занимаетесь программной реализацией модуля, который отвечает за укладку плиток в прямоугольных помещениях.
</p>
<p class=text>
Для простоты будем считать, что пол помещения представляет собой прямоугольник размером n на m метров, разбитый на m&#8729;n квадратиков со стороной по 1 метру. Кроме этого, будем считать, что имеется четыре типа плиток, показанные в таблице. Каждая из плиток представляет собой квадрат размером 2 на 2 метра, из которого вырезан один квадратик размером 1 на 1 метр.
</p>
<p class=text>
Проектируемый модуль должен работать следующим образом. На вход модуля подается набор команд, каждая из которых обозначает, в какое место и какого типа плитку необходимо положить. Команда обрабатывается следующим образом: если ни один из квадратиков, который должна занимать текущая плитка, не занят и плитка полностью помещается внутри прямоугольника, то плитка размещается в указанном месте, в противном случае – нет.
</p>
<p class=text>
Требуется написать программу, которая определяет, какая площадь в соответствии с заданным набором команд будет покрыта плитками.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит два числа n и m — длина и ширина пола помещения (1 &#8804; m, n &#8804; 50). Вторая строка содержит число k — количество команд, которые необходимо обработать. Каждая из последующих k строк содержит описание одной команды из набора команд. Описание команды состоит из трех чисел. Первое число определяет тип плитки (число от 1 до 4), а два других - координаты левого верхнего угла квадрата (y,x) размером 2 на 2, в который вписана соответствующая плитка (0 &#8804; x, y, k &#8804; 1000).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT необходимо вывести одно число, определяющее площадь, покрытую плитками после выполнения заданной во входном файле последовательности команд.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4 4<br>
4<br>
4 1 1<br>
2 2 2<br>
3 1 1<br>
1 3 3
</td><td valign=top>9</td></tr>
</table>


<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=344" target="_blank">Задача №344</a><br>Сортировка и последовательности<br>Ближайшие точки</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 38%)</i></center>
<p class=text>
Антон в школе начал изучать математику. Его внимание привлекло новое для него понятие числовой прямой. Антон быстро научился вычислять расстояния между двумя точками на этой прямой, задавать отрезки и интервалы на ней.
</p>
<p class=text>
Готовясь к контрольной работе, Антон столкнулся со следующей задачей: «На числовой прямой задано n точек. Необходимо найти среди них две ближайшие». Расстояние между двумя точками числовой прямой x и y равно |x - y|.
</p>
<p class=text>
Требуется написать программу, которая поможет Антону решить поставленную задачу.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит количество точек n (2 &#8804; n &#8804; 10<sup>5</sup>). Вторая строка содержит n различных целых чисел x<sub>i</sub> – координаты заданных точек числовой прямой. Числа в строке разделены пробелом. Значения всех координат x<sub>i</sub> не превосходят 10<sup>9</sup> по абсолютной величине.
</p>

<h2>Выходные данные</h2>

<p class=text>
В первой строке выходного файла OUTPUT.TXT необходимо вывести минимальное расстояние между двумя точками, заданными во входном файле. Во второй строке выходного файла необходимо вывести номера точек, которым соответствует найденное расстояние. Точки нумеруются натуральными числами от 1 до n в том порядке, в котором они заданы во входном файле. Если ответов несколько, выведите тот из них, в котором точки расположены левее других на числовой прямой. Первым выводится номер левой точки, далее через пробел – номер правой точки.</p>
<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5<br>10 3 6 2 5</td><td valign=top>1<br>4 2</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=345" target="_blank">Задача №345</a><br>Теория графов<br>Рекурсия</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 46%)</i></center>
<p class=text>
Одним из важных понятий, используемых в теории алгоритмов, является рекурсия. Неформально ее можно определить как использование в описании объекта самого себя. Если речь идет о процедуре, то в процессе исполнении эта процедура напрямую или  косвенно (через другие процедуры) вызывает сама себя.
</p>
<p class=text>
Рекурсия является очень «мощным» методом построения алгоритмов, но таит в себе некоторые опасности. Например, неаккуратно написанная рекурсивная процедура может войти в бесконечную рекурсию, то есть, никогда не закончить свое выполнение (на самом деле, выполнение закончится с переполнением стека).
</p>
<p class=text>
Поскольку рекурсия может быть косвенной (процедура вызывает сама себя через другие процедуры), то задача определения того факта, является ли данная процедура рекурсивной, достаточно сложна. Попробуем решить более простую задачу.
</p>
<p class=text>
Рассмотрим программу, состоящую из n процедур P<sub>1</sub>, P<sub>2</sub>, …, P<sub>n</sub>. Пусть для каждой процедуры известны процедуры, которые она может вызывать. Процедура P называется потенциально рекурсивной, если существует такая последовательность процедур Q<sub>0</sub>, Q<sub>1</sub>, …, Q<sub>k</sub>, что Q<sub>0</sub> = Q<sub>k</sub> = P и для i = 1…k процедура Q<sub>i-1</sub> может вызвать процедуру Q<sub>i</sub>. В этом случае задача будет заключаться в определении для каждой из заданных процедур, является ли она потенциально рекурсивной.
</p>
<p class=text>
Требуется написать программу, которая позволит решить названную задачу.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит целое число n — количество процедур в программе (1 &#8804; n &#8804; 100). Далее следуют n блоков, описывающих процедуры. После каждого блока следует строка,  которая содержит 5 символов «*».
</p>
<p class=text>
Описание процедуры начинается со строки, содержащий ее идентификатор, состоящий только из маленьких букв латинского алфавита и цифр. Идентификатор непуст, и его длина не превосходит 100 символов. Далее идет строка, содержащая число k (k &#8804; n ) — количество процедур, которые могут быть вызваны описываемой процедурой. Последующие k строк содержат идентификаторы этих процедур — по одному идентификатору на строке.
</p>
<p class=text>
Различные процедуры имеют различные идентификаторы. При этом ни одна процедура не может вызвать процедуру, которая не описана во входном файле.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT для каждой процедуры, присутствующей во входных данных, необходимо вывести слово YES, если она является потенциально рекурсивной, и слово NO – в противном случае, в том же порядке, в каком они перечислены во входных данных.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3<br>
p1<br>
2<br>
p1<br>
p2<br>
*****<br>
p2<br>
1<br>
p1<br>
*****<br>
p3<br>
1<br>
p1<br>
*****<br>
</td><td valign=top>YES<br>
YES<br>
NO
</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=346" target="_blank">Задача №346</a><br>Рекурсия, перебор<br>Сумма двух чисел</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 46%)</i></center>
<p class=text>
Заданы три числа: a, b, c. Необходимо выяснить, можно ли так переставить цифры в числах a и b, чтобы в сумме получилось c.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит три целых числа: a, b, c (0 < a, b, c < 10<sup>9</sup>). Числа разделены пробелом.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT следует вывести YES, если искомая перестановка цифр возможна, в противном случае необходимо вывести NO. При положительном ответе во второй строке следует вывести число x, получаемое перестановкой цифр числа a, и число y, получаемое перестановкой цифр числа b, сумма которых равна c. Числа x и y при выводе не должны содержать ведущих нулей. Числа в строке разделены пробелом. Если решений несколько, то следует вывести ту пару, в которой число x минимально.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>12 31 25</td><td valign=top>YES<br>12 13</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>12 31 26</td><td valign=top>NO</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>101 2 13</td><td valign=top>YES<br>11 2</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=347" target="_blank">Задача №347</a><br>Сортировка и последовательности<br>Покер</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 33%)</i></center>
<p class=text>
Имеется 5 целых чисел. Среди них:
</p>
<ul>
• если одинаковы 5, то вывести "Impossible", иначе<br>
• если одинаковы 4, то вывести "Four of a Kind", иначе<br>
• если одинаковы 3 и 2, то вывести "Full House", иначе<br>
• если есть 5 последовательных, то вывести "Straight", иначе<br>
• если одинаковы 3, то вывести "Three of a Kind", иначе<br>
• если одинаковы 2 и 2, то вывести "Two Pairs", иначе<br>
• если одинаковы 2, то вывести "One Pair", иначе<br>
• вывести "Nothing".
</ul>
<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит 5 целых чисел от 1 до 13, разделенных пробелом.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT следует вывести результат анализа.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1 3 9 3 2</td><td valign=top>One Pair</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>1 5 5 4 4</td><td valign=top>Two Pairs</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>1 5 2 4 3</td><td valign=top>Straight</td></tr>
<tr class=white2><td align=center>4</td><td valign=top>10 11 12 13 1</td><td valign=top>Nothing</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=353" target="_blank">Задача №353</a><br>Геометрия<br>Треугольники</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 41%)</i></center>
<p class=text>
Дан набор из нескольких отрезков. Необходимо составить треугольник наибольшей площади, используя в качестве сторон три отрезка из заданных.
</p>
<p class=text>
Требуется написать программу, которая найдет наибольшую площадь треугольника.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит в первой строке одно целое число N (3 &#8804; N &#8804; 1000) – количество отрезков. Во второй строке содержатся N целых чисел от 1 до 1000 – длины отрезков. Числа разделены пробелом.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать одно число с тремя десятичными знаками после запятой – наибольшую площадь треугольника из заданных отрезков. Если из заданных отрезков нельзя построить ни одного треугольника, то вывести в файл 0.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5<br>2 4 8 16 7</td><td valign=top>13.998</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>3<br>3 4 5</td><td valign=top>6.000</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>3<br>1 2 5</td><td valign=top>0</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=356" target="_blank">Задача №356</a><br>Динамическое программирование<br>Копилка</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 49%)</i></center>
<p class=text>
Задан вес E пустой копилки и вес F копилки с монетами. В копилке могут находиться монеты N видов, для каждого вида известна ценность Pi и вес Wi одной монеты. Найти минимальную и максимальную суммы денег, которые могут находиться в копилке.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT находятся числа E и F, во второй - число N, в следующих N строках - по два числа, Pi и Wi. (1<=E<=F<=10000, 1<=N<=500, 1<=Pi=50000, 1<=Wi<=10000).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите два числа через пробел - минимальную и максимальную суммы. Если копилка не может иметь точно заданный вес при условии, что она наполнена монетами заданных видов, следует вывести "This is impossible.".
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1000 1100<br>
2<br>
1 1<br>
5 2
</td><td valign=top>100 250</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>1000 1010<br>
2<br>
6 3<br>
2 2
</td><td valign=top>10 16</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>1000 2000<br>
1<br>
10 3
</td><td valign=top>This is impossible.</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=358" target="_blank">Задача №358</a><br>Целочисленная арифметика<br>Забор в парке</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 42%)</i></center>
<p class=text>
В бесконечном парке деревья образуют квадратную решетку с шагом один метр. Часть парка было решено оградить забором, который представляет собой треугольник с заданными координатами вершин. Деревья, которые в точности попадают на вершины или стороны треугольника, придется срубить.
</p>
<p class=text>
Требуется написать программу, которая найдет количество таких деревьев.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит шесть целых чисел – координаты вершин треугольника (абсцисса, ордината). Все числа по абсолютной величине не превышают 10<sup>9</sup> и разделены пробелами.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать одно число – количество деревьев.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>0 0 2 0 0 2</td><td valign=top>6</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>0 0 -1 -1 -1 0</td><td valign=top>3</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=359" target="_blank">Задача №359</a><br>Математическое моделирование<br>Змейка - 2</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 38%)</i></center>
<p class=text>
<img src="acmp_files/image013.gif" align=right vspace=10 hspace=10>
Мальчик Вася на уроке математики, вместо того, чтобы слушать учителя, рисовал числа в тетрадке в клеточку. Да не просто так рисовал, а определенным образом. Сначала он поставил в клетку число 1. Затем справа от нее нарисовал число 2. Затем снизу от числа 2 написал число 3. Затем перешёл на клетку правее и продолжил увлекательное занятие двигаясь по столбцу вверх, пока число в этом столбце не стало выше самого верхнего числа в предыдущем столбце. Затем он перешёл на клетку правее и опять таки продолжил рисование чисел, начиная с 7, но только уже сверху вниз, пока не нарисовал число, которое оказалось на одну клетку ниже самого нижнего числа в предыдущем столбце. И так далее. Вася не любил числа, заканчивающиеся нулем, и пропускал их при рисовании змейки. Первые его шесть заполненных столбцов мы скопировали из его тетрадки и привели здесь на рисунке. Так как Вася очень любопытный, то он очень хочет узнать, какое же число будет у него стоять в N-ом столбце в той строке, где стоит число 1. Первые 6 таких чисел в этой строке видны на рисунке: 1, 2, 5, 8, 14, 19.
</p>
<p class=text>
Требуется написать программу, которая поможет Васе.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит одно число N (1<=N<=10<sup>6</sup>) – номер столбца.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать N-ое число в строке, где стоит число 1.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3</td><td valign=top>5</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>5</td><td valign=top>14</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=360" target="_blank">Задача №360</a><br>Двумерные массивы<br>Максимальная тройка</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 33%)</i></center>
<p class=text>
В данной двумерной целочисленной таблице размером N &#215; N требуется найти три элемента, сумма которых максимальна. При этом первый элемент должен быть соседним по горизонтали или вертикали со вторым, а второй — с третьим.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит в первой строке число N (1 < N &#8804; 2000). В следующих N строках записано по N чисел – элементы таблицы. Элементы матрицы по абсолютной величине не превышают 100.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать единственное число — максимальную сумму.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3<br>
1 1 1<br>
2 2 1<br>
2 1 0
</td><td valign=top>6</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=361" target="_blank">Задача №361</a><br>Разбор строк<br>Подстроки из одинаковых букв</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 52%)</i></center>
<p class=text>
В заданной строке, состоящей из малых латинских букв, необходимо найти пару самых длинных подстрок, состоящих из одних и тех же букв (возможно, в разном порядке). Например, в строке twotwow это будут подстроки wotwo и otwow.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит исходную строку, длиной от 1 до 100 символов.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать единственное число – длину подстрок в максимальной паре, или 0, если таких подстрок в строке нет.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>abcde</td><td valign=top>0</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>abcdea</td><td valign=top>5</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=368" target="_blank">Задача №368</a><br>Динамическое программирование<br>Маршрут</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 38%)</i></center>
<p class=text>
В таблице из N строк и N столбцов клетки заполнены цифрами от 0 до 9. Требуется найти такой путь из клетки (1, 1) в клетку (N, N), чтобы сумма цифр в клетках, через которые он пролегает, была минимальной; из любой клетки ходить можно только вниз или вправо.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT находится число N. В следующих N строках содержатся по N цифр без пробелов. (2 <= N <= 250)
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите N строк по N символов. Символ  «#» (решетка) показывает, что маршрут проходит через эту клетку, а «.» (точка) - что не проходит. Если путей с минимальной суммой цифр несколько, можно вывести любой.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3<br>
943<br>
216<br>
091
</td><td valign=top>#..<br>
###<br>
..#
</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=370" target="_blank">Задача №370</a><br>Геометрия<br>Площадь многоугольника</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 48%)</i></center>
<p class=text>
Многоугольник на плоскости задан целочисленными координатами своих N вершин в декартовой системе координат. Требуется найти площадь многоугольника. Стороны многоугольника не соприкасаются (за исключением соседних - в вершинах) и не пересекаются.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT находится число N. В следующих N строках находятся пары чисел (Xi,Yi) - координаты точек. Если соединить точки в данном порядке, а также первую и последнюю точки, получится заданный многоугольник. (3 <= N <= 50 000,  -20 000 <= Xi,Yi <= 20 000)
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно число - площадь многоугольника. Его следует округлить до ближайшего числа с одной цифрой после запятой.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4<br>
5 0<br>
0 5<br>
-5 0<br>
0 -5
</td><td valign=top>50.0</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>4<br>
0 4<br>
0 0<br>
3 0<br>
1 1
</td><td valign=top>3.5</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=373" target="_blank">Задача №373</a><br>Динамическое программирование<br>Маршрут - 2</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 47%)</i></center>
<p class=text>
Дана матрица NxN, заполненная положительными числами. Путь по матрице начинается в левом верхнем углу. За один ход можно пройти в соседнюю по вертикали или горизонтали клетку (если она существует). Нельзя ходить по диагонали, нельзя оставаться на месте. 
</p>
<p class=text>
Требуется найти максимальную сумму чисел, стоящих в клетках по пути длиной K (клетку можно посещать несколько раз).
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT в первой строке содержит разделенные пробелом числа N и K. Затем идут N строк по N чисел в каждой – данные таблицы. Элементы матрицы – целые числа от 1 до 9999, 2  <= N <= 100, 1 <= K <= 2000.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно число – максимальную сумму.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5 7<br>
1 1 1 1 1<br>
1 1 3 1 9<br>
1 1 6 1 1<br>
1 1 3 1 1<br>
1 1 1 1 1
</td><td valign=top>21</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=374" target="_blank">Задача №374</a><br>Геометрия<br>Выпуклая оболочка - 2</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 55%)</i></center>
<p class=text>
На плоскости заданы N точек своими декартовыми координатами. Найти минимальный периметр многоугольника, содержащего все эти точки. Гарантируется, что искомый многоугольник имеет ненулевую площадь.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT в первой строке содержит число N, далее - N строк с парами координат (x<sub>i</sub>, y<sub>i</sub>). Ограничения: 3 <= N <= 1000, -10 000 <= x<sub>i</sub>, y<sub>i</sub> <= 10 000, все числа целые, все точки различны.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно вещественное число - длину периметра полученного многоугольника с точностью не менее 10<sup>-2</sup>.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5<br>
1 0<br>
0 1<br>
-1 0<br>
0 -1<br>
0 0
</td><td valign=top>5.66</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=376" target="_blank">Задача №376</a><br>Математическое моделирование<br>День рождения - 2</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 32%)</i></center>
<p class=text>
Заданы день и месяц рождения, а также текущие день, месяц и год. Определить, сколько дней осталось до дня рождения.
</p>
<p class=text>
<u>Примечание</u>. Високосные годы - это те, номер которых делится на 400, а также те, номер которых делится на 4, но не делится на 100.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT находятся, разделённые пробелами, день и месяц рождения, во второй - разделённые пробелами текущие день, месяц и год. Ограничения: год от 1920 до 3000, месяц от 1 до 12, день от 1 до числа дней в месяце.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите число дней, оставшихся до дня рождения.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>19 04<br>19 04 2002</td><td valign=top>0</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>05 05<br>19 04 2002</td><td valign=top>16</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>29 02<br>28 02 2001</td><td valign=top>1096</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=382" target="_blank">Задача №382</a><br>Рекурсия, перебор<br>Покраска лабиринта</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 46%)</i></center>
<p class=text>
<img src="acmp_files/image014.gif" align=right vspace=10 hspace=10>Лабиринт представляет собой квадрат, состоящий из NxN сегментов. Каждый из сегментов может быть либо пустым, либо заполненным монолитной каменной стеной. Гарантируется, что левый верхний и правый нижний сегменты пусты. Лабиринт обнесён сверху, снизу, слева и справа стенами, оставляющими свободными только левый верхний и правый нижний углы. Директор лабиринта решил покрасить стены лабиринта, видимые изнутри (см. рисунок). Помогите ему рассчитать количество краски, необходимой для этого.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT находится число N, затем идут N строк по N символов: точка обозначает пустой сегмент, решётка - сегмент со стеной. Размер сегментов – 5х5 метров, высота стен – 5 метров. (3 <= N <= 50)
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно число - площадь видимой части внутренних стен лабиринта в квадратных метрах.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5<br>
.....<br>
...##<br>
..#..<br>
..###<br>
.....
</td><td valign=top>550</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=386" target="_blank">Задача №386</a><br>Математическое моделирование<br>Генерация тестов</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 37%)</i></center>
<p class=text>
При подготовке задач для олимпиад по информатике и программированию часто возникает необходимость подготовки тестов. Поскольку зачастую количество тестов достаточно велико, и каждый из них может содержать множество данных, то генерацию тестов разумно автоматизировать.
</p>
<p class=text>
В геометрических задачах часто требуется сгенерировать n точек на плоскости так, чтобы никакие три из них не лежали на одной прямой. В этом и состоит ваша задача. Напишите программу, которая по числу N построит множество из N точек, обладающее указанным свойством.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит целое число N (1 <= N <= 300).
</p>

<h2>Выходные данные</h2>

<p class=text>
Если искомое множество точек можно построить, то выведите в выходной файл OUTPUT.TXT в первой строке слово YES, а далее N строк, каждая из которых должна содержать два числа – координаты соответствующей точки. Среди точек не должно быть совпадающих. Все координаты должны быть целыми числами, не превосходящими 10000 по абсолютному значению. Если искомое множество точек нельзя построить, выведите в выходной файл строку NO.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1</td><td valign=top>YES<br>0 0</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>4</td><td valign=top>YES<br>
0 0<br>
0 1<br>
1 0<br>
1 1
</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=388" target="_blank">Задача №388</a><br>Двумерные массивы<br>Седловые точки</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 28%)</i></center>
<p class=text>
Задана матрица, содержащая N строк и M столбцов. Седловой точкой этой матрицы назовем элемент, который одновременно является минимумом в своей строке и максимумом в своем столбце.
</p>
<p class=text>
Найдите количество седловых точек заданной матрицы.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT в первой строке содержит целые числа N и M (1 <= N, M <= 750). Далее следуют N строк по M чисел в каждой. Элементы матрицы - целые числа, не превосходящие 1000 по абсолютной величине.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите ответ на задачу.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>2 2<br>0 0<br>0 0</td><td valign=top>4</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>2 2<br>1 2<br>3 4</td><td valign=top>1</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=389" target="_blank">Задача №389</a><br>Математическое моделирование<br>К коду Грея</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 50%)</i></center>
<p class=text>
Рассмотрим циклическую последовательность попарно различных чисел {a<sub>0</sub>, a<sub>1</sub>, … , a<sub>2<sup>n</sup>-1</sub>}, 0 <= a<sub>i</sub> <= 2<sup>n</sup>-1. Назовем эту последовательность кодом Грея, если любой a<sub>i</sub> отличается от левого соседа a<sub>i-1</sub> и правого соседа a<sub>i+1</sub> только в одной цифре в двоичной записи этих чисел. Для a<sub>0</sub> левым соседом считается a<sub>2<sup>n</sup>-1</sub>, а для a<sub>2<sup>n</sup>-1</sub> правым соседом считается a<sub>0</sub>.
</p>
<p class=text>
Вася хочет запрограммировать игру-головоломку, которая будет позволять пользователю менять местами два любых числа a<sub>i</sub> и a<sub>j</sub> . Задача игрока – получить код Грея. Модуль, отвечающий за перестановку чисел, Вася берет на себя. А вот Ваша задача – написать программу, которая будет определять после каждой перестановки – является ли последовательность кодом Грея.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT содержится число n. В следующей строке перечислены попарно различные числа a<sub>i</sub>. В третьей строке записано число m – количество перестановок, сделанных пользователем. В следующих m строках перечислены числа (i, j) – индексы переставляемых элементов. Ограничения: 1 <= n <= 16; 1 <= m <= 10<sup>5</sup>; i&#8800;j, 0 <= i, j < 2<sup>n</sup>.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT запишите m строчек – в i-той строке запишите «Yes», если после i-той перестановки последовательность стала кодом Грея и «No» в противном случае.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>2<br>
0 1 3 2<br>
2<br>
1 2<br>
2 1
</td><td valign=top>No<br>Yes</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=390" target="_blank">Задача №390</a><br>Геометрия<br>Треугольная область</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 41%)</i></center>
<p class=text>
Одним из субъектов Флатландии является Треугольная область. Как следует из ее названия, она имеет форму треугольника, вершины которого находятся в точках с координатами (x<sub>1</sub>,y<sub>1</sub>), (x<sub>2</sub>,y<sub>2</sub>), (x<sub>3</sub>,y<sub>3</sub>). Административный центр этой области находится в точке с координатами (x<sub>c</sub>,y<sub>c</sub>), которая лежит строго внутри указанного треугольника.
</p>
<p class=text>
Для оценки транспортного и логистического потенциала области, ее руководству понадобилось узнать расстояние от административного центра области до ее границы. Напишите программу, которая вычислит это расстояние.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит шесть целых чисел – x<sub>1</sub>, y<sub>1</sub>, x<sub>2</sub>, y<sub>2</sub>, x<sub>3</sub>, y<sub>3</sub>. Вторая строка входного файла содержит два целых числа – x<sub>c</sub> и y<sub>c</sub>. Все числа во входном файле не превосходят 10000 по абсолютной величине. В заданном треугольнике нет тупых углов.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите искомое расстояние до границы с точностью не менее 10<sup>-6</sup>.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>0 0 1 2 2 0<br>1 1</td><td valign=top>0.4472135</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>0 0 0 3 3 0<br>1 1</td><td valign=top>0.7071067</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=397" target="_blank">Задача №397</a><br>Разбор строк<br>Качество строки</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 52%)</i></center>
<p class=text>
Назовем <i>качеством строки</i> разность между максимальным и минимальным номерами в алфавите букв, входящих в строку. Например, качество строки ab равно 2 - 1 = 1, а строки abcz равно 26 - 1 = 25.
</p>
<p class=text>
Дана строка S. Необходимо найти непустую подстроку этой строки, обладающую максимальным качеством, а из всех таких – минимальную по длине.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит непустую строку S, состоящую из строчных букв латинского алфавита. Ее длина не превосходит 2&#8729;10<sup>5</sup> символов.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите искомую подстроку. Если вариантов ответа несколько, выведите любой.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>aba</td><td valign=top>ab</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>zzz</td><td valign=top>z</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=399" target="_blank">Задача №399</a><br>Математическое моделирование<br>Жук</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 30%)</i></center>
<p class=text>
Петя нашел в Интернете по адресу <a href="http://buglab.ru/" target=_blank><b>http://buglab.ru</b></a> игру-головоломку "Жук", в которой от участников требуется построить для жука лабиринт таким образом, чтобы жук как можно дольше искал выход.
</p>
<p class=text>
Жук всегда начинает свое движение с левого верхнего угла, а выход всегда находится в правом нижнем. Жук движется не оптимально, а следующим образом: он идет туда, где еще не был, либо был там реже. Т.е. проходя каждую клетку лабиринта, жук запоминает: сколько раз он был в этой клетке и при обдумывании направления своего движения в какой то конкретный момент он смотрит: сколько раз он был в клетке снизу, сколько справа, сколько слева и сколько сверху и движется туда, где он был меньше раз. Если таких направлений несколько и одно из них совпадает с текущим направлением движения, то он не меняет направления, иначе он движется согласно следующим приоритетам: вниз, направо, вверх, налево. Т.е. если минимальное число посещений сразу справа и слева (а двигался он при этом вверх или вниз), то жук идет направо, т.к. у "направо" приоритет выше. Следует заметить, что двигаясь по данному алгоритму жук всегда достигнет выхода в том случае, когда выход существует.
</p>
<p class=text>
Изучив алгоритм движения жука Петя хочет написать программу, которая по заданному лабиринту определит количество перемещений жука прежде, чем он достигнет выхода. Помогите Пете с реализацией данной программы!
</p>
<script>
var map="111111111000000110100101100000011111000110100101100001111011000110000101110100011010011111010001111100011100001111001101100101011101010110000001101000111100010110100001110000011110011111000001110000111001001111011101110000011001100111111111"
var xxx
xxx = newImage("/images/bug/bug_u.gif")
xxx = newImage("/images/bug/bug_l.gif")
xxx = newImage("/images/bug/bug_r.gif")
</script>
<h2>Конструктор лабиринта</h2>
<table align=center><tr><td>
<table cellpadding=0 cellspacing=0 align=center bgcolor=black border=5><tr height=20><td colspan=2>
<table cellpadding=0 cellspacing=0>
<tr><td><img name=m0_0 src="acmp_files/wall0000.gif" onclick='Handle(0,0)'></td><td><img name=m0_1 src="acmp_files/wall0000.gif" onclick='Handle(1,0)'></td><td><img name=m0_2 src="acmp_files/wall0000.gif" onclick='Handle(2,0)'></td><td><img name=m0_3 src="acmp_files/wall0000.gif" onclick='Handle(3,0)'></td><td><img name=m0_4 src="acmp_files/wall0000.gif" onclick='Handle(4,0)'></td><td><img name=m0_5 src="acmp_files/wall0000.gif" onclick='Handle(5,0)'></td><td><img name=m0_6 src="acmp_files/wall0000.gif" onclick='Handle(6,0)'></td><td><img name=m0_7 src="acmp_files/wall0000.gif" onclick='Handle(7,0)'></td><td><img name=m0_8 src="acmp_files/wall0000.gif" onclick='Handle(8,0)'></td><td><img name=m0_9 src="acmp_files/wall0000.gif" onclick='Handle(9,0)'></td><td><img name=m0_10 src="acmp_files/wall0000.gif" onclick='Handle(10,0)'></td><td><img name=m0_11 src="acmp_files/wall0000.gif" onclick='Handle(11,0)'></td><td><img name=m0_12 src="acmp_files/wall0000.gif" onclick='Handle(12,0)'></td><td><img name=m0_13 src="acmp_files/wall0000.gif" onclick='Handle(13,0)'></td><td><img name=m0_14 src="acmp_files/wall0000.gif" onclick='Handle(14,0)'></td><td><img name=m0_15 src="acmp_files/wall0000.gif" onclick='Handle(15,0)'></td><td><img name=m0_16 src="acmp_files/wall0000.gif" onclick='Handle(16,0)'></td><td><img name=m0_17 src="acmp_files/wall0000.gif" onclick='Handle(17,0)'></td><td><img name=m0_18 src="acmp_files/wall0000.gif" onclick='Handle(18,0)'></td><td><img name=m0_19 src="acmp_files/wall0000.gif" onclick='Handle(19,0)'></td><td><img name=m0_20 src="acmp_files/wall0000.gif" onclick='Handle(20,0)'></td><td><img name=m0_21 src="acmp_files/wall0000.gif" onclick='Handle(21,0)'></td><td><img name=m0_22 src="acmp_files/wall0000.gif" onclick='Handle(22,0)'></td><td><img name=m0_23 src="acmp_files/wall0000.gif" onclick='Handle(23,0)'></td><td><img name=m0_24 src="acmp_files/wall0000.gif" onclick='Handle(24,0)'></td><td><img name=m0_25 src="acmp_files/wall0000.gif" onclick='Handle(25,0)'></td><td><img name=m0_26 src="acmp_files/wall0000.gif" onclick='Handle(26,0)'></td><td><img name=m0_27 src="acmp_files/wall0000.gif" onclick='Handle(27,0)'></td><td><img name=m0_28 src="acmp_files/wall0000.gif" onclick='Handle(28,0)'></td><td><img name=m0_29 src="acmp_files/wall0000.gif" onclick='Handle(29,0)'></td></tr><tr><td><img name=m1_0 src="acmp_files/wall0000.gif" onclick='Handle(0,1)'></td><td><img name=m1_1 src="acmp_files/black000.gif" onclick='Handle(1,1)'></td><td><img name=m1_2 src="acmp_files/black000.gif" onclick='Handle(2,1)'></td><td><img name=m1_3 src="acmp_files/black000.gif" onclick='Handle(3,1)'></td><td><img name=m1_4 src="acmp_files/wall0000.gif" onclick='Handle(4,1)'></td><td><img name=m1_5 src="acmp_files/black000.gif" onclick='Handle(5,1)'></td><td><img name=m1_6 src="acmp_files/black000.gif" onclick='Handle(6,1)'></td><td><img name=m1_7 src="acmp_files/black000.gif" onclick='Handle(7,1)'></td><td><img name=m1_8 src="acmp_files/black000.gif" onclick='Handle(8,1)'></td><td><img name=m1_9 src="acmp_files/wall0000.gif" onclick='Handle(9,1)'></td><td><img name=m1_10 src="acmp_files/black000.gif" onclick='Handle(10,1)'></td><td><img name=m1_11 src="acmp_files/wall0000.gif" onclick='Handle(11,1)'></td><td><img name=m1_12 src="acmp_files/wall0000.gif" onclick='Handle(12,1)'></td><td><img name=m1_13 src="acmp_files/wall0000.gif" onclick='Handle(13,1)'></td><td><img name=m1_14 src="acmp_files/wall0000.gif" onclick='Handle(14,1)'></td><td><img name=m1_15 src="acmp_files/black000.gif" onclick='Handle(15,1)'></td><td><img name=m1_16 src="acmp_files/wall0000.gif" onclick='Handle(16,1)'></td><td><img name=m1_17 src="acmp_files/black000.gif" onclick='Handle(17,1)'></td><td><img name=m1_18 src="acmp_files/black000.gif" onclick='Handle(18,1)'></td><td><img name=m1_19 src="acmp_files/wall0000.gif" onclick='Handle(19,1)'></td><td><img name=m1_20 src="acmp_files/black000.gif" onclick='Handle(20,1)'></td><td><img name=m1_21 src="acmp_files/wall0000.gif" onclick='Handle(21,1)'></td><td><img name=m1_22 src="acmp_files/wall0000.gif" onclick='Handle(22,1)'></td><td><img name=m1_23 src="acmp_files/wall0000.gif" onclick='Handle(23,1)'></td><td><img name=m1_24 src="acmp_files/wall0000.gif" onclick='Handle(24,1)'></td><td><img name=m1_25 src="acmp_files/black000.gif" onclick='Handle(25,1)'></td><td><img name=m1_26 src="acmp_files/wall0000.gif" onclick='Handle(26,1)'></td><td><img name=m1_27 src="acmp_files/wall0000.gif" onclick='Handle(27,1)'></td><td><img name=m1_28 src="acmp_files/black000.gif" onclick='Handle(28,1)'></td><td><img name=m1_29 src="acmp_files/wall0000.gif" onclick='Handle(29,1)'></td></tr><tr><td><img name=m2_0 src="acmp_files/wall0000.gif" onclick='Handle(0,2)'></td><td><img name=m2_1 src="acmp_files/black000.gif" onclick='Handle(1,2)'></td><td><img name=m2_2 src="acmp_files/wall0000.gif" onclick='Handle(2,2)'></td><td><img name=m2_3 src="acmp_files/black000.gif" onclick='Handle(3,2)'></td><td><img name=m2_4 src="acmp_files/wall0000.gif" onclick='Handle(4,2)'></td><td><img name=m2_5 src="acmp_files/wall0000.gif" onclick='Handle(5,2)'></td><td><img name=m2_6 src="acmp_files/black000.gif" onclick='Handle(6,2)'></td><td><img name=m2_7 src="acmp_files/wall0000.gif" onclick='Handle(7,2)'></td><td><img name=m2_8 src="acmp_files/black000.gif" onclick='Handle(8,2)'></td><td><img name=m2_9 src="acmp_files/black000.gif" onclick='Handle(9,2)'></td><td><img name=m2_10 src="acmp_files/wall0000.gif" onclick='Handle(10,2)'></td><td><img name=m2_11 src="acmp_files/black000.gif" onclick='Handle(11,2)'></td><td><img name=m2_12 src="acmp_files/wall0000.gif" onclick='Handle(12,2)'></td><td><img name=m2_13 src="acmp_files/black000.gif" onclick='Handle(13,2)'></td><td><img name=m2_14 src="acmp_files/black000.gif" onclick='Handle(14,2)'></td><td><img name=m2_15 src="acmp_files/black000.gif" onclick='Handle(15,2)'></td><td><img name=m2_16 src="acmp_files/black000.gif" onclick='Handle(16,2)'></td><td><img name=m2_17 src="acmp_files/black000.gif" onclick='Handle(17,2)'></td><td><img name=m2_18 src="acmp_files/wall0000.gif" onclick='Handle(18,2)'></td><td><img name=m2_19 src="acmp_files/black000.gif" onclick='Handle(19,2)'></td><td><img name=m2_20 src="acmp_files/wall0000.gif" onclick='Handle(20,2)'></td><td><img name=m2_21 src="acmp_files/black000.gif" onclick='Handle(21,2)'></td><td><img name=m2_22 src="acmp_files/wall0000.gif" onclick='Handle(22,2)'></td><td><img name=m2_23 src="acmp_files/black000.gif" onclick='Handle(23,2)'></td><td><img name=m2_24 src="acmp_files/black000.gif" onclick='Handle(24,2)'></td><td><img name=m2_25 src="acmp_files/black000.gif" onclick='Handle(25,2)'></td><td><img name=m2_26 src="acmp_files/black000.gif" onclick='Handle(26,2)'></td><td><img name=m2_27 src="acmp_files/black000.gif" onclick='Handle(27,2)'></td><td><img name=m2_28 src="acmp_files/black000.gif" onclick='Handle(28,2)'></td><td><img name=m2_29 src="acmp_files/wall0000.gif" onclick='Handle(29,2)'></td></tr><tr><td><img name=m3_0 src="acmp_files/wall0000.gif" onclick='Handle(0,3)'></td><td><img name=m3_1 src="acmp_files/black000.gif" onclick='Handle(1,3)'></td><td><img name=m3_2 src="acmp_files/black000.gif" onclick='Handle(2,3)'></td><td><img name=m3_3 src="acmp_files/black000.gif" onclick='Handle(3,3)'></td><td><img name=m3_4 src="acmp_files/wall0000.gif" onclick='Handle(4,3)'></td><td><img name=m3_5 src="acmp_files/black000.gif" onclick='Handle(5,3)'></td><td><img name=m3_6 src="acmp_files/black000.gif" onclick='Handle(6,3)'></td><td><img name=m3_7 src="acmp_files/wall0000.gif" onclick='Handle(7,3)'></td><td><img name=m3_8 src="acmp_files/black000.gif" onclick='Handle(8,3)'></td><td><img name=m3_9 src="acmp_files/wall0000.gif" onclick='Handle(9,3)'></td><td><img name=m3_10 src="acmp_files/black000.gif" onclick='Handle(10,3)'></td><td><img name=m3_11 src="acmp_files/wall0000.gif" onclick='Handle(11,3)'></td><td><img name=m3_12 src="acmp_files/wall0000.gif" onclick='Handle(12,3)'></td><td><img name=m3_13 src="acmp_files/black000.gif" onclick='Handle(13,3)'></td><td><img name=m3_14 src="acmp_files/black000.gif" onclick='Handle(14,3)'></td><td><img name=m3_15 src="acmp_files/wall0000.gif" onclick='Handle(15,3)'></td><td><img name=m3_16 src="acmp_files/wall0000.gif" onclick='Handle(16,3)'></td><td><img name=m3_17 src="acmp_files/black000.gif" onclick='Handle(17,3)'></td><td><img name=m3_18 src="acmp_files/black000.gif" onclick='Handle(18,3)'></td><td><img name=m3_19 src="acmp_files/black000.gif" onclick='Handle(19,3)'></td><td><img name=m3_20 src="acmp_files/black000.gif" onclick='Handle(20,3)'></td><td><img name=m3_21 src="acmp_files/black000.gif" onclick='Handle(21,3)'></td><td><img name=m3_22 src="acmp_files/black000.gif" onclick='Handle(22,3)'></td><td><img name=m3_23 src="acmp_files/black000.gif" onclick='Handle(23,3)'></td><td><img name=m3_24 src="acmp_files/black000.gif" onclick='Handle(24,3)'></td><td><img name=m3_25 src="acmp_files/wall0000.gif" onclick='Handle(25,3)'></td><td><img name=m3_26 src="acmp_files/wall0000.gif" onclick='Handle(26,3)'></td><td><img name=m3_27 src="acmp_files/black000.gif" onclick='Handle(27,3)'></td><td><img name=m3_28 src="acmp_files/wall0000.gif" onclick='Handle(28,3)'></td><td><img name=m3_29 src="acmp_files/wall0000.gif" onclick='Handle(29,3)'></td></tr><tr><td><img name=m4_0 src="acmp_files/wall0000.gif" onclick='Handle(0,4)'></td><td><img name=m4_1 src="acmp_files/black000.gif" onclick='Handle(1,4)'></td><td><img name=m4_2 src="acmp_files/black000.gif" onclick='Handle(2,4)'></td><td><img name=m4_3 src="acmp_files/black000.gif" onclick='Handle(3,4)'></td><td><img name=m4_4 src="acmp_files/black000.gif" onclick='Handle(4,4)'></td><td><img name=m4_5 src="acmp_files/black000.gif" onclick='Handle(5,4)'></td><td><img name=m4_6 src="acmp_files/black000.gif" onclick='Handle(6,4)'></td><td><img name=m4_7 src="acmp_files/black000.gif" onclick='Handle(7,4)'></td><td><img name=m4_8 src="acmp_files/black000.gif" onclick='Handle(8,4)'></td><td><img name=m4_9 src="acmp_files/black000.gif" onclick='Handle(9,4)'></td><td><img name=m4_10 src="acmp_files/black000.gif" onclick='Handle(10,4)'></td><td><img name=m4_11 src="acmp_files/black000.gif" onclick='Handle(11,4)'></td><td><img name=m4_12 src="acmp_files/black000.gif" onclick='Handle(12,4)'></td><td><img name=m4_13 src="acmp_files/black000.gif" onclick='Handle(13,4)'></td><td><img name=m4_14 src="acmp_files/wall0000.gif" onclick='Handle(14,4)'></td><td><img name=m4_15 src="acmp_files/black000.gif" onclick='Handle(15,4)'></td><td><img name=m4_16 src="acmp_files/black000.gif" onclick='Handle(16,4)'></td><td><img name=m4_17 src="acmp_files/black000.gif" onclick='Handle(17,4)'></td><td><img name=m4_18 src="acmp_files/black000.gif" onclick='Handle(18,4)'></td><td><img name=m4_19 src="acmp_files/black000.gif" onclick='Handle(19,4)'></td><td><img name=m4_20 src="acmp_files/black000.gif" onclick='Handle(20,4)'></td><td><img name=m4_21 src="acmp_files/black000.gif" onclick='Handle(21,4)'></td><td><img name=m4_22 src="acmp_files/black000.gif" onclick='Handle(22,4)'></td><td><img name=m4_23 src="acmp_files/black000.gif" onclick='Handle(23,4)'></td><td><img name=m4_24 src="acmp_files/black000.gif" onclick='Handle(24,4)'></td><td><img name=m4_25 src="acmp_files/black000.gif" onclick='Handle(25,4)'></td><td><img name=m4_26 src="acmp_files/wall0000.gif" onclick='Handle(26,4)'></td><td><img name=m4_27 src="acmp_files/black000.gif" onclick='Handle(27,4)'></td><td><img name=m4_28 src="acmp_files/wall0000.gif" onclick='Handle(28,4)'></td><td><img name=m4_29 src="acmp_files/wall0000.gif" onclick='Handle(29,4)'></td></tr><tr><td><img name=m5_0 src="acmp_files/wall0000.gif" onclick='Handle(0,5)'></td><td><img name=m5_1 src="acmp_files/black000.gif" onclick='Handle(1,5)'></td><td><img name=m5_2 src="acmp_files/wall0000.gif" onclick='Handle(2,5)'></td><td><img name=m5_3 src="acmp_files/black000.gif" onclick='Handle(3,5)'></td><td><img name=m5_4 src="acmp_files/black000.gif" onclick='Handle(4,5)'></td><td><img name=m5_5 src="acmp_files/wall0000.gif" onclick='Handle(5,5)'></td><td><img name=m5_6 src="acmp_files/wall0000.gif" onclick='Handle(6,5)'></td><td><img name=m5_7 src="acmp_files/black000.gif" onclick='Handle(7,5)'></td><td><img name=m5_8 src="acmp_files/wall0000.gif" onclick='Handle(8,5)'></td><td><img name=m5_9 src="acmp_files/black000.gif" onclick='Handle(9,5)'></td><td><img name=m5_10 src="acmp_files/wall0000.gif" onclick='Handle(10,5)'></td><td><img name=m5_11 src="acmp_files/black000.gif" onclick='Handle(11,5)'></td><td><img name=m5_12 src="acmp_files/black000.gif" onclick='Handle(12,5)'></td><td><img name=m5_13 src="acmp_files/black000.gif" onclick='Handle(13,5)'></td><td><img name=m5_14 src="acmp_files/wall0000.gif" onclick='Handle(14,5)'></td><td><img name=m5_15 src="acmp_files/wall0000.gif" onclick='Handle(15,5)'></td><td><img name=m5_16 src="acmp_files/wall0000.gif" onclick='Handle(16,5)'></td><td><img name=m5_17 src="acmp_files/black000.gif" onclick='Handle(17,5)'></td><td><img name=m5_18 src="acmp_files/black000.gif" onclick='Handle(18,5)'></td><td><img name=m5_19 src="acmp_files/wall0000.gif" onclick='Handle(19,5)'></td><td><img name=m5_20 src="acmp_files/black000.gif" onclick='Handle(20,5)'></td><td><img name=m5_21 src="acmp_files/black000.gif" onclick='Handle(21,5)'></td><td><img name=m5_22 src="acmp_files/wall0000.gif" onclick='Handle(22,5)'></td><td><img name=m5_23 src="acmp_files/black000.gif" onclick='Handle(23,5)'></td><td><img name=m5_24 src="acmp_files/black000.gif" onclick='Handle(24,5)'></td><td><img name=m5_25 src="acmp_files/black000.gif" onclick='Handle(25,5)'></td><td><img name=m5_26 src="acmp_files/wall0000.gif" onclick='Handle(26,5)'></td><td><img name=m5_27 src="acmp_files/black000.gif" onclick='Handle(27,5)'></td><td><img name=m5_28 src="acmp_files/black000.gif" onclick='Handle(28,5)'></td><td><img name=m5_29 src="acmp_files/wall0000.gif" onclick='Handle(29,5)'></td></tr><tr><td><img name=m6_0 src="acmp_files/wall0000.gif" onclick='Handle(0,6)'></td><td><img name=m6_1 src="acmp_files/black000.gif" onclick='Handle(1,6)'></td><td><img name=m6_2 src="acmp_files/black000.gif" onclick='Handle(2,6)'></td><td><img name=m6_3 src="acmp_files/black000.gif" onclick='Handle(3,6)'></td><td><img name=m6_4 src="acmp_files/black000.gif" onclick='Handle(4,6)'></td><td><img name=m6_5 src="acmp_files/black000.gif" onclick='Handle(5,6)'></td><td><img name=m6_6 src="acmp_files/wall0000.gif" onclick='Handle(6,6)'></td><td><img name=m6_7 src="acmp_files/black000.gif" onclick='Handle(7,6)'></td><td><img name=m6_8 src="acmp_files/black000.gif" onclick='Handle(8,6)'></td><td><img name=m6_9 src="acmp_files/black000.gif" onclick='Handle(9,6)'></td><td><img name=m6_10 src="acmp_files/wall0000.gif" onclick='Handle(10,6)'></td><td><img name=m6_11 src="acmp_files/black000.gif" onclick='Handle(11,6)'></td><td><img name=m6_12 src="acmp_files/black000.gif" onclick='Handle(12,6)'></td><td><img name=m6_13 src="acmp_files/wall0000.gif" onclick='Handle(13,6)'></td><td><img name=m6_14 src="acmp_files/black000.gif" onclick='Handle(14,6)'></td><td><img name=m6_15 src="acmp_files/black000.gif" onclick='Handle(15,6)'></td><td><img name=m6_16 src="acmp_files/black000.gif" onclick='Handle(16,6)'></td><td><img name=m6_17 src="acmp_files/black000.gif" onclick='Handle(17,6)'></td><td><img name=m6_18 src="acmp_files/wall0000.gif" onclick='Handle(18,6)'></td><td><img name=m6_19 src="acmp_files/black000.gif" onclick='Handle(19,6)'></td><td><img name=m6_20 src="acmp_files/black000.gif" onclick='Handle(20,6)'></td><td><img name=m6_21 src="acmp_files/black000.gif" onclick='Handle(21,6)'></td><td><img name=m6_22 src="acmp_files/wall0000.gif" onclick='Handle(22,6)'></td><td><img name=m6_23 src="acmp_files/black000.gif" onclick='Handle(23,6)'></td><td><img name=m6_24 src="acmp_files/wall0000.gif" onclick='Handle(24,6)'></td><td><img name=m6_25 src="acmp_files/wall0000.gif" onclick='Handle(25,6)'></td><td><img name=m6_26 src="acmp_files/black000.gif" onclick='Handle(26,6)'></td><td><img name=m6_27 src="acmp_files/black000.gif" onclick='Handle(27,6)'></td><td><img name=m6_28 src="acmp_files/exit0000.gif" onclick='Handle(28,6)'></td><td><img name=m6_29 src="acmp_files/wall0000.gif" onclick='Handle(29,6)'></td></tr><tr><td><img name=m7_0 src="acmp_files/wall0000.gif" onclick='Handle(0,7)'></td><td><img name=m7_1 src="acmp_files/wall0000.gif" onclick='Handle(1,7)'></td><td><img name=m7_2 src="acmp_files/wall0000.gif" onclick='Handle(2,7)'></td><td><img name=m7_3 src="acmp_files/wall0000.gif" onclick='Handle(3,7)'></td><td><img name=m7_4 src="acmp_files/wall0000.gif" onclick='Handle(4,7)'></td><td><img name=m7_5 src="acmp_files/wall0000.gif" onclick='Handle(5,7)'></td><td><img name=m7_6 src="acmp_files/wall0000.gif" onclick='Handle(6,7)'></td><td><img name=m7_7 src="acmp_files/wall0000.gif" onclick='Handle(7,7)'></td><td><img name=m7_8 src="acmp_files/wall0000.gif" onclick='Handle(8,7)'></td><td><img name=m7_9 src="acmp_files/wall0000.gif" onclick='Handle(9,7)'></td><td><img name=m7_10 src="acmp_files/wall0000.gif" onclick='Handle(10,7)'></td><td><img name=m7_11 src="acmp_files/wall0000.gif" onclick='Handle(11,7)'></td><td><img name=m7_12 src="acmp_files/wall0000.gif" onclick='Handle(12,7)'></td><td><img name=m7_13 src="acmp_files/wall0000.gif" onclick='Handle(13,7)'></td><td><img name=m7_14 src="acmp_files/wall0000.gif" onclick='Handle(14,7)'></td><td><img name=m7_15 src="acmp_files/wall0000.gif" onclick='Handle(15,7)'></td><td><img name=m7_16 src="acmp_files/wall0000.gif" onclick='Handle(16,7)'></td><td><img name=m7_17 src="acmp_files/wall0000.gif" onclick='Handle(17,7)'></td><td><img name=m7_18 src="acmp_files/wall0000.gif" onclick='Handle(18,7)'></td><td><img name=m7_19 src="acmp_files/wall0000.gif" onclick='Handle(19,7)'></td><td><img name=m7_20 src="acmp_files/wall0000.gif" onclick='Handle(20,7)'></td><td><img name=m7_21 src="acmp_files/wall0000.gif" onclick='Handle(21,7)'></td><td><img name=m7_22 src="acmp_files/wall0000.gif" onclick='Handle(22,7)'></td><td><img name=m7_23 src="acmp_files/wall0000.gif" onclick='Handle(23,7)'></td><td><img name=m7_24 src="acmp_files/wall0000.gif" onclick='Handle(24,7)'></td><td><img name=m7_25 src="acmp_files/wall0000.gif" onclick='Handle(25,7)'></td><td><img name=m7_26 src="acmp_files/wall0000.gif" onclick='Handle(26,7)'></td><td><img name=m7_27 src="acmp_files/wall0000.gif" onclick='Handle(27,7)'></td><td><img name=m7_28 src="acmp_files/wall0000.gif" onclick='Handle(28,7)'></td><td><img name=m7_29 src="acmp_files/wall0000.gif" onclick='Handle(29,7)'></td></tr>
</table>
</td></tr>
</table>
<img name=bug src="acmp_files/bug_u000.gif" style="position:relative" onclick="alert('Жучка не трогать!')">
<form name=myform style="margin: -20 1 1 1;">
<table width=100%><tr><td valign=top>
  <img name=start src="acmp_files/start000.gif" style="cursor:hand" onclick="if(go) Restart(map); else{go=1;src='/images/bug/stop.gif';start.alt='Остановить'};n=0;MakeMove();">
  <sup>- кнопка запуска жука</sup>
  <q id=myspeed style="display:none"></q>
</td><td align=right>
  <nobr><font color=black><b>Ходы:</b> <b><q id=score>0</q></nobr></b></font>
</td></tr></table>
</form>
<script src="acmp_files/c0000000.js" language=JavaScript></script>
</td></tr></table>


<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT в первой строке содержит разделенные пробелом целые числа N и M - количество строк и столбцов в лабиринте (4 <= N, M <= 100). Далее следует N строк, содержащих данные лабиринта построчно. Каждая строка содержит M символов - клетки лабиринта текущей строки, где символ "@" обозначает присутствие стены, а символ пробела - пустое пространство. Гарантируется, что граница лабиринта окружена стеной. Предполагается, что жук начинает свое движение из координаты (2, 2) и заканчивает в координате (M-1, N-1), подразумевается, что в этих координатах нет стен.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите количество движений жука, если спасительный маршрут для жука существует, и -1 в противном случае.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>&#185;</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>6 6<br>
@@@@@@<br>
@    @<br>
@    @<br>
@ @ @@<br>
@ @  @<br>
@@@@@@
</td><td valign=top>20</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>8 30<br>
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@<br>
@   @    @ @@@@ @  @ @@@@ @@ @<br>
@ @ @@ @  @ @     @ @ @      @<br>
@   @  @ @ @@  @@        @@ @@<br>
@             @           @ @@<br>
@ @  @@ @ @   @@@  @  @   @  @<br>
@     @   @  @    @   @ @@   @<br>
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
</td><td valign=top>630</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>4 4<br>
@@@@<br>
@ @@<br>
@@ @<br>
@@@@
</td><td valign=top>-1</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=401" target="_blank">Задача №401</a><br>Динамическое программирование<br>Шары и коробки</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 52%)</i></center>
<p class=text>
У вас имеется N выстроенных в ряд коробок, A красных и B синих шаров. Все красные шары (аналогично и синие) идентичны. Вы можете класть шары в коробки. Разрешается размещать в коробках шары как одного, так и двух видов одновременно. Так же разрешается оставлять некоторые из коробок пустыми. Не обязательно класть все шары в коробки.
</p>
<p class=text>
Требуется написать программу, которая определяет количество различных способов, которыми возможно заполнить коробки шарами.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит целые числа N, A, B. (1 <= N <= 20, 0 <= A, B <= 20)
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите ответ на задачу.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1 1 1</td><td valign=top>4</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>2 1 1</td><td valign=top>9</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=408" target="_blank">Задача №408</a><br>Разбор строк<br>Письмо</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 31%)</i></center>
<p class=text>
Вася хочет отправить Пете письмо на листе шириной K. Он хочет распечатать на нем текст, состоящий из N строк. Необходимо изменить количество ведущих и концевых пробелов так, чтобы строки оказались посередине листа, и их длина стала равна K. Вася считает, что строка находится посередине листа, если количество ведущих пробелов не превосходит количества концевых пробелов и, если при сдвиге строки на один символ вправо (т.е. при добавлении одного пробела в начало строки), указанное свойство нарушается.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит два целых числа K и N (1 <= K <= 100, 1 <= N <= 1000). Следующие N строк содержат текст Васиного письма. Каждая строка письма содержит хотя бы один символ, отличный от пробела. Длина каждой строки во входном файле не превосходит 100.
</p>

<h2>Выходные данные</h2>

<p class=text>
Если Вася сможет написать письмо, удовлетворяющее всем его требованиям, то в выходной файл OUTPUT.TXT выведите отформатированный текст письма, иначе, выведите фразу “Impossible.” (без кавычек).
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>20 3<br>
++Привет!++<br>
+Напиши+мне.++<br>
++++Пока+=)+
</td><td valign=top>++++++Привет!+++++++<br>
++++Напиши+мне.+++++<br>
++++++Пока+=)+++++++
</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>5 1<br>
Привет.
</td><td valign=top>Impossible.</td></tr>
</table>
<p class=text>
В приведенных примерах для большей наглядности пробелы заменены на плюсы!
</p>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=409" target="_blank">Задача №409</a><br>Задачи для начинающих<br>Железная дорога</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 26%)</i></center>
<p class=text>
При строительстве новой железной дороги возникли проблемы. Дорога пролегает по холмистой местности, однако сами пути должны идти строго горизонтально. Поэтому руководство строительной компании приняло решение выровнять поверхность земли на этом участке. Главная проблема состоит в том, что привозить или вывозить землю на стройку стоит 10000$ за кубический метр. Поскольку бюджет железной дороги невелик, этого нельзя себе позволить.
</p>
<p class=text>
Поэтому главный инженер принял решение выровнять поверхность, используя только землю, из которой состоят холмы. Теперь самая сложная задача состоит в том, чтобы выяснить высоту над уровнем моря, на которой будет пролегать дорога. Это ответственное задание было поручено Вам.
</p>
<p class=text>
Через каждый метр от начала участка была измерена высота над уровнем моря. Напишите программу, которая по данным измерений рассчитывает искомую высоту.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит количество N (1 < N <= 30000) точек, в которых была замерена высота. Вторая строка содержит результаты замеров – i-ое число строки содержит высоту над уровнем моря точки, находящейся на расстоянии (i-1) метр от начала участка. Все высоты – целые неотрицательные числа, не превосходящие 10000. Считайте, что между соседними точками измерений земная поверхность строго прямолинейна.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите ответ на задачу с точностью, не меньшей 10<sup>-5</sup>.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4<br>
0 1 1 0
</td><td valign=top>0.6666666667</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>5<br>
2 2 2 2 2
</td><td valign=top>2.0000000000</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=411" target="_blank">Задача №411</a><br>Простая математика<br>Квадратное уравнение</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 28%)</i></center>
<p class=text>
Сложно найти человека, который любит решать однообразные задачки по математике. В последнее время школьникам стало легче, ведь с появлением компьютеров почти в каждой квартире стало существенно проще проверять себя.
</p>
<p class=text>
Но программы, в которых решение уравнений является стандартной функцией, установлены не везде. Напишите программу, которая сможет решить уравнение
</p>
<p class=text>
<font size=+2>ax<sup>2</sup> + bx + c = 0</font>
</p>
при заданных коэффициентах a, b и c.

<h2>Входные данные</h2>

<p class=text>
Единственная строка входного файла INPUT.TXT содержит три целых числа a, b и c, каждое из которых не превосходит по модулю 30000. Числа разделяются пробелами.
</p>

<h2>Выходные данные</h2>

<p class=text>
На первой строке выходного файла OUTPUT.TXT выведите число корней заданного уравнения. Затем выведите сами корни по одному на строке с ошибкой, не превосходящей 10<sup>-4</sup>. Если для заданных коэффициентов корней бесконечно много, на единственной строке выходного файла выведите -1.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1 -3 2</td><td valign=top>2<br>1.000000<br>2.000000</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>0 -1 6</td><td valign=top>1<br>6.000000</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=414" target="_blank">Задача №414</a><br>Теория графов<br>Расследование</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 40%)</i></center>
<p class=text>
В городском управлении милиции одного прибрежного города ведется расследование крупного дела, в котором могут быть замешаны сотрудники милиции. Было принято решение о тайной установке оборудования для просмотра информации, поступающей через Интернет. Под подозрение попадают два отдела, но добиться выделения денег на покупку двух комплектов оборудования не удалось. К счастью, внутренняя сеть управления имеет древовидную структуру, то есть каждый отдел имеет выход в Интернет через какой-либо другой отдел. Исключение составляет отдел по борьбе с компьютерными преступлениями, который имеет непосредственный доступ в Интернет по модемной линии.
</p>
<p class=text>
Можно было бы установить оборудование для слежения прямо в этом отделе, но для предотвращения злоупотреблений лучше найти такое расположение, чтобы нарушалась секретность как можно меньшего количества лишних отделов.
</p>
<p class=text>
Как наиболее опытному в подобных вопросах сотруднику, решение этой задачи поручили вам. Подчиненные уже пронумеровали все отделы натуральными числами, начиная с 1, первый номер присвоен отделу по борьбе с компьютерными преступлениями.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит натуральное число N 
(N <= 30000) – количество отделов. Во второй строке записаны номера отделов, за которыми необходимо установить слежение. На третьей строке находятся n-1 натуральных чисел, i-е из них не больше i и задает номер отдела, к которому подсоединен отдел i + 1.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно число – номер отдела, в котором следует установить следящее оборудование.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4<br>
3 4<br>
1 1 3
</td><td valign=top>3</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>8<br>
3 6<br>
1 1 2 4 5 1 1
</td><td valign=top>1</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=415" target="_blank">Задача №415</a><br>Жадный алгоритм<br>Подпись</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 34%)</i></center>
<p class=text>
Марсиане Миша и Маша решили вместе подобрать подарок на день рождения Кати. Когда они наконец нашли то, что хотели, и упаковали предмет в красивую коробку, надо было решить, как подписать подарок. Друзья подумали, что лучшим решением будет составить общую подпись так, чтобы в ней как подстроки содержались их имена.
</p>
<p class=text>
Учтите, что на Марсе принято подписываться полными именами, а они у марсиан могут быть достаточно длинными.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит две строки, в которых записаны полные имена друзей. Имена, как ни странно, состоят из букв латинского алфавита, из которых только первая – прописная. Длина имен не превосходит 1000.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите кратчайшую строку, в которой встречаются имена Миши и Маши одновременно. Буквы, с которых имена начинаются в этой строке нужно сделать большими. Если существует несколько решений, выведите то, которое меньше в алфавитном порядке.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>Misha<br>Masha</td><td valign=top>MashaMisha</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>Julya<br>Lyalya</td><td valign=top>JuLyalya</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=417" target="_blank">Задача №417</a><br>Математическое моделирование<br>Даты</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 34%)</i></center>
<p class=text>
При обработке различной информации часто приходится оперировать с данными о датах. В этой задаче вам нужно составить программу, которая сможет вывести число, месяц и день недели, которые наступят через K дней, начиная с первого января 2008 года. Напомним, что это был вторник.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит одно целое число K (0 <= K <= 1000) - количество дней, после первого января, через которое наступит (или наступила) интересующая дата.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT ваша программа должна записать, какие день недели, число и месяц наступят по прошествии заданного времени. Результаты проверяются автоматически, поэтому вам следует придерживаться формата, показанного в примерах.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>0</td><td valign=top>Tuesday, 01.01</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>5</td><td valign=top>Sunday, 06.01</td></tr>
</table>
<h2>Примечание</h2>
<p class=text>
По-английски дни недели называются так: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday.
</p>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=418" target="_blank">Задача №418</a><br>Структуры данных<br>Редактор</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 39%)</i></center>
<p class=text>
Немногие знают, что первые версии текстового редактора из предыдущей задачи были написаны в России программистом Колей. Для этого он несколько месяцев почти не выходил из подвала, где стояли только диван и компьютер.
</p>
<p class=text>
Вот одна из проблем, с которыми столкнулся Коля в те времена. Во время работы пользователь набирает какой-то текст, а так же может его редактировать. При этом, даже если итоговый результат полностью помещается на экран, в процессе работы отдельные строки могут иметь слишком большую длину. Мы не будем просить вас повторить Колин подвиг и заново написать редактор. Определите, какой максимальной длины строка получалась в течение набора текста, если вам известно, какие клавиши и в каком порядке нажимал пользователь.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записана строка из различных символов - последовательность кнопок на клавиатуре, которые нажимал пользователь. Переводы строк заменены на символ '\'. Первые версии редактора поддерживали три управляющие команды, которые закодированы следующим образом:
</p>
<blockquote>
'<' - удаление предыдущего символа (если курсор находится в начале строки, и эта строка не первая, то удаляется предшествующий перевод строки);<br> 
'^' - перемещение в конец предыдущей строки (игнорируется, если курсор находится на первой строке);<br> 
'|' - перемещение в конец следующей строки (игнорируется, если курсор находится на последней строке). <br>
</blockquote>
<p class=text>
Все остальные символы, содержащиеся в файле, имеют коды от 32 (пробел) и выше и должны пониматься как есть. Число нажатий клавиш не превосходит 10<sup>5</sup>.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно целое число - максимальную длину строки, которая была достигнута в течение работы редактора.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>Hello, World???&lt;&lt;&lt;!</td><td valign=top>15</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>Hello, World?\This is^&lt;!!!| a sample.</td><td valign=top>17</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=419" target="_blank">Задача №419</a><br>Разбор строк<br>Палиндром</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 41%)</i></center>
<p class=text>
Одно из известных развлечений со словами - составление палиндромов. Палиндромом называется предложение, которое, после удаления из него всех пробелов и знаков препинания, читается одинаково справа налево и слева направо. Создатели одного известного текстового редактора пишут новую версию модуля для проверки орфографии. Они хотят реализовать возможность вывода подсказки для пользователя на тот случай, если он допустил опечатку при наборе какого-нибудь палиндрома. Конечно же, они решили обратиться именно к вам.
</p>
<p class=text>
Более точно, по заданной строке нужно определить, может ли она быть результатом замены, удаления или добавления одного символа в некотором палиндроме. При этом строчные и прописные латинские буквы не различаются, а все остальные символы должны игнорироваться.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT содержится заданная строка. Гарантируется, что она содержит хотя бы одну букву. Длина строки не превосходит 10<sup>5</sup>.
</p>

<h2>Выходные данные</h2>

<p class=text>
В первой строке выходного файла OUTPUT.TXT выведите YES, если строка может быть получена каким-нибудь из описанных выше преобразований из некоторого палиндрома, и NO в противном случае. В случае положительного ответа во второй строке выведите какой-нибудь из палиндромов, в которых мог допустить опечатку пользователь.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>Never odd or even</td><td valign=top>YES<br>NeVErODDoREVen</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>Eat it!</td><td valign=top>NO</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>Mums are not set as a test on Erasmus.</td><td valign=top>YES<br>Sums are not set as a test on Erasmus.</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=420" target="_blank">Задача №420</a><br>Разбор строк<br>Химическая формула</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 36%)</i></center>
<p class=text>
Запись химической реакции всегда содержит описания нескольких веществ. В свою очередь, описание одного химического вещества - строка, в которой входящие в него атомы химических элементов перечисляются в определенном порядке. При этом последовательности из двух и более одинаковых атомов, идущих подряд, группируются: записывается сокращенное название химического элемента и количество одинаковых элементов подряд. Например, вместо HH пишут H2. Обозначения химических элементов состоят из одной или двух латинских букв, из которых первая - прописная, а вторая - строчная. В этой задаче не будут рассматриваться более сложные правила. Например, не используются скобки. Вы должны проверить, что заданная последовательность символов подходит под данное выше описание формулы химического вещества. При этом не нужно рассматривать корректность заданной строки, исходя из каких-либо других соображений, даже если они продиктованы здравым смыслом.
</p>

<h2>Входные данные</h2>

<p class=text>
В единственной строке входного файла INPUT.TXT записана последовательность символов, содержащая только цифры и строчные и прописные латинские буквы. Гарантируется, что в последовательности перед каждой строчной буквой идет прописная, а все однобуквенные и двухбуквенные подстроки, начинающиеся с прописной буквы - правильные обозначения химических элементов (поэтому здесь даже не приводится их список). Длина последовательности не превосходит 1000 символов.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно слово YES, если данная строка подходит под упрощенное описание формулы химического вещества из условия и NO, если не подходит.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>OHNaOHNa</td><td valign=top>YES</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>H2O</td><td valign=top>YES</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>HH</td><td valign=top>NO</td></tr>
<tr class=white2><td align=center>4</td><td valign=top>CHC</td><td valign=top>YES</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=423" target="_blank">Задача №423</a><br>Динамическое программирование<br>Сообщение</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 46%)</i></center>
<p class=text>
В сообщении, состоящем из заглавных русских букв и пробелов, каждую букву заменили её порядковым номером в русском алфавите (А - 1, Б - 2, ..., Я - 33), а пробел - нулем. 
</p>
<p class=text>
Требуется по заданной последовательности цифр найти количество исходных сообщений, из которых она могла получиться.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит последовательность цифр, состоящую не более чем из 100 цифр.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите ответ на задачу.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1025</td><td valign=top>4</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>21705</td><td valign=top>3</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>33222</td><td valign=top>8</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=424" target="_blank">Задача №424</a><br>Математическое моделирование<br>Игра умножения</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 52%)</i></center>
<p class=text>
Слава и Оля играют в игру умножения: умножают целое число P на одно из чисел от 2 до 9. Слава всегда начинает с P = 1, делает умножение, затем число умножает Оля, затем Слава и т.д. Перед началом игры им задают случайное число N, и победителем считается тот, кто первым получит P >= N.
</p>
<p class=text>
Требуется определить, кто выиграет при заданном числе N, если известно, что Слава и Оля играют наилучшим образом.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит целое N. (2 <= N <= 4 294 967 295)
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите «Stan wins.», если победит Слава, или «Ollie wins.», если победит Оля.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>162</td><td valign=top>Stan wins.</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>17</td><td valign=top>Ollie wins.</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>34012226</td><td valign=top>Stan wins.</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=427" target="_blank">Задача №427</a><br>Сортировка и последовательности<br>Несоставляемое число</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 48%)</i></center>
<p class=text>
Дано N натуральных чисел. Требуется найти минимальное натуральное число, не представимое суммой никаких из этих чисел, если в эту сумму каждое исходное число может входить не более одного раза.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT в первой строке содержит натуральное число N, не превосходящее 10<sup>4</sup>, далее следуют N строк, в каждой из которых записано по одному натуральному числу, каждое из которых не превосходит 10<sup>9</sup>.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите ответ на задачу.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4<br>1<br>1<br>1<br>5</td><td valign=top>4</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>4<br>1<br>2<br>4<br>8</td><td valign=top>16</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=433" target="_blank">Задача №433</a><br>Динамическое программирование<br>Школа танцев</h1><center><i>(Время: 1 сек. Память: 64 Мб Сложность: 62%)</i></center>
<p class=text>
В школу бальных танцев профессора Падеграса записались n учеников — мальчиков и девочек. Профессор построил их в один ряд, и хочет отобрать из них для первого занятия группу стоящих подряд учеников, в которой количество мальчиков и девочек одинаково. Сколько вариантов выбора есть у профессора?
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT задано число n (1 &#8804; N &#8804; 10<sup>6</sup>). Во второй строке задается описание построенного ряда из мальчиков и девочек — строка из n символов a и b (символ a соответствует девочке, а символ b — мальчику).
</p>

<h2>Выходные данные</h2>

<p class=text>
В единственной строке выходного файла OUTPUT.TXT должно содержаться единственное число — количество вариантов выбора требуемой группы.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3<br>bab</td><td valign=top>2</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>8<br>abbababa</td><td valign=top>13</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=440" target="_blank">Задача №440</a><br>Геометрия<br>Биатлон</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 24%)</i></center>
<p class=text>
На Зимних Олимпийских Играх традиционно проводятся соревнования по биатлону. Как известно, этот вид спорта содержит лыжные гонки и стрельбу по мишеням из винтовки. На каждом огневом рубеже расположены 5 мишеней. Каждая из них имеет форму круга радиусом 10 см, а расстояния между центрами соседних мишеней одинаковы и равны 25 см. Центры мишеней при этом расположены на одной горизонтали.
</p>
<p class=text>
Введем прямоугольную систему координат так, что начало координат расположено в центре самой левой мишени, ось Ox направлена вправо, а ось Oy - вверх. Таким образом, центры мишеней имеют координаты (0, 0), (25, 0), (50, 0), (75, 0) и (100, 0).
</p>
<p class=text>
Для информационного обеспечения проведения соревнований было решено разработать систему подсчета количества пораженных мишеней. Эта система по точкам, в которые попали пули после выстрелов спортсмена, должна определять количество пораженных мишеней. Мишень считается пораженной, если в нее попала хотя бы одна пуля (при этом, разумеется, если в мишень попали две или больше пуль, то попадание считается только один раз).
</p>
<p class=text>
На спринтерской гонке на каждом огневом рубеже у спортсмена есть 5 пуль. Вам даны координаты точек, в которые попали пули после выстрелов спортсмена. Определите количество пораженных мишеней.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит ровно пять строк: i-ая из них содержит два целых числа x<sub>i</sub> и y<sub>i</sub> - координаты точки, в которую попала пуля после i-ого выстрела спортсмена. Все числа во входном файле не превосходят 1000 по модулю.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите единственное число – число пораженных мишеней.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>0 0<br>
25 0<br>
50 0<br>
75 0<br>
100 0
</td><td valign=top>5</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>0 0<br>
0 0<br>
0 0<br>
75 0<br>
100 0
</td><td valign=top>3</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=442" target="_blank">Задача №442</a><br>Разбор строк<br>Шрифты</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 45%)</i></center>
<p class=text>
Третий за неделю чек по заправке картриджа для принтера в бухгалтерии приняли без особого удовольствия. Судя по всему, надо серьезно подойти к вопросу экономного использования тонера - на учет должна быть поставлена каждая буква. Вам поручена реализация утилиты, которая будет обрабатывать HTML-документы старых версий и подсчитывать в них количество символов каждого размера. HTML-документ состоит из обычного текста и тегов - управляющих элементов, заключенных в угловые скобки. Для управления размером шрифта используется тег font с атрибутом size: &lt;font size="x"&gt;. Если x - натуральное число, то размер шрифта устанавливается равным x. Кроме того, x может иметь вид +y или -y, где y - натуральное число. В этом случае размер шрифта соответственно увеличивается или уменьшается на y. Действие тега заканчивается с появлением соответствующего закрывающего тега &lt;/font&gt;. Все остальные теги вы не должны обрабатывать. Можете считать, что теги не содержат лишних пробельных символов. По умолчанию размер шрифта равен 10, и изменения не будут выводить его из интервала от 1 до 50.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит описание HTML-документа, по длине не превосходящее 5000 символов.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите для каждого встречающегося в документе размера шрифта на отдельной строке через пробел его размер и количество соответствующих ему непробельных (с ASCII кодами не равными 9, 10, 13 и 32) символов в порядке возрастания размера.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>&lt;HTML&gt;<br>
&lt;BODY&gt;<br>
&lt;b&gt; Fonts: normal &lt;font size="2"&gt; tiny &lt;font size="+9"&gt; bigger<br>
&lt;p&gt;<br>
&lt;/font&gt;&lt;/font&gt; as before <br>
&lt;/b&gt;<br>
&lt;font size="+5"&gt;<br>
very big<br>
&lt;font size="-8"&gt;<br>
smaller again<br>
&lt;/font&gt; &lt;a href="..."&gt;...&lt;/a&gt;&lt;/font&gt;<br>
&lt;/BODY&gt;<br>
&lt;/HTML&gt;</td><td valign=top>2 4<br>
7 12<br>
10 20<br>
11 6<br>
15 10</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=443" target="_blank">Задача №443</a><br>Целочисленная арифметика<br>Хеш-функция</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 37%)</i></center>
<p class=text>
В задачах поиска часто используются так называемые хеш-функции. Одним из важнейших классов хеш-функций являются так называемые полиномиальные хеш-функции.
</p>
<p class=text>
Пусть дана строка S = s<sub>1</sub>s<sub>2</sub> … s<sub>l</sub>, состоящая из цифр от 0 до 9. Тогда значение полиномиальной хеш-функции p(S, x, m) вычисляется следующим образом:
</p>
<p class=text>
<img src="acmp_files/image015.gif" alt="Хеш-функция">
</p>
<p class=text>
(a mod b обозначает остаток от деления числа a на число b). Например, пусть S = 0123, тогда p(S, 2, 5) = (0 • 1 + 1 • 2 + 2 • 4 + 3 • 8) mod 5 = 4.
</p>
<p class=text>
Вам даны множество из n строк (S<sup>(1)</sup>, S<sup>(2)</sup>, … , S<sup>(n)</sup>), каждая из которых состоит только из цифр от 0 до 9, и числа m и x. Необходимо найти количество таких пар (i, j), где 1 <= i, j <= n, i < j, что p(S<sup>(i)</sup>, x, m) = p(S<sup>(j)</sup>, x, m).
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит три целых числа: n (1 <= n <= 30000), m (1 <= m <= 2000), x (1 <= x <= 100). Далее идут n строк, каждая из которых содержит по одной строке из данного множества: 2-ая строка входного файла содержит S<sup>(1)</sup>, 3-я - S<sup>(2)</sup>, . . . , (i + 1)-ая - S<sup>(i)</sup>, ... , (n + 1)-ая - S<sup>(n)</sup>. Длины S<sup>(i)</sup> не превосходят 100, S<sup>(i)</sup> не пусты и состоят только из цифр от 0 до 9.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите ответ на задачу.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>8 3 8<br>
1234<br>
239<br>
366<br>
261<br>
32890<br>
43823490<br>
382390<br>
3043840
</td><td valign=top>11</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>5 10 100<br>
1<br>
2<br>
3<br>
4<br>
5
</td><td valign=top>0</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=444" target="_blank">Задача №444</a><br>Сортировка и последовательности<br>Список</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 30%)</i></center>
<p class=text>
В наше время создатели офисных приложений стараются сделать все для удобства пользователя. Поэтому даже такая мелочь, как представление на экране списков чисел - например, для вывода номеров страниц, - должна быть тщательно проработана. 
</p>
<p class=text>
Вы должны реализовать функцию, которая по заданному набору целых чисел будет формировать строку, являющуюся его самым коротким текстовым представлением. Текстовое представление - строка, состоящая из разделенных запятыми чисел и диапазонов чисел вида < a, ..., b >, которые используются для записи набора всех чисел от a до b. При этом все числа, входящие в строку, должны быть упорядочены по возрастанию в том порядке, в котором они встречаются в строке.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит целое число N (1 <= N <= 1000) - размер набора. Вторая строка содержит N задающих набор целых чисел, по абсолютной величине не превосходящих 10000, разделенные пробелами. Одно число может встречаться в этом описании несколько раз.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно из кратчайших текстовых представлений заданного набора чисел. Следите за правильной расстановкой пробелов. Выходной файл в примере содержит ровно четыре пробела.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>7<br>
1 3 5 -1 3 4 6
</td><td valign=top>-1, 1, 3, ..., 6</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=447" target="_blank">Задача №447</a><br>Целочисленная арифметика<br>Последняя цифра N!</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 39%)</i></center>
<p class=text>
Требуется найти последнюю ненулевую цифру числа N! = 1*2*3*…*N.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит единственное натуральное число N (N<=9999).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите ответ на задачу.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1</td><td valign=top>1</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>5</td><td valign=top>2</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=450" target="_blank">Задача №450</a><br>Рекурсия, перебор<br>Бутылки - 2</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 51%)</i></center>
<p class=text>
В цех вторичной переработки поступают бутылки N видов: A, B, C, … (первые N заглавных букв латинского алфавита). Бутылки поступают на переработку партиями из N контейнеров, причем в каждом контейнере могут находиться бутылки различных видов. Перед вторичной переработкой бутылок специальные рабочие сортируют их по видам таким образом, чтобы после сортировки в каждом из поступивших контейнеров остались бутылки только одного вида. В каждом из контейнеров может помещаться неограниченное количество бутылок.
</p>
<p class=text>
Требуется написать программу, которая определяет минимальное количество перемещений бутылок, обеспечивающих их сортировку по видам, причем за каждое перемещение можно переместить только одну бутылку из одного контейнера в другой.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT состоит из N+1 строк. В первой строке записано число N (1&#8804;N&#8804;8). Во второй строке располагаются разделенные пробелами N целых числа, соответствующие количеству бутылок вида A, B, C, … в первом контейнере. В последующих строках содержится аналогичная информация для второго, третьего, …, N-го контейнеров соответственно. Известно, что количество бутылок в каждом из контейнеров не превосходит 32767.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен состоять из двух строк. В первой располагается последовательность из символов A, B, C, …, которая определяет какого вида бутылки находятся после сортировки в 1-м, 2-м, …, N-м контейнерах. Во второй строке располагается число, определяющее искомое количество перемещений бутылок. Если возможно несколько вариантов ответа, то необходимо выдать любой из них.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4<br>
1 2 3 4<br>
5 6 7 8<br>
9 10 11 12<br>
13 14 15 16
</td><td valign=top>ABCD<br>
102
</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=451" target="_blank">Задача №451</a><br>Рекурсия, перебор<br>Арифметическое выражение</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 56%)</i></center>
<p class=text>
Требуется вычислить значение арифметического выражения, в записи которого могут использоваться вещественные числа, круглые скобки, операции «+», «-», «*» и «/», а так же функции cos(x) и sin(x). Вычисление следует проводить согласно синтаксису языка Pascal.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит единственную строку, в которой находится запись арифметического выражения. Длина строки не превышает 200 символов. В строке могут содержаться любые символы. Гарантируется, что при корректном вычислении выражения не будет возникать переполнения 6-байтного вещественного типа и деления на ноль.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите значение заданного арифметического выражения с точностью, не меньше 10<sup>-3</sup>. В том случае, когда в выражении присутствуют синтаксические ошибки, следует вывести «Error».
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>2+3</td><td valign=top>5</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>7*8 - 120/6 + 4</td><td valign=top>40</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>10/(6-2)+8</td><td valign=top>10.5</td></tr>
<tr class=white2><td align=center>4</td><td valign=top>sin(3.14/2)+cos(2-6/3)</td><td valign=top>2</td></tr>
<tr class=white2><td align=center>5</td><td valign=top>three plus five</td><td valign=top>Error</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=453" target="_blank">Задача №453</a><br>Длинная арифметика<br>Раз-два, раз-два</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 49%)</i></center>
<p class=text>
Для заданного натурального числа N требуется найти число, состоящее только из цифр 1 и 2, которое делилось бы на 2<sup>N</sup>.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит натуральное число N, не превосходящее 300.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите искомое число, состоящее не более чем из 10 000 цифр.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1</td><td valign=top>2</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>2</td><td valign=top>12</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=454" target="_blank">Задача №454</a><br>Математическое моделирование<br>Оставшееся число</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 45%)</i></center>
<p class=text>
Задан ряд последовательных натуральных чисел от M до N (M < N), из которого удаляют сначала все числа, стоящие на нечетных местах. Затем, из оставшегося ряда удаляют все числа, стоящие в нем на четных местах. Эти действия повторяют до тех пор, пока не останется одно число.
</p>
<p class=text>
Требуется написать программу, которая находит оставшееся число.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит число M в первой строке и число N во второй (M < N < 10<sup>9</sup>).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите оставшееся число.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1<br>4</td><td valign=top>2</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>2<br>9</td><td valign=top>7</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=456" target="_blank">Задача №456</a><br>Целочисленная арифметика<br>Сундук Билли Бонса</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 30%)</i></center>
<p class=text>
Билли Бонс положил в сундук некоторое количество золотых монет. На второй год он вынул из сундука сколько-то монет. Начиная с третьего года, он добавлял столько монет, сколько было в сундуке два года назад.
</p>
<p class=text>
Требуется написать программу, которая определит, сколько монет было в сундуке в первый и во второй года, если в X-м году там оказалось ровно Y монет.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит натуральные числа X и Y (3 <= X <= 20, 1 <= Y <= 32767).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите через пробел количество монет в первый и второй года. Гарантируется, что решение задачи всегда существует.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>6 25</td><td valign=top>5 2</td></tr>
</table>

<h2>Пояснение к примеру</h2>

<p class=text>
Если в первый год положить 5 монет, а во второй год вынуть 3 монеты, то начиная с первого года в сундуке будет 5, 2, 7, 9, 16, 25, ... монет.
</p>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=458" target="_blank">Задача №458</a><br>Разбор строк<br>Шифровка - 2</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 35%)</i></center>
<p class=text>
Для кодирования сообщения используют следующие действия: сообщение записывают, опуская пробелы, в прямоугольник заданной высоты по столбцам, а затем прочитывают строки в заданном порядке.
</p>
<blockquote>
<pre>
1 П Р И А
2 Р А Р Н
3 О М О И
4 Г М В Е
</pre>
</blockquote>
<p class=text>
а затем, если выбрать порядок строк 3, 1, 2, 4, получают закодированное сообщение ОМОИПРИАРАРНГМВЕ.
</p>
<p class=text>
Требуется написать программу, которая по заданным высоте прямоугольника и порядке прочтения строк при кодировке декодирует заданное сообщение.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит: в первой строке высоту прямоугольника (не больше 10), во второй – порядок прочтения строк (числа записаны через пробел), в третьей – закодированное сообщение, длина которого не превышает 200.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT записывается декодированное сообщение.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4<br>
3 1 2 4<br>
ОМОИПРИАРАРНГМВЕ</td><td valign=top>ПРОГРАММИРОВАНИЕ</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>2<br>
2 1<br>
ииафзк</td><td valign=top>физика</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=459" target="_blank">Задача №459</a><br>Теория графов<br>Нить Ариадны</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 40%)</i></center>
<p class=text>
Тезею из лабиринта Минотавра помог выйти клубок ниток. Вы можете вместо клубка использовать персональный компьютер.
</p>
<p class=text>
Требуется написать программу, которая вводит маршрут Тезея в лабиринте и находит кратчайший обратный путь, по которому Тезей сможет выйти из лабиринта, не заходя в тупики и не делая петель.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит маршрут Тезея, который представлен строкой, состоящей из букв: N, S, W, E и длиной не более 200.
</p>
<p class=text>
Буквы означают:
</p>
<blockquote>
N - один "шаг" на север,<br>
S - один "шаг" на юг,<br>
W - один "шаг" на запад,<br>
E - один "шаг" на восток.<br>
</blockquote>
<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT записывается аналогично входному файлу найденный обратный путь. Если маршрут неоднозначен, то следует выбирать согласно следующему приоритету: N, E, S, W.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>EENNESWSSWE</td><td valign=top>NWW</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=461" target="_blank">Задача №461</a><br>Сортировка и последовательности<br>Выборы</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 26%)</i></center>
<p class=text>
В одном из государств все решения традиционно принимались простым большинством голосов на общем собрании граждан, которых, к счастью, было не очень много. Одна из местных партий, стремясь прийти к власти как можно более законным путем, смогла добиться некоторой реформы избирательной системы. Главным аргументом было то, что население острова в последнее время значительно возросло, и проведение общих собраний перестало быть легкой задачей.
</p>
<p class=text>
Суть реформы состояла в следующем: с момента введения ее в действие все избиратели острова делились на K групп (необязательно равных по численности). Голосование по любому вопросу теперь следовало проводить отдельно в каждой группе, причем считалось, что группа высказывается "за", если "за" голосует более половины людей в этой группе, а в противном случае считалось, что группа высказывается "против". После проведения голосования в группах подсчитывалось количество групп, высказавшихся "за" и "против", и вопрос решался положительно в том и только том случае, когда групп, высказавшихся "за", оказывалось более половины общего количества групп.
</p>
<p class=text>
Эта система вначале была с радостью принята жителями острова. Когда первые восторги рассеялись, очевидны стали, однако, некоторые недостатки новой системы. Оказалось, что сторонники партии, предложившей систему, смогли оказать некоторое влияние на формирование групп избирателей. Благодаря этому, они получили возможность проводить некоторые решения, не обладая при этом реальным большинством голосов.
</p>
<p class=text>
Пусть, например, на острове были сформированы три группы избирателей, численностью в 5, 5 и 7 человек соответственно. Тогда партии достаточно иметь по три сторонника в каждой из первых двух групп, и она сможет провести решение всего 6-ю голосами "за", вместо 9-и, необходимых при общем голосовании.
</p>
<p class=text>
Требуется написать программу, которая по заданному разбиению избирателей на группы определит минимальное количество сторонников партии, достаточное для принятия любого решения.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT состоит из двух строк. В первой строке записано натуральное число K < 1001 - количество групп избирателей. Во второй строке через пробел записаны K натуральных чисел, которые задают количество избирателей в группах. Население острова не превосходит 30000 человек.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите ответ на задачу.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3<br>
5 5 7
</td><td valign=top>6</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>5<br>
4 2 1 3 7
</td><td valign=top>5</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=468" target="_blank">Задача №468</a><br>Комбинаторика<br>Числовая последовательность - 2</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 66%)</i></center>
<p class=text>
Дана последовательность  натуральных чисел 7, 11, 13, 14, 19, 21, 22, 25, ….
</p>
<p class=text>
Требуется написать программу, которая по заданному N находит N-ый член этой последовательности.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит число N (1 <= N <= 2147483647).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите N-ый член последовательности.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1</td><td valign=top>7</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>6</td><td valign=top>21</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=472" target="_blank">Задача №472</a><br>Сортировка и последовательности<br>Подарки</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 39%)</i></center>
<p class=text>
Приближался Новый год и отец купил своим детям по подарку. Оказалось, что в них разное количество конфет. Тогда отец купил еще конфет и стал их раскладывать по подаркам следующим образом: брал один из подарков с наименьшим количеством конфет и добавлял в него одну конфету.
</p>
<p class=text>
Требуется написать программу, которая найдет наименьшее количество конфет, оказавшихся в одном из подарков после завершения раскладывания всех конфет.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной текстовый файл INPUT.TXT содержит в первой строке N – количество детей и M – количество купленных конфет. Числа записаны через пробел, 1 <= N <= 10 000, 1 <= M <= 1 000 000. Далее в N строках записаны числа в диапазоне от 1 до 30000 – количество конфет в подарках. 
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать одно найденное число.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>2 4<br>
1<br>
2
</td><td valign=top>3</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=473" target="_blank">Задача №473</a><br>Динамическое программирование<br>Автомобильные пробки</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 48%)</i></center>
<p class=text>
Автомобильные пробки случаются везде, даже в нашем небольшом городе. Дороги у нас имеют по две полосы в одном направлении, а автомобили только двух видов: легковые (в пробке занимают квадратное место 1x1 от ширины одной полосы) и грузовые (занимают прямоугольное место 1x2). Автомобилисты очень дисциплинированы: не становятся поперек полосы, не занимают чужую площадь, но и не оставляют свободных мест.
</p>
<p class=text>
Требуется написать программу, которая определит количество различных автомобильных пробок длины N.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит одно  натуральное число N (N <= 1000).
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать найденное количество автомобильных пробок.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>2</td><td valign=top>4</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>3</td><td valign=top>9</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=474" target="_blank">Задача №474</a><br>Длинная арифметика<br>Последовательность Кеане</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 57%)</i></center>
<p class=text>
Бесконечная последовательность битов, предложенная Кеане, равна 001001110001001110110110001… и формируется следующим алгоритмом: вначале записывается 0, потом 001, далее 001001110, то есть, для получения следующего члена, предыдущий записывается дважды, а справа приписывается его отрицание. Элементы этого ряда являются начальными подпоследовательностями Кеане.
</p>
<p class=text>
Требуется написать программу, которая по заданному n определит N-й бит этой последовательности.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит число N (N <= 10<sup>200</sup>).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT должен содержать найденный бит. 
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3</td><td valign=top>1</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>18</td><td valign=top>0</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=480" target="_blank">Задача №480</a><br>Динамическое программирование<br>Игра в монеты</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 47%)</i></center>
<p class=text>
Гриша и Дима играют в следующую игру: они разложили однокопеечные монетки в стопки (в разных стопках может быть различное количество монет), а стопки расположили на столе перед собой в ряд слева направо. Затем Гриша и Дима по очереди делают ходы. На каждом ходе один из игроков берет слева несколько стопок, не меньше одной, но и не больше, чем перед этим взял его соперник. Первый игрок своим первым ходом берет не более K стопок. Игра заканчивается, когда стопок не остается. 
</p>
<p class=text>
Требуется написать программу, позволяющую вычислить, какое максимальное число монет может получить первый участник после окончания игры, если второй –  тоже старается ходить так, чтобы получить как можно больше монет.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT состоит из одной строки, в которой записаны: число стопок N (1 <= N <= 180), за ним идут N чисел, задающих количество монет в стопках слева направо (количество монет в стопке — не менее 1 и не более 20000), а затем число K, ограничивающее количество стопок, которые первый игрок может взять на первом ходе (1 <= K <= 80). Все числа в строке разделены пробелом.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT необходимо вывести одно число — максимальное количество монет, которое заведомо может получить первый игрок, как бы ни играл второй.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3 4 9 1 3</td><td valign=top>14</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>4 2 2 1 7 3</td><td valign=top>5</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>5 3 4 8 1 7 2</td><td valign=top>18</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=485" target="_blank">Задача №485</a><br>Математическое моделирование<br>Рыбаки</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 29%)</i></center>
<p class=text>
<i>Говорят, что однажды Дираку предложили решить следующую задачу.</i>
</p>
<p class=text>
<i>Трое рыбаков отправились на рыбалку. Наловив рыбы, они устроились на ночлег. Проснувшись, один из рыбаков решил взять свою долю (третью часть) и отправиться домой. Пересчитав рыбу, он заметил, что на троих выловленная рыба не делится – остается одна лишняя. Недолго думая, первый рыбак выкинул лишнюю рыбу в море, взял свою долю и отправился домой. </i>
</p>
<p class=text>
<i>Затем проснулся второй рыбак. Не заметив, что один из его товарищей уже уехал, он тоже стал делить оставшуюся рыбу на троих, и у него тоже получилась одна лишняя рыба. Поступив с лишней рыбой, также как и первый рыбак, он забрал долю, которую считал своей и поехал домой. </i>
</p>
<p class=text>
<i>Третий рыбак также не обнаружил исчезновения своих товарищей и тоже стал делить рыбу на троих. И у него получилась одна лишняя рыба, которую он выкинул, после чего забрал третью часть и отбыл домой. </i>
</p>
<p class=text>
<i>Вопрос, заданный Дираку, звучал так: сколько рыбы поймали рыбаки?</i>
</p>


<p class=text>
Обобщим данную задачу следующим образом. 
</p>
<p class=text>
Однажды N рыбаков отправились на рыбалку, где поймали X рыб. После этого рыбаки легли спать. Утром, просыпаясь друг за другом, каждый из них делил выловленную рыбу на N частей. Каждый раз в остатке оставалось ровно K рыб (0 < K < N). Эти K рыб выбрасывались обратно в море.
</p>
<p class=text>
Ваша задача – определите при заданных N и K минимально возможное целое положительное значение X – число рыб, удовлетворяющее условию задачи.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит два целых числа N и K, разделенные пробелом (2 &#8804; N &#8804; 8, 0 < K < N).
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать одно целое положительное число X – наименьшее возможное количество выловленной рыбаками рыбы.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3 1</td><td valign=top>25</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>4 3</td><td valign=top>247</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=486" target="_blank">Задача №486</a><br>Математическое моделирование<br>Рыбаки - 2</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 53%)</i></center>
<p class=text>
Однажды N рыбаков отправились на рыбалку, где поймали X рыб. После этого рыбаки легли спать. Утром, просыпаясь друг за другом, каждый из них делил выловленную рыбу на N частей. Каждый раз в остатке оставалось ровно K рыб (0 < K < N). Эти K рыб выбрасывались обратно в море.
</p>
<p class=text>
Ваша задача – определите при заданных N и K минимально возможное целое положительное значение X – число рыб, удовлетворяющее условию задачи.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит два целых числа N и K, разделенные пробелом (2 &#8804; N &#8804; 15, 0 < K < N).
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать одно целое положительное число X – наименьшее возможное количество выловленной рыбаками рыбы.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3 1</td><td valign=top>25</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>4 3</td><td valign=top>247</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=487" target="_blank">Задача №487</a><br>Математическое моделирование<br>Игра "Баше"</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 49%)</i></center>
<p class=text>
Студент и профессор играют в игру «Баше» по следующим правилам. 
</p>
<p class=text>
На столе лежат N экзаменационных билетов. Игроки делают ходы поочередно, и в свой ход каждый из игроков может взять от 1 до K билетов. Выигрывает тот игрок, который возьмет билет, оставшийся последним. Т.е. если его возьмет студент, то он получит «зачет», иначе он получит «незачет».
</p>
<p class=text>
Будем называть сделанный ход ошибочным, если в этой ситуации можно было сходить иначе, гарантируя себе в дальнейшем выигрыш независимо от игры соперника. Будем называть ход правильным (или допустимым), если он не является ошибочным.
</p>
<p class=text>
Ваша задача – проанализировать уже сыгранную партию и указать для каждого хода, был ли он правильным или ошибочным. 
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT записаны три целых числа: N, K, P (2 &#8804; N  &#8804; 10000, 2 &#8804; K &#8804; 100, 2 &#8804; P). Здесь P – количество ходов, которые сделали студент и профессор. В последующих P строках записаны числа (по одному числу на строке) в диапазоне от 1 до K.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать P строк по одному символу на строке:  «T» (правильный или допустимый ход – от слова True) или «F» (неверный ход – от слова False).
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>10 5 3<br>
3<br>
3<br>
4
</td><td valign=top>F<br>
F<br>
T
</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=490" target="_blank">Задача №490</a><br>Математическое моделирование<br>Дни рождения</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 27%)</i></center>
<p class=text>
Два одноклассника Петя и Вася родились не ранее 1993 и не позднее 1994 года, причем, Петя старше Васи.
</p>
<p class=text>
Напишите программу, которая по заданным дням рождения определяет: на сколько дней Петя старше Васи.
</p>
<p class=text>
Заметим, что 1993 и 1994 года не являются високосными, т.е. в феврале в них ровно 28 дней.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит дату рождения Пети в первой строке и дату рождения Васи во второй. Даты заданы в формате «ДД.ММ.ГГ», например, строка 06.02.93 означает дату рождения 6 февраля 1993 года. 
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите единственное число – искомое количество дней.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>01.01.93<br>02.01.93</td><td valign=top>1</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>05.02.94<br>05.03.94</td><td valign=top>28</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=499" target="_blank">Задача №499</a><br>Задачи для начинающих<br>Турист</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 22%)</i></center>
<p class=text>
Гена собирается на туристический слет учеников своей школы. В своем классе он был назначен ответственным за палатки. У себя дома он нашел 3 палатки: первая из них весит a<sub>1</sub> килограмм и вмещает b<sub>1</sub> человек, вторая весит a<sub>2</sub> килограмм и вмещает b<sub>2</sub> человек, третья весит a<sub>3</sub> килограмм и вмещает b<sub>3</sub> человек.
</p>
<p class=text>
В классе Гены K человек. Выясните, может ли он выбрать палатки так, чтобы в них все могли поместиться. При этом учитывайте, что выбранные палатки должны суммарно весить не более W килограмм.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит два целых числа: K и W (1 <= K <= 15, 1 <= W <= 30). Вторая строка содержит шесть целых чисел: a<sub>1</sub>, b<sub>1</sub>, a<sub>2</sub>, b<sub>2</sub>,  a<sub>3</sub>, b<sub>3</sub> (1 <= a<sub>1</sub>, a<sub>2</sub>,  a<sub>3</sub> <= 10, 1 <= b<sub>1</sub>, b<sub>2</sub>,  b<sub>3</sub> <= 15).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите YES, если палатки указанным образом выбрать можно, и NO в противном случае.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>10 10<br>5 5 6 6 4 5</td><td valign=top>YES</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>10 10<br>5 5 6 6 7 7</td><td valign=top>NO</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=501" target="_blank">Задача №501</a><br>Двумерные массивы<br>Строение</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 25%)</i></center>
<p class=text>
Администрация города подбирает площадку для строительства новых спортивных сооружений. На рассмотрении несколько проектов, каждый проект требует выделения  некоторого прямоугольного участка земли. Некоторые участки оказались частично или полностью в пользовании частными лицами, а в случае утверждения проекта администрация будет вынуждена выкупить этот участок, поэтому для определения стоимости очень важно знать площадь пересечения участков. Участки частников также прямоугольной формы (рис. 1) и стороны всех участков параллельны координатным осям. Для каждого проекта был построен план, включающий подобранный участок и его окружение. В приведенном примере показано пересечение участков частников (тонкая линия) с участком, подобранным для строительства (толстая линия). Помогите определить суммарную площадь пересечения участков частников с участком, выбранным для строительства.
</p>
<center><img src="acmp_files/image01F.gif" alt="Строение"></center>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT содержится число N - количество участков частников, отображенных на плане. Затем следуют N строк с координатами двух вершин этих прямоугольных участков. В последней строке плана координаты участка, подобранного для строительства. Координаты противоположных вершин одного прямоугольника описываются в формате X<sub>1</sub> Y<sub>1</sub> X<sub>2</sub> Y<sub>2</sub>. Координатами вершин являются целые, неотрицательные числа, не больше 100. Количество исходных прямоугольников не больше 20.
</p>

<h2>Выходные данные</h2>

<p class=text>
В единственную строку выходного файла OUTPUT.TXT следует вывести одно целое число – искомую суммарную площадь пересечения прямоугольников.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1<br>
15 15 25 25<br>
10 10 20 20</td><td valign=top>25</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>2<br>
15 15 25 25<br>
5  5  12 12<br>
10 10 20 20</td><td valign=top>29</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=502" target="_blank">Задача №502</a><br>Динамическое программирование<br>Лягушонок</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 39%)</i></center>
<p class=text>
Многие, вероятно, слышали песни про приключения лягушонка Crazy Frog. На этот раз неугомонное милое создание решило подкрепиться, но даже такое простое действие решило выполнить в виде игры. Итак, в каждой клетке квадратного игрового поля, разбитого на N*N (N<=50) клеток, находится комар весом a<sub>ij</sub> (вес комара – натуральное число <= 50), i - номер строки, j - номер столбца. Лягушонок, прыгая с клетки на клетку, ест комаров. Правила игры таковы - в каждом столбце можно съесть не более одного комара. Всякий раз при съедании комара запоминаем номер строки, откуда съеден комар, и сумма номеров строк, в которых были съедены комары, в конце игры должна быть в точности равна N. Учтите, если из какой-то строки съедено несколько комаров, то номер данной строки участвует в суммировании более одного раза.
</p>
<p class=text>
Определите максимальный вес комаров, который можно съесть при следовании приведённым правилам.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит число N. Следующие N строк содержат по N чисел a<sub>ij</sub>, разделенных пробелами.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите целое число – количество съеденных комаров.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3<br>8 2 1<br>1 2 6<br>2 7 2</td><td valign=top>14</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>5<br>
8 2 1 2 3<br>
1 2 6 2 4<br>
2 7 2 3 4<br>
1 3 2 4 4<br>
1 3 4 3 1
</td><td valign=top>19</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=511" target="_blank">Задача №511</a><br>Задачи для начинающих<br>Очередь</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 20%)</i></center>
<p class=text>
Студент Василий живет в общежитии. Отделение банка, в котором он производит оплату за проживание, имеет всего две кассы, поэтому почти всегда длинная очередь к ним. Первая касса открывается в 8.00, вторая – в 8.05. Последний клиент будет принят в 20.00. Очередь единая, и очередной клиент обслуживается, как только освобождается одна из касс. На обслуживание одного клиента уходит ровно 10 минут. Василий приходит ровно в 8.00 и видит, сколько человек стоит перед ним. Требуется определить, сколько времени ему придется простоять в очереди, и вообще обслужат ли его сегодня.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит единственное натурально число K – номер Василия в очереди (K < 250).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выводится строка «NO», если Василий сегодня заплатить уже не успеет, и время его ожидания (в формате «X Y», где X – количество целых часов, которые простоит в очереди Василий, и Y – количество минут), если все же успеет заплатить.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1</td><td valign=top>0 0</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>20</td><td valign=top>1 35</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>235</td><td valign=top>NO</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=515" target="_blank">Задача №515</a><br>Геометрия<br>Ловушки</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 24%)</i></center>
<p class=text>
Далеко не все в Тентуре имеют право носить малиновые штаны, и конечно, не все владеют пепелацем с гравицапой, зато один предприимчивый чатланин поставил несколько ловушек, захватывающих отваливающиеся детали с пролетающих мимо инопланетных кораблей. Каждое утро он их обходит, в надежде, что рано или поздно из этих запчастей ему удастся собрать какое-нибудь транспортное средство. Путь свой чатланин планирует по карте, на которой аккуратно отмечены ловушки, отсчитывая начало координат от собственного дома. Начинается обход от дома, и в нем же и заканчивается. 
</p>
<p class=text>
Требуется определить, какое расстояние проходит  чатланин за день.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT находится натуральное число N – количество ловушек, установленных чатланином (N<=10), далее следуют N строк формата «X Y», описывающих координаты ловушек в порядке их обхода (-10 <= X,Y <= 10; X,Y – целые числа).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите общее расстояние, которое пройдет чатланин, обойдя все ловушки в приведенном порядке и вернувшись в начало координат от последней ловушки, с точностью до трех знаков после запятой.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1<br>1 0</td><td valign=top>2.000</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>2<br>1 0<br>1 1</td><td valign=top>3.414</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>3<br>1 0<br>1 1<br>0 1</td><td valign=top>4.000</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=517" target="_blank">Задача №517</a><br>Математическое моделирование<br>Боулинг</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 29%)</i></center>
<p class=text>
Цель при игре в боулинг – сбить шаром максимальное количество кеглей. Партия в этой игре состоит из 10 туров. Задача игрока – сбить все 10 кеглей в каждом туре. Для этого игрок может совершить 2 броска шара, за исключением:
</p>
<ul>
<li>если 10 кеглей сбиты первым броском, то второй бросок не совершается;</li>
<li>если 10 кеглей сбиты первым броском в десятом туре, то игроку предоставляются два призовых броска, а если двумя бросками – один.</li>
</ul>
<p class=text>
Количество очков в каждом туре равно количеству сбитых кеглей, кроме двух бросков, называемых «Strike» и «Spire».
</p>
<p class=text>
Strike: игрок сбивает 10 кеглей первым броском, очки в этом туре начисляются из расчета – 10 + сумма очков за два последующих броска. 
</p>
<p class=text>
Spire: игрок сбивает 10 кеглей двумя бросками, очки в этом туре начисляются из расчета – 10 + сумма очков за один последующий бросок.
</p>
<p class=text>
Результат партии складывается из результатов всех 10 туров.
</p>
<p class=text>
Требуется написать программу, которая определит количество набранных игроком очков.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит в первой строке одно натуральное число, определяющее количество совершенных бросков. Вторая строка содержит натуральные числа (разделенные пробелом), обозначающие количество сбитых кеглей за каждый совершенный бросок.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать одно целое число – количество набранных игроком очков.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>12<br>
10 10 10 10 10 10 10 10 10 10 10 10</td><td valign=top>300</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>20<br>
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0</td><td valign=top>0</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>15<br>
10 10 10 8 2 10 3 4 8 2 4 5 10 4 5</td><td valign=top>173</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=520" target="_blank">Задача №520</a><br>Простая математика<br>Оптовая покупка</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 27%)</i></center>
<p class=text>
Пара носков стоит 10 руб. 50 коп., связка (12 пар) стоит 102 руб. 50 коп., а коробка (12 связок) стоит 1140 руб.
</p>
<p class=text>
Требуется написать программу, которая по числу пар носков, которые хочет купить покупатель, вычисляет количества коробок, связок и пар носков, которые ему следует купить с наибольшей выгодой.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит натуральное число N (N <= 10<sup>9</sup>) – число пар носков, которые желает купить покупатель.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать три числа (первое – количество коробок, второе – связок, третье – пар носков), разделенные пробелами.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>11</td><td valign=top>0 1 0</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>500</td><td valign=top>3 5 8</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=521" target="_blank">Задача №521</a><br>Математическое моделирование<br>Пасьянс старухи Шапокляк</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 25%)</i></center>
<p class=text>
На столе лежат колоды игральных карт. В самой тоненькой колоде – p карт, во второй – p+1, в третьей – p+2, …, в последней – k карт. Старуха Шапокляк раскладывает пасьянс. Беря в руки любую из колод, она, если число карт в ней четное, на место возвращает колоду, наполовину уменьшив число карт в ней (лишние убирает в ящик), а если количество карт в колоде нечетное, то утраивает их количество и добавляет еще одну карту, а уже тогда кладет колоду на стол (карт у нее в ящике для этой операции достаточно). Если в какой-то колоде остается две карты, она больше ее не трогает. Пасьянс сходится, если во всех колодах остается по две карты.
</p>
<p class=text>
Требуется написать программу, которая определит сходится ли пасьянс, и если сходится – сколько раз должна старуха Шапокляк брать со стола карты.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит 2 числа, записанные через пробел (2 < p < k < 1000). 
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать 0, если пасьянс не сходится, и, если сходится, количество «ходов» старухи Шапокляк.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>2 3</td><td valign=top>6</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>5 8</td><td valign=top>28</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=523" target="_blank">Задача №523</a><br>Динамическое программирование<br>Роман в томах</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 41%)</i></center>
<p class=text>
В романе N глав. В i-той главе a<sub>i</sub> страниц. Требуется издать роман в K томах так, чтобы объем самого «толстого» тома был минимален. В каждом томе главы располагаются по порядку своих номеров.
</p>
<p class=text>
Требуется написать программу, которая найдет количество страниц в самом «толстом» томе.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной текстовый файл INPUT.TXT содержит в первой строке число N (1 <= N <= 100). Во второй строке через пробел записаны N чисел – количество страниц в каждом томе. Количество страниц в романе не превышает 32767. В третьей строке записано число K (1 <= K <= N).
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать количество страниц в самом «толстом» томе.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3<br>
1 2 1<br>
2
</td><td valign=top>3</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>4<br>
1 2 1 1<br>
3</td><td valign=top>2</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=524" target="_blank">Задача №524</a><br>Геометрия<br>Слон</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 34%)</i></center>
<p class=text>
На шахматной доске 8*8 клеток стоит слон (фигура, которая ходит по диагонали). 
</p>
<p class=text>
Требуется написать программу, которая определит: сможет ли слон дойти до заданной клетки (x, y). Если сможет, то указать за какое наименьшее количество ходов. Если количество ходов больше одного, то указать через какие промежуточные клетки он должен пройти. Если таких маршрутов несколько, то указать любой из них.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит четыре числа m, n, x, y. (m, n) – координаты клетки, на котором находится слон, (x, y) – координаты клетки, на которую надо попасть. Числа m, n, x, y задаются в диапазоне от 1 до 8 и записываются через пробел.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать в первой строке k – минимальное количество ходов, а далее в k-1 строках по 2 числа через пробел – координаты посещенных клеток. Если слон не может попасть на заданную клетку, то вывести 0.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1 1 3 1</td><td valign=top>2<br>2 2</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>1 1 3 3</td><td valign=top>1</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>1 1 4 1</td><td valign=top>0</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=526" target="_blank">Задача №526</a><br>Целочисленная арифметика<br>Уравнение по основанию</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 26%)</i></center>
<p class=text>
Запись A<sub>X</sub> обозначает, что A есть запись числа в системе счисления по основанию X. Если X>10, то для записи числа используются кроме цифр от 0 до 9 заглавные латинские буквы от A до Z. При этом условии X не может быть больше 36.
</p>
<p class=text>
Требуется написать программу, которая по заданным A и B найдет решение уравнения A<sub>X</sub> = B, либо сообщит об отсутствии у него решений.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит в первой строке число A, во второй число B (1 <= B <= 10<sup>7</sup>).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите либо основание системы счисления, удовлетворяющее уравнению, либо 0, если уравнение не имеет решений.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>A1<br>161</td><td valign=top>16</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>201<br>26</td><td valign=top>0</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=527" target="_blank">Задача №527</a><br>Целочисленная арифметика<br>Алгоритм Евклида</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 40%)</i></center>
<p class=text>
Дима недавно начал изучать информатику. Одним из первых алгоритмов, который он изучил, был алгоритм Евклида для нахождения наибольшего общего делителя (НОД) двух чисел. Напомним, что наибольшим общим делителем двух чисел a и b называется наибольшее натуральное число x, такое, что и число a, и число b делится на него без остатка.
</p>
<p class=text>
Алгоритм Евклида заключается в следующем:
</p>
<ol>
<li>Пусть a, b – числа, НОД которых надо найти.</li>
<li>Если b = 0, то число a – искомый НОД.</li>
<li>Если b > a, то необходимо поменять местами числа a и b.</li>
<li>Присвоить числу a значение a – b.</li>
<li>Вернуться к шагу 2.</li>
</ol>
<p class=text>
Дима достаточно быстро освоил алгоритм Евклида и вычислил с его помощью много наибольших общих делителей. Поняв, что надо дальше совершенствоваться, ему пришла идея решить новую задачу. Пусть заданы числа a, b, c и d. Требуется узнать, наступит ли в процессе реализации алгоритма Евклида для заданной пары чисел (a, b) такой момент, когда число a будет равно c, а число b будет равно d. 
</p>
<p class=text>
Требуется написать программу, которая решает эту задачу.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит количество наборов входных данных k (1 &#8804; k &#8804; 100). Далее идут описания этих наборов. Каждое описание состоит из двух строк. Первая из них содержит два целых числа: a, b (1 &#8804; a, b &#8804; 10<sup>18</sup>). Вторая строка – два целых числа: c, d (1 &#8804; c, d &#8804; 10<sup>18</sup>).
</p>

<h2>Выходные данные</h2>

<p class=text>
Для каждого набора входных данных выведите в отдельной строке выходного файла OUTPUT.TXT слово «YES», если в процессе применения алгоритма Евклида к паре чисел (a, b) в какой-то момент получается пара (c, d), или слово «NO» – в противном случае.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>2<br>20 10<br>10 10<br>10 7<br>2 4</td><td valign=top>YES<br>NO</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=535" target="_blank">Задача №535</a><br>Длинная арифметика<br>Неправильное сложение</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 41%)</i></center>
<p class=text>
Володя написал программу, которая складывает в столбик два числа. К сожалению, он не разобрался, как правильно переносить единицу из одного разряда в следующий. Поэтому программа стала выполняться следующим образом. Сначала она складывает последние цифры обоих чисел и записывает результат, как в случае, если он однозначный, так и в случае, если он двузначный. Затем программа складывает предпоследние цифры обоих чисел и результат сложения приписывает слева к результату предыдущего сложения. Далее процесс повторяется для всех разрядов. Если в одном числе цифр меньше, чем в другом, то программа размещает нули в соответствующих разрядах более короткого числа.
</p>
<p class=text>
Федя хочет доказать Володе, что его способ сложения не обладает свойством ассоциативности. В частности, Федя утверждает, что существуют три числа, для которых важен порядок, в котором их складывают (при этом разрешается складывать числа в любом порядке, например можно сначала сложить первое число и последнее, а затем прибавить к ним среднее). Федя привел даже пример трех таких чисел.
</p>
<p class=text>
Требуется написать программу, которая поможет Феде и Володе определить, верно ли утверждение, что, складывая заданные три числа в разном порядке, можно получить разные суммы.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит в одной строке три целых числа a, b и c (1 &#8804; a, b, c &#8804; 10<sup>6</sup>). Все числа в строке разделены пробелом.
</p>

<h2>Выходные данные</h2>

<p class=text>
В первую строку выходного файла OUTPUT.TXT необходимо вывести слово YES, если данные три числа можно сложить разными способами и получить разные суммы. В противном случае, необходимо вывести слово NO.
</p>
<p class=text>
В последующих строках необходимо вывести все возможные суммы, которые можно получить, складывая числа a, b и c. Суммы следует выводить по одной на строке и в порядке их возрастания.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>30 239 566</td><td valign=top>YES<br>
7945<br>
71215
</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>643 733 553</td><td valign=top>NO<br>18129</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=536" target="_blank">Задача №536</a><br>Динамическое программирование<br>Числа - 2</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 45%)</i></center>
<p class=text>
Решая задачу по информатике, Вова в очередной раз допустил ошибку. Он снова вывел в выходной файл числа, забыв разделить их пробелами. Увидев полученный результат, Вова сначала огорчился, а потом задумался над следующим вопросом: сколько существует различных последовательностей неотрицательных целых чисел, таких что, если выписать их без пробелов, то получится тот же результат, что и у него. Он вспомнил также, что его программа смогла вывести не произвольные числа, а только те, что не превосходят C и не имеют ведущих нулей. </p>
<p class=text>
Чтобы ответить на поставленный вопрос, Вова решил написать программу, которая позволит ему найти число различных последовательностей неотрицательных целых чисел, в каждой из которых любое число не превосходит C. Он понимал, что такое число могло быть достаточно большим, поэтому ограничился поиском только последних k цифр этого числа.</p>
<p class=text>
Требуется написать программу, которая покажет Вове, как можно правильно решить поставленную им задачу.</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит три целых числа – N, C и K (1 &#8804; N &#8804; 50000, 1 &#8804; C &#8804; 10<sup>8</sup>, 1 &#8804; K &#8804; 18). Во второй строке этого файла содержится результат работы Вовиной программы, состоящий из N цифр.</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите последние K цифр искомого количества последовательностей без ведущих нулей.</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3 11 2<br>111</td><td valign=top>3</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>19 9 1<br>0123456789876543210</td><td valign=top>1</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>1 8 3<br>9</td><td valign=top>0</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=540" target="_blank">Задача №540</a><br>Динамическое программирование<br>Таблица</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 45%)</i></center>
<img src="acmp_files/image01N.gif" align=right vspace=5 hspace=5>
<p class=text>
Рассмотрим прямоугольную таблицу размером n x m. Занумеруем строки таблицы числами от 1 до n, а столбцы – числами от 1 до m. Будем такую таблицу последовательно заполнять числами следующим образом. 
</p>
<p class=text>
Обозначим через a<sub>ij</sub>  число, стоящее на пересечении i-ой строки и j-ого столбца. Первая строка таблицы заполняется заданными числами – a<sub>11</sub>, a<sub>12</sub>, …, a<sub>1m</sub>. Затем заполняются строки с номерами от 2 до n. Число a<sub>ij</sub> вычисляется как сумма всех чисел таблицы, находящихся в «треугольнике» над элементом a<sub>ij</sub>. Все вычисления при этом выполняются по модулю r.
</p>
<p class=text>
Более точно, значение a<sub>ij</sub> вычисляется по следующей формуле:
</p>
<img src="acmp_files/image01O.gif">
<p class=text>
Например, если таблица состоит из трех строк и четырех столбцов, и первая строка состоит из чисел 2,3,4,5, а r = 40 то для этих исходных данных таблица будет выглядеть следующим образом (взятие по модулю показано только там, где оно приводит к изменению числа):
</p>
<img src="acmp_files/image01P.gif">
<p class=text>
Требуется написать программу, которая по заданной первой строке таблицы (a<sub>11</sub>, a<sub>12</sub>, …, a<sub>1m</sub>), вычисляет последнюю строку, как описано выше.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит числа n, m и r (2 &#8804; n, m &#8804; 2000, 2 &#8804; r &#8804; 10<sup>9</sup>) – число строк и столбцов таблицы соответственно, а так же число, по модулю которого надо посчитать ответ. Следующая строка содержит m целых чисел – первую строку таблицы: a<sub>11</sub>, a<sub>12</sub>, …, a<sub>1m</sub>. Все a<sub>1i</sub> неотрицательны и не превосходят 10<sup>9</sup>.
</p>

<h2>Выходные данные</h2>

<p class=text>
В первой строке выходного файла OUTPUT.TXT необходимо вывести m чисел – последнюю строку таблицы: a<sub>n1</sub>, a<sub>n2</sub>, …, a<sub>nm</sub>.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>2 3 10<br>1 2 3</td><td valign=top>3 6 5</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>3 3 10<br>1 1 1</td><td valign=top>8 0 8</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>3 4 40<br>2 3 4 5</td><td valign=top>23 0 4 33</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=541" target="_blank">Задача №541</a><br>Длинная арифметика<br>Две строки</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 47%)</i></center>
<p class=text>
Циклическим сдвигом строки s<sub>1</sub>s<sub>2</sub>…s<sub>n</sub> на k позиций назовем строку s<sub>k</sub>s<sub>k+1</sub>…s<sub>n</sub>s<sub>1</sub>..s<sub>k-1</sub>. Например, циклическим сдвигом строки «abcde» на две позиции является строка «cdeab». В этой задаче далее будут рассматриваться только строки, состоящие из десятичных цифр от 0 до 9. Произвольной такой строке, первый символ которой не является нулем, можно сопоставить число, десятичной записью которого она является. Строкам, которые начинаются с нуля, никакое число сопоставляться не будет. Например, строке 123 сопоставляется число сто двадцать три, а строке 0123 не сопоставляется никакое число.
</p>
<p class=text>
Пусть заданы две строки: s и t. Обозначим как S набор всех циклических сдвигов строки s, а как T – набор всех циклических сдвигов строки t. Например, если s = «1234», то S содержит строки «1234», «2341», «3412», «4123». Обозначим также как NUM(A) набор чисел, соответствующих строкам из набора  A.
</p>
<p class=text>
Требуется написать программу, которая по строкам s и t определит, максимальное число, представимое в виде разности (x – y), где x принадлежит NUM(S), а y принадлежит NUM(T). Например, если s = «25», t = «12», то NUM(S) содержит числа 25 и 52, NUM(T) – числа 12 и 21; их попарными разностями будут: 25 – 12 = 13, 25 – 21  = 4, 52 – 12 = 40, 52 – 21 = 31. Из этих разностей максимальным числом является 40.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит строку s, вторая строка входного файла – строку t. Обе строки непустые. Они содержат только цифры, из которых хотя бы одна не является нулем. Строки имеют длину не более 3000 символов.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите искомое число без ведущих нулей.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>25<br>12</td><td valign=top>40</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>100<br>1</td><td valign=top>99</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=543" target="_blank">Задача №543</a><br>Простая математика<br>Монеты - 2</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 31%)</i></center>
<p class=text>
В N корзинах находятся золотые монеты. Корзины пронумерованы числами от 1 до N. Во всех корзинах, кроме одной, монеты весят по w граммов. В одной корзине монеты фальшивые и весят w–d граммов. Волшебник берет 1 монету из первой корзины, 2 монеты из второй корзины, и так далее, и, наконец, N-1 монету из (N-1)-й корзины. Из N-й корзины он не берет ничего. Он взвешивает взятые монеты и сразу указывает на корзину с фальшивыми монетами.
</p>
<p class=text>
Требуется написать программу, которая выполняет это волшебство.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит четыре целых числа: N, w, d и P – суммарного веса отобранных монет (2 &#8804; N &#8804; 8000, 1 &#8804; d < w &#8804; 30).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите номер корзины с фальшивыми монетами.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>10 25 8 1109</td><td valign=top>2</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>10 25 8 1125</td><td valign=top>10</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>8000 30 12 959879400</td><td valign=top>50</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=546" target="_blank">Задача №546</a><br>Простая математика<br>Печать буклета</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 29%)</i></center>
<p class=text>
Когда происходит печать документа, обычно первая страница печатается первой, вторая - второй, третья - третьей и так далее до конца. Но иногда при создании буклета на одном листе печатаются четыре страницы: две - на лицевой стороне и две - на обратной. Когда вы сложите все листы по порядку и согнете их пополам, страницы будут идти в правильном порядке, как у обычной книги. Например, 4-страничный буклет должен быть напечатан на одном листе бумаги: лицевая сторона должна содержать сначала страницу 4, потом - 1, обратная - 2 и 3.
</p>
<p class=text>
Если в буклете число страниц не кратно четырем, то в конце можно добавить несколько пустых страниц, но так, чтобы количество листов бумаги при этом было минимально возможным.
</p>
<p class=text>
Требуется написать программу, которая по заданному числу страниц в буклете генерирует порядок его печати.
</p>

<h2>Входные данные</h2>

<p class=text>
Во входном файле INPUT.TXT записано количество страниц в буклете - натуральное число, не превышающее 500.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT необходимо выдать порядок печати данного буклета - последовательность команд, каждая из которых располагается в отдельной строке и состоит из четырех чисел. Числа разделяются пробелом и обозначают следующее: номер листа, на котором происходит печать, сторону: 1 - если печать происходит на лицевой стороне, и 2 - если на обратной, два оставшихся числа - номера страниц буклета, которые должны быть напечатаны с левой и правой сторон.
</p>
<p class=text>
Пустая страница задается числом 0. Если целая сторона должна быть оставлена пустой, команду для ее печати выводить не обязательно.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4</td><td valign=top>1 1 4 1<br>
1 2 2 3</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=547" target="_blank">Задача №547</a><br>Целочисленная арифметика<br>Период дроби</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 35%)</i></center>
<p class=text>
Рассмотрим дробь 1/n, n>1. Как известно, цифры в её десятичной записи начиная с некоторого места повторяются. Минимальную по длине повторяющуюся (без промежутков) часть называют периодом. Минимальную по длине часть после запятой, которая не входит ни в один период, называют предпериодом. Например:
</p>
<p class=text>
n=3: 1/3=0,(3), предпериод пустой '', его длина 0, период '3', его длина 1; 
</p>
<p class=text>
n=5: 1/5=0,2(0), предпериод '2', длина 1, период '0', длина 1; 
</p>
<p class=text>
n=28: 1/28=0,03(571428), предпериод '03', длина 2, период '571428', длина 6.
</p>
<p class=text>
Требуется написать программу, которая по заданному n найдет длину предпериода и длину периода у дроби 1/n.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит одно натуральное число n (2 &#8804; n &#8804; 10<sup>6</sup>).
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной файл OUTPUT.TXT должен содержать два числа – сначала длина предпериода, потом длина периода дроби 1/n. Числа отделить друг от друга пробелом.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3</td><td valign=top>0 1</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>5</td><td valign=top>1 1</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>28</td><td valign=top>2 6</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=551" target="_blank">Задача №551</a><br>Геометрия<br>Заяц и дерево</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 29%)</i></center>
<img src="acmp_files/image01R.gif" align=right hspace=10 hspace=10>
<p class=text>
После строительства на выбранной поляне частокола для обороны от хищников Заяц обнаружил, что внутри ограды оказалось огромное засохшее дерево, которое может помешать строительству домика. Зайцу хочется спилить это дерево “под самый корешок” таким образом, чтобы дерево при падении не повредило ограду.
</p>
<p class=text>
Заяц обрубил все ветки, и от дерева остался цилиндр высотой h и радиусом r. Ограда имеет форму окружности с радиусом R и по высоте больше диаметра дерева. Центр дерева находится на расстоянии b от центра ограды. Заяц может повалить дерево в любую нужную ему сторону. После падения нижний край поваленного дерева касается (как касательная) окружности основания дерева, как показано на рисунке.
</p>
<p class=text>
Требуется написать программу, которая определит, сможет ли заяц повалить спиленное дерево, не повредив ограду.
</p>

<h2>Входные данные</h2>

<p class=text>
В единственной строке входного файла INPUT.TXT записано четыре целых числа через один пробел: R, r, h и b (1 &#8804; r &#8804; r+b, R&#8804; 100, 1 &#8804; h &#8804; 1000).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT нужно вывести слово YES, если существует направление падения дерева, при котором ограда останется неповрежденной, и NO в противном случае.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>90 3 50 10</td><td valign=top>YES</td></tr>
</table>

<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=552" target="_blank">Задача №552</a><br>Комбинаторика<br>Зоопарк</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 45%)</i></center>
<p class=text>
В городском зоопарке содержатся животные n разных видов. Для участия в международной выставке «Три твари» зоопарк должен представить трех животных различных видов.
</p>
<p class=text>
Требуется написать программу, которая вычислит число способов выбрать трех животных для участия в выставке.
</p>
<p class=text>
Например, если в зоопарке два медведя, тигр, лев и пингвин, то есть семь способов выбрать трех животных:
</p>
<ol>
<li>первый медведь, тигр и лев;</li>
<li>первый медведь, тигр и пингвин;</li>
<li>первый медведь, лев и пингвин;</li>
<li>второй медведь, тигр и лев;</li>
<li>второй медведь, тигр и пингвин;</li>
<li>второй медведь, лев и пингвин;</li>
<li>тигр, лев и пингвин.</li>
</ol>

<h2>Входные данные</h2>

<p class=text>
Входной текстовый файл INPUT.TXT содержит в первой строке натуральное число n – количество видов животных в городском зоопарке (1 <= n <= 1000). Во второй строке через пробел записаны n натуральных чисел – количество животных соответствующего вида. Общее число животных в зоопарке не превышает 1000.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выходной текстовый файл OUTPUT.TXT должен содержать одно число – количество способов выбрать трех животных для международной выставки.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>4<br>2 1 1 1</td><td valign=top>7</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>3<br>100 100 100</td><td valign=top>1000000</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=556" target="_blank">Задача №556</a><br>Динамическое программирование<br>Есть ли жизнь на Марсе?</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 37%)</i></center>
<p class=text>
- Ты врешь, Коля! На Марсе жизни нет! Кто тебе такую чушь сказал?
</p>
<p class=text>
- Петя. А ему сказал Саша.
</p>
<p class=text>
- Да от Пети я в жизни правдивого слова не слышал! Ему что ни скажут, он все переврет. Да и Саше откуда знать?
</p>
<p class=text>
- А Саше рассказал про это Владимир Алексеевич, наш учитель биологии.
</p>
<p class=text>
- Ну, Владимиру Алексеевичу-то можно верить... Только вряд ли он так сказал, это либо Саша, либо Петя придумал. А может, это ты меня разыгрываешь?..
</p>
<p class=text>
- Минуточку, ребята, - вмешался подошедший к спорящим учитель математики, Глеб Тимофеевич, - давайте подойдем к проблеме формально. Допустим, что все диалоги - Владимира Алексеевича с Сашей, Саши с Петей и Пети с Колей - действительно имели место. Пронумеруем ребят числами 1, 2 и 3. Предположим также, что каждый из ребят независимо друг от друга передал полученную информацию относительно жизни на Марсе верно с вероятностью p<sub>i</sub>, а соврал с вероятностью q<sub>i</sub> = 1 - p<sub>i</sub> для i = 1, 2, 3. Вероятности – это вещественные числа от нуля до единицы; событие, имеющее вероятность 0, никогда не произойдет, событие же с вероятностью 1 произойдет без всякого сомнения. Зная, что Коля после этого объявил, что жизнь на Марсе все-таки есть, найдите по данным p<sub>i</sub> вероятность того, что так действительно сказал Владимир Алексеевич.
</p>
<p class=text>
- А как искать эту вероятность? И что значит независимо друг от друга? – растерялись ребята.
</p>
<p class=text>
- Независимость означает, что действие одного из ребят никак не отражается на том, как поступят другие. К примеру, Пете неважно, соврал ли Саша - в любом случае он передаст сказанное Сашей правильно с вероятностью ровно p<sub>2</sub>.
Задача несложная, и можно рассмотреть все восемь возможных случаев. Первый случай - все ребята говорили правду, и вероятность этого случая равна p<sub>1</sub>&#8729;p<sub>2</sub>&#8729;p<sub>3</sub>. В этом случае жизнь на Марсе, без сомнения, есть - Владимиру Алексеевичу мы верим, а ребята передали его слова правильно. Второй случай, когда соврал только Саша, имеет место с вероятностью q<sub>1</sub>&#8729;p<sub>2</sub>&#8729;p<sub>3</sub>, и в этом случае жизни на Марсе нет. Далее переберем остальные шесть случаев, каждый раз перемножая соответствующие вероятности, а потом просуммируем вероятности тех случаев, в которых слова учителя переданы правильно. То, что вероятности для отдельных ребят в каждом случае надо перемножить - это и есть формальное определение независимости. Ну, в скольких случаях будет передано именно то, что говорил Владимир Алексеевич?
</p>
<p class=text>
- В одном …
</p>
<p class=text>
- А вот и нет. Например, если Петя и Коля соврали, а Саша сказал правду, то истина, дважды исказившись, дойдет до нас в неизменном виде. И вообще, четное количество отрицаний, примененных к утверждению, дает само утверждение. В нашей задаче случаев с четным количеством отрицаний - четыре, и итоговая вероятность равна p<sub>1</sub>&#8729;p<sub>2</sub>&#8729;p<sub>3</sub>+q<sub>1</sub>&#8729;q<sub>2</sub>&#8729;p<sub>3</sub>+q<sub>1</sub>&#8729;p<sub>2</sub>&#8729;q<sub>3</sub>+p<sub>1</sub>&#8729;q<sub>2</sub>&#8729;q<sub>3</sub>.
</p>
<p class=text>
- То есть если Петя и Коля точно соврут, а Саша точно скажет правду, то от Коли мы услышим в точности то, что говорил учитель?
</p>
<p class=text>
- Совершенно верно. А теперь решите-ка задачу для общего случая, когда ребят не трое, а n. Первому, кто решит - пятерка на следующей контрольной!
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит целое число n (1 <= n <= 100). Во второй строке через пробел записаны n вещественных чисел - это числа p<sub>1</sub>, p<sub>2</sub>, ..., p<sub>n</sub> (0 <= p<sub>i</sub> <= 1). Числа даны с не более чем шестью десятичными знаками после запятой.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно вещественное число, округленное до шести знаков после запятой - вероятность существования жизни на Марсе.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3<br>1 0.1 0.9</td><td valign=top>0.18</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=562" target="_blank">Задача №562</a><br>Теория графов<br>Слабая K-связность</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 47%)</i></center>
<p class=text>
Ане, как будущей чемпионке мира по программированию, поручили очень ответственное задание. Правительство вручает ей план постройки дорог между N городами. По плану все дороги односторонние, но между двумя городами может быть больше одной дороги, возможно, в разных направлениях. Ане необходимо вычислить минимальное такое K, что данный ей план является слабо K-связным.
</p>
<p class=text>
Правительство называет план слабо K-связным, если выполнено следующее условие: для любых двух различных городов можно проехать от одного до другого, нарушая правила движения не более K раз. Нарушение правил - это проезд по существующей дороге в обратном направлении. Гарантируется, что между любыми двумя городами можно проехать, возможно, несколько раз нарушив правила.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT записаны два числа 2 &#8804; N &#8804; 300 и 1 &#8804; M &#8804; 10<sup>5</sup> - количество городов и дорог в плане. В последующих M строках даны по два числа - номера городов, в которых начинается и заканчивается соответствующая дорога.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите минимальное K, такое, что данный во входном файле план является слабо K-связным.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3 2<br>
1 2<br>
1 3
</td><td valign=top>1</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>4 4<br>
2 4<br>
1 3<br>
4 1<br>
3 2
</td><td valign=top>0</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=575" target="_blank">Задача №575</a><br>Двумерные массивы<br>Строительство</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 41%)</i></center>
<img src="acmp_files/image01Z.gif" align=right alt="Строительство">
<p class=text>
Фирма, в которой вы работаете, исполняет проект строительства суперсовременного бизнес-центра. И вот, когда заказ на склад строительных материалов почти готов к подписанию директором, оказывается, что туда забыли включить некоторые товары. Конкретно, в нем не были предусмотрены материалы, необходимые для возведения стен между отдельными секциями в подвальных помещениях. Необходимо срочно написать программу, которая сможет рассчитать необходимое количество материалов.
</p>
<p class=text>
На плане подвальный этаж имеет вид прямоугольника, стороны которого лежат на линиях сетки с квадратными клетками. Сетка имеет такой масштаб, что сторона клетки соответствует одному метру стены подвального этажа. Каждая клетка на плане целиком принадлежит одному из помещений. Для каждой пары соседних по стороне клеток, отнесенных к разным помещениям, вдоль всей их общей стороны должна быть возведена стена толщиной 20 сантиметров и высотой три метра. Материалы для постройки всех внешних стен подвального этажа уже включены в заказ.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит два целых числа N и M (1 &#8804;  N, M &#8804; 100), разделенных пробелами - размеры подвала на плане. Каждая из N последующих строк содержит по M натуральных чисел, не превосходящих M x N, задающих номер помещения, к которому относится данная клетка. Эти числа разделены пробелами.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно вещественное число с точностью не менее 0.001 - общий объем возводимых стен в кубических метрах.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3 4<br>
1 1 3 3<br>
1 2 2 3<br>
2 2 3 3</td><td valign=top>4.56</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=576" target="_blank">Задача №576</a><br>Целочисленная арифметика<br>Гадание - 2</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 28%)</i></center>
<p class=text>
Маша недавно прочитала в книге «Теория чисел и предсказание будущего» о новом способе гадания. Способ заключается в следующем: надо выбрать целое положительное число N и посчитать количество чисел, меньших N и взаимно простых с ним. Это количество и будет результатом гадания.
</p>
<p class=text>
Поскольку гадать приходится достаточно часто, а процесс гадания достаточно трудоемок, Маша попросила вас написать программу, считающую результат гадания.
</p>
<p class=text>
Два числа называются <i>взаимно простыми</i>, если их наибольший общий делитель равен 1. <i>Наибольшим общим делителем</i> двух чисел a и b называется наибольшее целое положительное число, на которое делятся и a, и b.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит целое положительное число N (1 &#8804; N &#8804; 10<sup>5</sup>).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите одно число – результат гадания.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>13</td><td valign=top>12</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>6</td><td valign=top>2</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=578" target="_blank">Задача №578</a><br>Целочисленная арифметика<br>Система счисления</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 37%)</i></center>
<p class=text>
Вчера на уроке математики Саша узнал о том, что иногда полезно использовать вместо десятичной системы счисления какую-нибудь другую.
</p>
<p class=text>
Однако, учительница не объяснила, почему в системе счисления по основанию b в качестве цифр выбирают числа от 0 до b - 1.
</p>
<p class=text>
Немного подумав, Саша понял, что можно выбирать и другие наборы цифр. Например, вместо троичной системы счисления можно рассмотреть систему счисления, где вместо обычных цифр 0, 1, 2 есть цифры 1, 2 и 3.
</p>
<p class=text>
Саша заинтересовался вопросом, а как перевести число n в эту систему счисления? Например, число 7 в этой системе записывается как 21, так как 7 = 2&#8729;3+1, а число 22 записывается как 211, так как 22 = 2 &#8729; 9 + 1 &#8729; 3 + 1.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит натуральное число n, 1 &#8804; n &#8804; 2•10<sup>9</sup>.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите число n записанное в указанной системе счисления.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>7</td><td valign=top>21</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>22</td><td valign=top>211</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=580" target="_blank">Задача №580</a><br>Геометрия<br>Поднос</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 34%)</i></center>
<p class=text>
Школьная столовая хочет заказать новые треугольные подносы. Естественно, был организован тендер. Основным критерием отбора предложений является условие того, что имеющиеся в столовой круглые тарелки должны помещаться на новые подносы.
</p>
<p class=text>
Директор школы дал вам задание написать программу, проверяющую, помещается ли тарелка данного размера на поднос с данными длинами сторон.
</p>

<h2>Входные данные</h2>

<p class=text>
В первой строке входного файла INPUT.TXT находятся 3 целых положительных числа - длины сторон подноса. Гарантируется, что поднос с такими сторонами существует. Во второй строке входного файла содержится радиус тарелки - целое положительное число. Все числа во входном файле не превосходят 100. Радиус тарелки и стороны подноса указаны в одних и тех же единицах измерения.
</p>

<h2>Выходные данные</h2>

<p class=text>
Выведите в выходной файл OUTPUT.TXT сообщение YES, если тарелка помещается на поднос, и NO - в противном случае.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1 1 1<br>1</td><td valign=top>NO</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>3 4 5<br>1</td><td valign=top>YES</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=581" target="_blank">Задача №581</a><br>Геометрия<br>Атака летающих тарелок</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 36%)</i></center>
<p class=text>
Вы работаете в фирме, занимающейся разработкой компьютерных игр. Сейчас вы занимаетесь разработкой новой компьютерной игры "Атака летающих тарелок". По сюжету игры на планету Зумла приземляются летающие тарелки, и их надо уничтожать. Игрок управляет лазерной пушкой. Для того, чтобы произвести выстрел он указывает две точки на поверхности Зумлы (которая в игре считается плоской), через которые должен проходить лазерный луч (который является прямой). 
</p>
<p class=text>
Вы должны написать программу, определяющую, какие летающие тарелки были уничтожены выстрелом.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит целое число n (1 &#8804; n &#8804; 30000) - число приземлившихся летающих тарелок. Вторая строка содержит числа xp<sub>1</sub>, yp<sub>1</sub>, xp<sub>2</sub>, yp<sub>2</sub> - координаты точек, через которые проходит лазерный луч. Далее идут n строк, каждая из которых содержит описание одной летающей тарелки в формате x<sub>i</sub> y<sub>i</sub> r<sub>i</sub>, где x<sub>i</sub>, y<sub>i</sub> - координаты центра, r<sub>i</sub> - радиус тарелки. Все числа целые и не превосходят по модулю 10000. Радиусы летающих тарелок - целые и положительные. Летающие тарелки могут касаться и пересекаться.
</p>

<h2>Выходные данные</h2>

<p class=text>
В первую строку выходного файла OUTPUT.TXT выведите количество уничтоженных летающих тарелок. Во вторую строку выведите номера уничтоженных летающих тарелок в возрастающем порядке. Тарелка считается уничтоженной, если она имеет, хотя бы одну общую точку с лазерным лучом.
</p>

<h2>Пример</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>2<br>
0 0 1 1<br>
2 2 100<br>
1000 1000 1</td><td valign=top>2<br>1 2</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=582" target="_blank">Задача №582</a><br>Рекурсия, перебор<br>Кубик</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 47%)</i></center>
<p class=text>
Все мы в детстве играли в кубики. Были у нас и кубики с цифрами, и кубики с буквами. Были также и разноцветные кубики. Маленький Андрюша тоже любит играть в кубики. У него есть несколько наборов кубиков, причем все кубики из одного набора раскрашены одинаково, а кубики из разных наборов - по-разному.
</p>
<p class=text>
На столе у Андрюши лежат два кубика. Помогите ему определить, принадлежат они одному набору или нет. Стол у Андрюши стеклянный, поэтому он видит цвета всех граней кубика. Кубики принадлежат одному набору, если один из них можно комбинацией поворотов вокруг осей, проходящих через середины противоположных граней, перевести в другой.
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит описание первого кубика в формате: цвет передней грани, цвет задней грани, цвет верхней грани, цвет нижней грани, цвет левой грани, цвет правой грани. Во второй строке находится описание второго кубика в таком же формате. Цвета граней кодируются числами. Все числа во входном файле - целые, положительные и не превосходят 100.
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите «YES», если первый и второй кубики принадлежат одному набору, и «NO» - в противном случае.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>1 2 3 4 5 6<br>1 2 3 4 5 6</td><td valign=top>YES</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>1 2 3 4 5 6<br>1 1 1 1 1 1</td><td valign=top>NO</td></tr>
<tr class=white2><td align=center>3</td><td valign=top>1 2 3 4 5 6<br>5 6 3 4 2 1</td><td valign=top>YES</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=588" target="_blank">Задача №588</a><br>Математическое моделирование<br>Число</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 39%)</i></center>
<p class=text>
Скажем, что число в b-ой системе счисления описывает себя, если оно - b-значное, его первая цифра равна числу единиц в нем, вторая цифра равна числу двоек, и т.д., b-1-ая цифра равна числу цифр b-1, а последняя цифра равна числу нулей. Примером такого числа для b = 5 является 12002.
</p>
<p class=text>
Задано число b. Требуется найти число в системе счисления по основанию b, которое описывает себя.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT содержит единственное целое число b (2 &#8804; b &#8804; 1000).
</p>

<h2>Выходные данные</h2>

<p class=text>
В выходной файл OUTPUT.TXT выведите любое описывающее себя число в системе счисления с основанием b, или -1, если такого числа не существует. Каждую цифру числа выводите на отдельной строке в десятичной записи.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5</td><td valign=top>1<br>
2<br>
0<br>
0<br>
2</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>2</td><td valign=top>-1</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=595" target="_blank">Задача №595</a><br>Разбор строк<br>Слова</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 48%)</i></center>
<p class=text>
Для шифрования слов с ними можно производить множество различных операций. Например, интересна такая операция: первые несколько букв заданного слова приписываются к его концу в обратном порядке, после чего удаляются из начала слова. При этом слово a<sub>1</sub>a<sub>2</sub> … a<sub>k</sub>a<sub>k+1</sub> … a<sub>n</sub> переходит в слово a<sub>k+1</sub> … a<sub>n</sub>a<sub>k</sub>a<sub>k-1</sub> … a<sub>1</sub> (число k выбирается в диапазоне от 0 до n).
</p>
<p class=text>
Для двух заданных слов требуется определить, можно ли применением описанной операции преобразовать первое слово во второе.
</p>

<h2>Входные данные</h2>

<p class=text>
Входной файл INPUT.TXT состоит из двух строк - на первой из них записано исходное слово, а во второй - предполагаемый результат. Длины строк не превышают 50000 символов.
</p>

<h2>Выходные данные</h2>

<p class=text>
В первой строке выходного файла OUTPUT.TXT выведите "Yes", если преобразование возможно и "No", если нет. В случае положительного ответа во второй строке выведите k - длину перемещаемой части исходного слова k (из всех таких k выберите минимальный).
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>wpwdwpw<br>wdwpwpw</td><td valign=top>Yes<br>2</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>dWOddWd<br>dOdWdWd</td><td valign=top>No</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=596" target="_blank">Задача №596</a><br>Структуры данных<br>Сотовая связь в большом городе</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 35%)</i></center>
<p class=text>
В одном из больших городов нашей страны хорошо развит рынок сотовой связи. На рынке присутствуют несколько операторов, каждому из которых принадлежит некоторое количество базовых станций, с помощью которых организуется связь.
</p>
<p class=text>
Каждая базовая станция характеризуется своими координатами (для простоты размерами базовых станций пренебрегаем) и радиусом надежной связи (если абонент находится на расстоянии, не превосходящем этот радиус, от базовой станции, то она может использоваться для работы с ним - передачи ему сигналов и приема сигналов от него).
</p>
<p class=text>
Известный производитель сотовых телефонов Mokea планирует оснастить свою новую модель сотового телефона функцией определения базовых станций, с которыми может работать абонент. Вам же предстоит написать программу, которая по местоположению абонента для каждого оператора определит, сколько базовых станций этого оператора могут работать с абонентом.
</p>

<h2>Входные данные</h2>

<p class=text>Первая строка входного файла INPUT.TXT содержит целое число n (1 &#8804; n &#8804; 10000) - количество базовых станций в городе. Далее идут описания этих базовых станций. Каждое описание занимает две строки. На первой расположено название оператора сотовой связи, которому принадлежит эта базовая станция, а на второй - три целых числа x, y, r (-10000 &#8804; x, y &#8804; 10000, 1 &#8804; r &#8804; 10000) - соответственно ее координаты и радиус надежной связи. Последняя строка входного файла содержит два целых числа x<sub>a</sub>, y<sub>a</sub> (-10000 &#8804; x<sub>a</sub>, y<sub>a</sub> &#8804; 10000) - координаты абонента.
</p>
<p class=text>Все координаты во входном файле даны в одной и той же декартовой прямоугольной системе координат. Названия операторов - это непустые строки длиной не более 50 символов, состоящие из цифр, строчных и прописных букв латинского алфавита. Прописные и строчные буквы латинского алфавита различаются (например, MPS и mps - два разных оператора).
</p>

<h2>Выходные данные</h2>

<p class=text>
На первой строке выходного файла OUTPUT.TXT выведите число k – количество операторов сотовой связи, работающих в городе (разумеется, два оператора считаются разными, если их названия не совпадают). Далее выведите k строк. Каждая из этих строк должна содержать название оператора и количество базовых станций этого оператора, доступных абоненту. Первым должно идти название оператора, число базовых станций должно быть отделено от него одним пробелом. В этом списке операторы должны быть перечислены в том же порядке, в каком они встречаются во входном файле (см. примеры). Гарантируется, что k &#8804; 100.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>5<br>
Megahorn<br>
0 0 10<br>
BeepLine<br>
10 10 10<br>
MPS<br>
0 0 10<br>
Ele2<br>
0 0 1<br>
SkyPink<br>
100 100 10<br>
5 5</td><td valign=top>5<br>
Megahorn 1<br>
BeepLine 1<br>
MPS 1<br>
Ele2 0<br>
SkyPink 0</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>3<br>
Megahorn<br>
0 0 10<br>
MPS<br>
1 1 10<br>
Megahorn<br>
2 2 10<br>
1 1</td><td valign=top>2<br>
Megahorn 2<br>
MPS 1</td></tr>
</table>
<br>

<h1><a href="http://acmp.ru/index.asp?main=task&id_task=598" target="_blank">Задача №598</a><br>Рекурсия, перебор<br>Друзья - 2</h1><center><i>(Время: 1 сек. Память: 16 Мб Сложность: 51%)</i></center>
<p class=text>
Несколько человек решили поехать отдохнуть на природе, подышать свежим воздухом и т.п. Как это часто бывает, некоторые из них дружат друг с другом, а некоторые - нет. Для того, чтобы не испортить никому настроение, они решили разделиться на несколько групп. При этом, в каждой группе должно быть не более 5 человек и они должны дружить друг с другом.
</p>
<p class=text>
Найдите такое разбиение людей на группы, в котором размер наибольшей группы был бы максимальным (среди всех разбиений).
</p>

<h2>Входные данные</h2>

<p class=text>
Первая строка входного файла INPUT.TXT содержит целое число n (1 &#8804; n &#8804; 15) - количество людей. Следующие n строк содержат по n чисел. Если i-ый и j-ый люди дружат, то j-ое число i + 1-ой строки равно 1, иначе - 0.
</p>

<h2>Выходные данные</h2>

<p class=text>
В первой строке выходного файла OUTPUT.TXT выведите число групп. Во второй строке выходного файла выведите n чисел (i-ое число - номер группы, в которой находится i-ый человек). Так как в любом случае количество групп не превзойдет n, нумеруйте группы целыми числами от 1 до n. Если решений несколько, то выведите любое.
</p>

<h2>Примеры</h2>

<table class=main cellpadding=2 cellspacing=1>
<tr><th width=30>№</th><th>INPUT.TXT</th><th>OUTPUT.TXT</th></tr>
<tr class=white2><td align=center>1</td><td valign=top>3<br>
1 1 0<br>
1 1 0<br>
0 0 1</td><td valign=top>2<br>1 1 2</td></tr>
<tr class=white2><td align=center>2</td><td valign=top>8<br>
1 1 1 1 1 1 1 1<br>
1 1 1 1 1 1 1 1<br>
1 1 1 1 1 1 1 1<br>
1 1 1 1 1 1 1 1<br>
1 1 1 1 1 1 1 1<br>
1 1 1 1 1 1 1 1<br>
1 1 1 1 1 1 1 1<br>
1 1 1 1 1 1 1 1</td><td valign=top>3<br>1 1 1 1 1 2 2 3</td></tr>
</table>
<br>

</body></html>